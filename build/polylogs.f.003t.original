dtrilog (real(kind=8) & restrict x)
{
  real(kind=8) __result_dtrilog;

  {
    static integer(kind=4) C.3381 = 1;
    static integer(kind=4) C.3380 = 2;

    __result_dtrilog = REALPART_EXPR <wgplg (&C.3380, &C.3381, (real(kind=8) *) x)>;
  }
  return __result_dtrilog;
  return __result_dtrilog;
}


wgplg (integer(kind=4) & restrict n, integer(kind=4) & restrict p, real(kind=8) & restrict x)
{
  static real(kind=8) a[310] = {9.6753215043497997616128714071237482130527496337890625e-1, 1.660730329278500005951713092144927941262722015380859375e-1, 2.4879322924230000413370333944840240292251110076904296875e-2, 4.68636195945000035012473205142669030465185642242431640625e-3, 1.001627496159999963776243703250656835734844207763671875e-3, 2.32002196090000010423454179786517670436296612024307250977e-4, 5.68178227199999977508997062169981973056565038859844207764e-5, 1.4496300560000000779629740488285705168891581706702709198e-5, 3.81632945999999992190863593033434142398618860170245170593e-6, 1.02990426000000007829250029539602806494258402381092309952e-6, 2.8357538000000002500038402859783293052942099166102707386e-7, 7.9387050000000004116168246092594129592612262058537453413e-8, 2.253669999999999890679754273054707924828221621282864362e-8, 6.47433999999999979240481140204191423670465610484825447202e-9, 1.879120000000000020866566124728286313327885181934107095e-9, 5.50289999999999968112963619779141183352422217467392329127e-10, 1.6241999999999999333641735893443789479073657844310218934e-10, 4.82699999999999984899262751275025645422700470987820153823e-11, 1.44400000000000006708375364325672315056470207395022953278e-11, 4.33999999999999968248688413126928540251847632447379510268e-12, 1.31000000000000007260622034524857700194845622210237934269e-12, 4.0000000000000001214949822536014836544138867369113654604e-13, 1.19999999999999993547429880779093400362290966487677223995e-13, 3.99999999999999999527723741823959478853731629166556871269e-14, 9.99999999999999998819309354559898697134329072916392178172e-15, [31]=9.518088912783200239431380396126769483089447021484375e-1, 4.3131131846532000384542016035993583500385284423828125e-1, 1.000225071490500050597205472513451240956783294677734375e-1, 2.44241559521999988813245607843782636336982250213623046875e-2, 6.22512463723999976555889546148137014824897050857543945312e-3, 1.64078831235000004336310741592797057819552719593048095703e-3, 4.44079202650000026599691471673736486991401761770248413086e-4, 1.22774941680000009708306762945539958309382200241088867188e-4, 3.45398128400000025838186001880814046671730466187000274658e-5, 9.8586956499999994101880729235887201866717077791690826416e-6, 2.84856995000000018573404862720632735317849437706172466278e-6, 8.31708470000000035972234982417639059804059797897934913635e-7, 2.45039500000000015174285872970871835718753573019057512283e-7, 7.27649600000000038775514721832438080895144594251178205013e-8, 2.17580199999999984483411297067970147089965848863357678056e-8, 6.54616000000000006758513846770626554150140918864053674042e-9, 1.98032999999999992262066042406163518529993439187819603831e-9, 6.02040000000000022052547284876758068583590954858664190397e-10, 1.83849999999999990677897456774919117405975299561760039069e-10, 5.63700000000000015379875495360795017649180316254842182389e-11, 1.73500000000000001861965744695193354131534935191893964657e-11, 5.35999999999999977910133192032584594464983407391400760389e-12, 1.65999999999999999488460990768538461559607199991006609707e-12, 5.20000000000000005696928106139241765803679640178813770035e-13, 1.59999999999999999811089496729583791541492651666622748508e-13, 5.0000000000000001518687278170018545680173584211392068255e-14, 1.99999999999999999763861870911979739426865814583278435634e-14, [62]=9.8161027991365001899026765386224724352359771728515625e-1, 7.2926806320726000887333384525845758616924285888671875e-1, 2.277471490932100051107767058056197129189968109130859375e-1, 6.8090832961969993686324187365244142711162567138671875e-2, 2.01370118306400010255163834926861454732716083526611328125e-2, 5.95478480197000024920495064861825085245072841644287109375e-3, 1.76769013959000007886468441853367039584554731845855712891e-3, 5.27482185019999987897476589893130949349142611026763916016e-4, 1.58274614600000012231903467885274494619807228446006774902e-4, 4.77492207600000017763026971540085696688038296997547149658e-5, 1.44792040799999997699671130946263986061239847913384437561e-5, 4.41154885999999981554056671662067401484819129109382629395e-6, 1.35003869999999998014568111659450266870408086106181144714e-6, 4.14817789999999981867258129486497608695572125725448131561e-7, 1.27933070000000000635500163777280580035267121274955570698e-7, 3.95906999999999972975680152115218746189384546596556901932e-8, 1.22905499999999995010570693005150233467759335326263681054e-8, 3.82658000000000024207675631843922348096498353697825223207e-9, 1.19458999999999990420235145216964686709637533112982055172e-9, 3.73859999999999989035182519647466242718181206328154075891e-10, 1.17269999999999999323537270648509268922143888858045102097e-10, 3.68699999999999977902558901657250473027360726518963929266e-11, 1.16099999999999991990089981958706420728244523843386559747e-11, 3.66000000000000015660629690277563753550427172456238622544e-12, 1.15999999999999990396709022476806583926839389064866736589e-12, 3.69999999999999988519091788092997242175501843020057890499e-13, 1.19999999999999993547429880779093400362290966487677223995e-13, 3.99999999999999999527723741823959478853731629166556871269e-14, 9.99999999999999998819309354559898697134329072916392178172e-15, [93]=1.06405211846140002052152340183965861797332763671875e+0, 1.0691720744980999224793549728929065167903900146484375e+0, 4.1527193251768002024704173891223035752773284912109375e-1, 1.461033293622200079919792869986849837005138397216796875e-1, 4.9047326487839999764606346843720530159771442413330078125e-2, 1.6063408603960001308497140826148097403347492218017578125e-2, 5.1888935078999998129489767961786128580570220947265625e-3, 1.6629871732399999217921759964156080968677997589111328125e-3, 5.30582799690000020582936191004819193040020763874053955078e-4, 1.68870292510000000966302602378732444776687771081924438477e-4, 5.36832805899999999151711582712209747114684432744979858398e-5, 1.70592331299999989198575012228076275277999229729175567627e-5, 5.42174373999999996328593918071270252312388038262724876404e-6, 1.72394081999999997399436110767645402574999025091528892517e-6, 5.48532750000000025285414820969132065897611028049141168594e-7, 1.74677950000000001449330716205010638475414452841505408287e-7, 5.56755000000000011445253924290132996333113624132238328457e-8, 1.77623399999999996897654991508119781684627014328725636005e-8, 5.67223999999999984288915277300807682436811774095986038446e-9, 1.8131299999999999209752928253829365456972766423859866336e-9, 5.80119999999999957126776531547577078762323310456849867478e-10, 1.85790000000000011895965267367982886453914304070167418104e-10, 5.95500000000000037398880442815289875529982666080286435317e-11, 1.9109999999999999149133051283577268419922035036506713368e-11, 6.14000000000000009056931168440324187145912260277214045345e-12, 1.9699999999999998856557908870993240648891720034896479774e-12, 6.30000000000000041854653775307373671427969841207783474601e-13, 2.0000000000000000607474911268007418272069433684556827302e-13, 7.00000000000000046505170861452637412697744268008648305113e-14, 1.99999999999999999763861870911979739426865814583278435634e-14, 9.99999999999999998819309354559898697134329072916392178172e-15, 9.7920860669175002755082459771074354648590087890625e-1, 8.51881314868299932552275777197792194783687591552734375e-2, 8.5598522201300007716806561575140221975743770599365234375e-3, 1.21177214413000010166665543209774114075116813182830810547e-3, 2.07227685310000005062050498771952788956696167588233947754e-4, 3.99695869100000003028803907678678797310567460954189300537e-5, 8.38064065000000056561077488304078997316537424921989440918e-6, 1.86848945000000004086214595855341968899665516801178455353e-6, 4.36660870000000026341913355459878331998879730235785245895e-7, 1.05917330000000000723798176342077548284237309417221695185e-7, 2.64789199999999993823352552367936252331048763153376057744e-8, 6.7869999999999998273419153389102165263579991005826741457e-9, 1.77653999999999994703354922847811717123711616750370012596e-9, 4.73420000000000005054571636188467248507194540252385195345e-10, 1.28119999999999992875199512352469861237169723722217895556e-10, 3.51400000000000009209208350888692428196091732672812213423e-11, 9.75000000000000025827869579254504974787087778764771428541e-12, 2.7400000000000000377856747029867363115579470544957985112e-12, 7.69999999999999950181492079308390061266262338612875737454e-13, 2.19999999999999996584804437119130491722638134910461360505e-13, 5.99999999999999967737149403895467001811454832438386119975e-14, 1.99999999999999999763861870911979739426865814583278435634e-14, 9.99999999999999998819309354559898697134329072916392178172e-15, [155]=9.5021851963951997621649070424609817564487457275390625e-1, 2.90525291614329994605014917397056706249713897705078125e-1, 5.0817740617159996852070236172949080355465412139892578125e-2, 9.955437672800000747930226907556061632931232452392578125e-3, 2.11733895030999982184161112286346906330436468124389648438e-3, 4.78594705499999991966247891994612473354209214448928833008e-4, 1.13343213080000003532138430628606329264584928750991821289e-4, 2.78473310400000009670693629226789767017180565744638442993e-5, 7.04788107999999987126780662261005261370883090421557426453e-6, 1.82788739999999993041937193516410786742198979482054710388e-6, 4.83874920000000010967904605363454351163454703055322170258e-7, 1.30338420000000000399439773791920860190884923213161528111e-7, 3.56376899999999983513177491661200191330749476037453860044e-8, 9.87174000000000048876948820740506729265462126932106912136e-9, 2.76585999999999979390561446459737005021395361836766824126e-9, 7.82790000000000044114991692344391119307012161243619630113e-10, 2.23540000000000010783276529833369077743254749179868667852e-10, 6.43500000000000026739916725663766348258798544179626333062e-11, 1.8660000000000000056854403078188890229699437028898501012e-11, 5.44999999999999959755706156140352158269435367543565007509e-12, 1.60000000000000004859799290144059346176555469476454618416e-12, 4.70000000000000016800015311505412106711163100492001376551e-13, 1.40000000000000009301034172290527482539548853601729661023e-13, 3.99999999999999999527723741823959478853731629166556871269e-14, 9.99999999999999998819309354559898697134329072916392178172e-15, [186]=9.5064032186777003285982345914817415177822113037109375e-1, 5.4138285465170998822515002757427282631397247314453125e-1, 1.36499795903209986125403929690946824848651885986328125e-1, 3.4179423282069999745491628573290654458105564117431640625e-2, 8.69027883582999989553474762260520947165787220001220703125e-3, 2.25284084155000013591219065745008265366777777671813964844e-3, 5.95160898060000023018778492200908658560365438461303710938e-4, 1.5995617765999999059303715576163540390552952885627746582e-4, 4.36521309600000005342670950092553994181798771023750305176e-5, 1.20747468800000004254683108606549524211004609242081642151e-5, 3.38018176000000016749938436255717988387914374470710754395e-6, 9.56324760000000090998236931816300909758865600451827049255e-7, 2.73131289999999979023416647738731199979156372137367725372e-7, 7.8669680000000006209811154872513228042407718021422624588e-8, 2.28319499999999995157414411830337774844679188390728086233e-8, 6.6720500000000003431986079604609080062616044415335636586e-9, 1.9619099999999998973073519136726267086956454477331135422e-9, 5.80179999999999954851630839451452625876726187925669364631e-10, 1.724599999999999917531523016539637613298019402918725973e-10, 5.15099999999999984166810777768275974447531595501459378283e-11, 1.54499999999999989925267543808016308844177633119443271426e-11, 4.64999999999999977520645684726224703721408904044665177935e-12, 1.41000000000000005040004593451623632013348930147600412965e-12, 4.29999999999999985292806728482543942356647326263896502496e-13, 1.30000000000000001424232026534810441450919910044703442509e-13, 3.99999999999999999527723741823959478853731629166556871269e-14, 9.99999999999999998819309354559898697134329072916392178172e-15, [217]=9.880001167222900448905420489609241485595703125e-1, 4.3640676096010001805414191267118440009653568267822265625e-2, 2.95091178278000017959348255658369453158229589462280273438e-3, 3.14778097199999988987234589288277675223071128129959106445e-4, 4.314846028999999751193591968068119513191049918532371521e-5, 6.93818229999999965505741439386611091322265565395355224609e-6, 1.24640350000000003428176492681345166602113749831914901733e-6, 2.42936279999999982395455415742913096721622423501685261726e-7, 5.04082699999999971971265436652964719854708164348267018795e-8, 1.09907500000000003292990270113531348084023875344428233802e-8, 2.49467000000000003038709515674857530864727550579118542373e-9, 5.85399999999999963709108765345543942681949545203679008409e-10, 1.41269999999999993994055412072747505286551827907715050969e-10, 3.49200000000000006466569920139539568229580801528300071368e-11, 8.80999999999999982078188169637618116364352616187716193963e-12, 2.26000000000000006359595517987036271010878318854508961522e-12, 5.90000000000000010347445192284505507073454066979678600546e-13, 1.59999999999999999811089496729583791541492651666622748508e-13, 3.99999999999999999527723741823959478853731629166556871269e-14, 9.99999999999999998819309354559898697134329072916392178172e-15, [248]=9.5768506546349996266798143551568500697612762451171875e-1, 1.972524967953399877007569784836960025131702423095703125e-1, 2.6033703139179999175301105651669786311686038970947265625e-2, 4.09382168260999986658665861227746063377708196640014648438e-3, 7.26817071099999955675896590179263512254692614078521728516e-4, 1.40918792610000007722165227264099485182669013738632202148e-4, 2.92045891399999990166880953212924509898584801703691482544e-5, 6.3763114400000002530868696559718244998293812386691570282e-6, 1.45167849999999994508041896434935580373348784632980823517e-6, 3.4205280999999999808406075246791644417498901020735502243e-7, 8.29430199999999967489834476822019304620425828034058213234e-8, 2.06078400000000002550388725078636675824839130655163899064e-8, 5.2282300000000002563647201697747540771743501863966230303e-9, 1.35065999999999996599572694272982376073599652954726479948e-9, 3.5450999999999999898663223674838678584064766141636937391e-10, 9.43599999999999977870645791874965914447503934070482500829e-11, 2.54299999999999996844073891964519503090802476918952379492e-11, 6.92999999999999975358182045035453273679887375990915643342e-12, 1.91000000000000014131756561743355509646116741073740286083e-12, 5.29999999999999963086632317750203260541680405637521289464e-13, 1.49999999999999991934287350973866750452863708109596529994e-13, 3.99999999999999999527723741823959478853731629166556871269e-14, 9.99999999999999998819309354559898697134329072916392178172e-15, [279]=9.934365167134699969864186641643755137920379638671875e-1, 2.22577012682599988113718580962085979990661144256591796875e-2, 1.01475574702999992229845993563230877043679356575012207031e-3, 8.17515624999999991444343816482387410360388457775115966797e-5, 8.99973547000000054717997605147061790376028511673212051392e-6, 1.20823986999999992377927918868474321811845584306865930557e-6, 1.86169129999999999398088137633755501099130924558266997337e-7, 3.17472300000000001868541844689264319612220788258127868176e-8, 5.85214999999999989680363686982145221548989866278134286404e-9, 1.14738999999999990175896870289425424904727890407230006531e-9, 2.36519999999999975266054986689141272082625988559811958112e-10, 5.08199999999999987314623946001439658975984414723825466353e-11, 1.13099999999999992656275214280676641182693531462177816138e-11, 2.59000000000000007109493631908524733428039743543536133075e-12, 6.10000000000000026101049483795939589250711954093731037574e-13, 1.49999999999999991934287350973866750452863708109596529994e-13, 3.99999999999999999527723741823959478853731629166556871269e-14, 9.99999999999999998819309354559898697134329072916392178172e-15};
  real(kind=8) alfa;
  real(kind=8) b0;
  real(kind=8) b1;
  real(kind=8) b2;
  static real(kind=8) c[16] = {1.64493406684819998275770558393560349941253662109375e+0, 0.0, 1.8940656589944999677044279451365582644939422607421875e+0, 0.0, 1.2020569031596000098005561085301451385021209716796875e+0, -1.8940656589944999677044279451365582644939422607421875e+0, 3.014232105440699971410367652424611151218414306640625e+0, [8]=1.08232323371109995235883616260252892971038818359375e+0, -3.014232105440699971410367652424611151218414306640625e+0, [12]=1.0369277551433999651209205694613046944141387939453125e+0};
  static real(kind=8) c1 = 1.3333333333332999526277262702933512628078460693359375e+0;
  static real(kind=8) c2 = 3.33333333333329984160542380777769722044467926025390625e-1;
  static real(kind=8) fct[5] = {1.0e+0, 1.0e+0, 2.0e+0, 6.0e+0, 2.4e+1};
  real(kind=8) h;
  static real(kind=8) half = 5.0e-1;
  integer(kind=4) i;
  static integer(kind=4) index[31] = {1, 2, 3, 4, 0, [5 ... 9]=0, 5, 6, 7, 0, [14 ... 19]=0, 8, 9, 0, [23 ... 29]=0, 10};
  integer(kind=4) k;
  integer(kind=4) l;
  integer(kind=4) m;
  integer(kind=4) n1k;
  static integer(kind=4) nc[10] = {24, 26, 28, 30, 22, 24, 26, 19, 22, 17};
  integer(kind=4) p1;
  real(kind=8) q;
  real(kind=8) r;
  static real(kind=8) s1[16] = {1.64493406684819998275770558393560349941253662109375e+0, 1.2020569031596000098005561085301451385021209716796875e+0, 1.08232323371109995235883616260252892971038818359375e+0, 1.0369277551433999651209205694613046944141387939453125e+0, 1.2020569031596000098005561085301451385021209716796875e+0, 2.7058080842777998409331985385506413877010345458984375e-1, 9.65511599894439964675285636985790915787220001220703125e-2, [8]=1.08232323371109995235883616260252892971038818359375e+0, 9.65511599894439964675285636985790915787220001220703125e-2, [12]=1.0369277551433999651209205694613046944141387939453125e+0};
  static real(kind=8) sgn[5] = {1.0e+0, -1.0e+0, 1.0e+0, -1.0e+0, 1.0e+0};
  complex(kind=8) sk;
  complex(kind=8) sm;
  real(kind=8) u[5];
  complex(kind=8) v[6];
  real(kind=8) x1;
  static real(kind=8) zero = 0.0;
  complex(kind=8) __result_wgplg;

  if ((((unsigned int) *n + 4294967295 > 3 || *p <= 0) || *p > 4) || *n + *p > 5)
    {
      __result_wgplg = COMPLEX_EXPR <zero, 0.0>;
      {
        struct __st_parameter_dt dt_parm.0;

        dt_parm.0.common.filename = &"../src/F/core/polylogs.f"[1]{lb: 1 sz: 1};
        dt_parm.0.common.line = 389;
        dt_parm.0.format = &"(/\' ***** CERN SUBROUTINE WGPLG ... ILLEGAL VALUES\',                \'   N = \',I3,\'   P = \',I3)"[1]{lb: 1 sz: 1};
        dt_parm.0.format_len = 94;
        dt_parm.0.common.flags = 4096;
        dt_parm.0.common.unit = 6;
        _gfortran_st_write (&dt_parm.0);
        _gfortran_transfer_integer_write (&dt_parm.0, (integer(kind=4) *) n, 4);
        _gfortran_transfer_integer_write (&dt_parm.0, (integer(kind=4) *) p, 4);
        _gfortran_st_write_done (&dt_parm.0);
      }
      return __result_wgplg;
    }
  L.1:;
  if (*x == sgn[0])
    {
      __result_wgplg = COMPLEX_EXPR <s1[((integer(kind=8)) *p * 4 + (integer(kind=8)) *n) + -5], 0.0>;
      return __result_wgplg;
    }
  L.2:;
  if (*x > fct[2] || *x < sgn[1])
    {
      x1 = sgn[0] / *x;
      h = c1 * x1 + c2;
      alfa = h * 2.0e+0;
      v[0] = COMPLEX_EXPR <sgn[0], 0.0>;
      v[1] = __builtin_clog (COMPLEX_EXPR <-*x, zero>);
      {
        integer(kind=4) D.3431;

        D.3431 = *n + *p;
        l = 2;
        if (l <= D.3431)
          {
            while (1)
              {
                {
                  logical(kind=4) D.3435;

                  __label_000033:;
                  v[(integer(kind=8)) l] = (v[1] * v[(integer(kind=8)) (l + -1)]) / COMPLEX_EXPR <(real(kind=8)) l, 0.0>;
                  L.4:;
                  D.3435 = l == D.3431;
                  l = l + 1;
                  if (D.3435) goto L.5;
                }
              }
          }
        L.5:;
      }
      sk = COMPLEX_EXPR <zero, 0.0>;
      {
        integer(kind=4) D.3436;

        D.3436 = *p + -1;
        k = 0;
        if (k <= D.3436)
          {
            while (1)
              {
                {
                  logical(kind=4) D.3452;

                  p1 = *p - k;
                  {
                    real(kind=8) D.3439;

                    D.3439 = x1;
                    r = __builtin_powi (D.3439, p1) / ((fct[(integer(kind=8)) p1] * fct[(integer(kind=8)) (*n + -1)]));
                  }
                  sm = COMPLEX_EXPR <zero, 0.0>;
                  {
                    integer(kind=4) D.3440;

                    D.3440 = k;
                    m = 0;
                    if (m <= D.3440)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.3450;

                              n1k = (*n + k) - m;
                              l = index[(integer(kind=8)) ((n1k * 10 + p1) + -10) + -1];
                              b1 = zero;
                              b2 = zero;
                              {
                                integer(kind=4) D.3443;

                                D.3443 = nc[(integer(kind=8)) l + -1];
                                i = D.3443;
                                if (i >= 0)
                                  {
                                    while (1)
                                      {
                                        {
                                          logical(kind=4) D.3447;

                                          b0 = (a[((integer(kind=8)) l * 31 + (integer(kind=8)) i) + -31] + alfa * b1) - b2;
                                          b2 = b1;
                                          __label_000031:;
                                          b1 = b0;
                                          L.10:;
                                          D.3447 = i == 0;
                                          i = i + -1;
                                          if (D.3447) goto L.11;
                                        }
                                      }
                                  }
                                L.11:;
                              }
                              {
                                integer(kind=4) D.3448;

                                D.3448 = p1;
                                q = ((((fct[(integer(kind=8)) (n1k + -1)] / fct[(integer(kind=8)) (k - m)])) * ((b0 - h * b2))) * r) / (real(kind=8)) _gfortran_pow_i4_i4 (D.3448, n1k);
                              }
                              __label_000035:;
                              sm = v[(integer(kind=8)) m] * COMPLEX_EXPR <q, 0.0> + sm;
                              L.8:;
                              D.3450 = m == D.3440;
                              m = m + 1;
                              if (D.3450) goto L.9;
                            }
                          }
                      }
                    L.9:;
                  }
                  __label_000034:;
                  sk = COMPLEX_EXPR <sgn[(integer(kind=8)) k], 0.0> * sm + sk;
                  L.6:;
                  D.3452 = k == D.3436;
                  k = k + 1;
                  if (D.3452) goto L.7;
                }
              }
          }
        L.7:;
      }
      sm = COMPLEX_EXPR <zero, 0.0>;
      {
        integer(kind=4) D.3453;

        D.3453 = *n + -1;
        m = 0;
        if (m <= D.3453)
          {
            while (1)
              {
                {
                  logical(kind=4) D.3457;

                  __label_000036:;
                  sm = v[(integer(kind=8)) m] * COMPLEX_EXPR <c[((integer(kind=8)) *p * 4 + (integer(kind=8)) (*n - m)) + -5], 0.0> + sm;
                  L.12:;
                  D.3457 = m == D.3453;
                  m = m + 1;
                  if (D.3457) goto L.13;
                }
              }
          }
        L.13:;
      }
      __result_wgplg = COMPLEX_EXPR <sgn[(integer(kind=8)) *n], 0.0> * sk + COMPLEX_EXPR <sgn[(integer(kind=8)) *p], 0.0> * ((v[(integer(kind=8)) (*n + *p)] + sm));
      return __result_wgplg;
    }
  L.3:;
  if (*x > half)
    {
      x1 = sgn[0] - *x;
      h = c1 * x1 + c2;
      alfa = h * 2.0e+0;
      v[0] = COMPLEX_EXPR <sgn[0], 0.0>;
      u[0] = sgn[0];
      v[1] = __builtin_clog (COMPLEX_EXPR <x1, zero>);
      u[1] = __builtin_log (*x);
      {
        integer(kind=4) D.3459;

        D.3459 = *p;
        l = 2;
        if (l <= D.3459)
          {
            while (1)
              {
                {
                  logical(kind=4) D.3463;

                  __label_000023:;
                  v[(integer(kind=8)) l] = (v[1] * v[(integer(kind=8)) (l + -1)]) / COMPLEX_EXPR <(real(kind=8)) l, 0.0>;
                  L.15:;
                  D.3463 = l == D.3459;
                  l = l + 1;
                  if (D.3463) goto L.16;
                }
              }
          }
        L.16:;
      }
      {
        integer(kind=4) D.3464;

        D.3464 = *n;
        l = 2;
        if (l <= D.3464)
          {
            while (1)
              {
                {
                  logical(kind=4) D.3468;

                  __label_000026:;
                  u[(integer(kind=8)) l] = (u[1] * u[(integer(kind=8)) (l + -1)]) / (real(kind=8)) l;
                  L.17:;
                  D.3468 = l == D.3464;
                  l = l + 1;
                  if (D.3468) goto L.18;
                }
              }
          }
        L.18:;
      }
      sk = COMPLEX_EXPR <zero, 0.0>;
      {
        integer(kind=4) D.3469;

        D.3469 = *n + -1;
        k = 0;
        if (k <= D.3469)
          {
            while (1)
              {
                {
                  logical(kind=4) D.3485;

                  p1 = *n - k;
                  {
                    real(kind=8) D.3472;

                    D.3472 = x1;
                    r = __builtin_powi (D.3472, p1) / fct[(integer(kind=8)) p1];
                  }
                  sm = COMPLEX_EXPR <zero, 0.0>;
                  {
                    integer(kind=4) D.3473;

                    D.3473 = *p + -1;
                    m = 0;
                    if (m <= D.3473)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.3483;

                              n1k = *p - m;
                              l = index[(integer(kind=8)) ((n1k * 10 + p1) + -10) + -1];
                              b1 = zero;
                              b2 = zero;
                              {
                                integer(kind=4) D.3476;

                                D.3476 = nc[(integer(kind=8)) l + -1];
                                i = D.3476;
                                if (i >= 0)
                                  {
                                    while (1)
                                      {
                                        {
                                          logical(kind=4) D.3480;

                                          b0 = (a[((integer(kind=8)) l * 31 + (integer(kind=8)) i) + -31] + alfa * b1) - b2;
                                          b2 = b1;
                                          __label_000012:;
                                          b1 = b0;
                                          L.23:;
                                          D.3480 = i == 0;
                                          i = i + -1;
                                          if (D.3480) goto L.24;
                                        }
                                      }
                                  }
                                L.24:;
                              }
                              {
                                integer(kind=4) D.3481;

                                D.3481 = p1;
                                q = ((sgn[(integer(kind=8)) m] * ((b0 - h * b2))) * r) / (real(kind=8)) _gfortran_pow_i4_i4 (D.3481, n1k);
                              }
                              __label_000025:;
                              sm = v[(integer(kind=8)) m] * COMPLEX_EXPR <q, 0.0> + sm;
                              L.21:;
                              D.3483 = m == D.3473;
                              m = m + 1;
                              if (D.3483) goto L.22;
                            }
                          }
                      }
                    L.22:;
                  }
                  __label_000024:;
                  sk = COMPLEX_EXPR <u[(integer(kind=8)) k], 0.0> * ((COMPLEX_EXPR <s1[((integer(kind=8)) *p * 4 + (integer(kind=8)) p1) + -5], 0.0> - sm)) + sk;
                  L.19:;
                  D.3485 = k == D.3469;
                  k = k + 1;
                  if (D.3485) goto L.20;
                }
              }
          }
        L.20:;
      }
      __result_wgplg = COMPLEX_EXPR <sgn[(integer(kind=8)) *p] * u[(integer(kind=8)) *n], 0.0> * v[(integer(kind=8)) *p] + sk;
      return __result_wgplg;
    }
  L.14:;
  l = index[(integer(kind=8)) ((*n * 10 + *p) + -10) + -1];
  h = *x * c1 + c2;
  alfa = h * 2.0e+0;
  b1 = zero;
  b2 = zero;
  {
    integer(kind=4) D.3486;

    D.3486 = nc[(integer(kind=8)) l + -1];
    i = D.3486;
    if (i >= 0)
      {
        while (1)
          {
            {
              logical(kind=4) D.3490;

              b0 = (a[((integer(kind=8)) l * 31 + (integer(kind=8)) i) + -31] + alfa * b1) - b2;
              b2 = b1;
              __label_000011:;
              b1 = b0;
              L.25:;
              D.3490 = i == 0;
              i = i + -1;
              if (D.3490) goto L.26;
            }
          }
      }
    L.26:;
  }
  {
    integer(kind=4) D.3492;
    real(kind=8) D.3491;

    D.3491 = *x;
    D.3492 = *p;
    __result_wgplg = COMPLEX_EXPR <(((b0 - h * b2)) * __builtin_powi (D.3491, *p)) / ((fct[(integer(kind=8)) *p] * (real(kind=8)) _gfortran_pow_i4_i4 (D.3492, *n))), 0.0>;
  }
  return __result_wgplg;
  return __result_wgplg;
}


ddilog (real(kind=8) & restrict x)
{
  real(kind=8) a;
  real(kind=8) alfa;
  real(kind=8) b0;
  real(kind=8) b1;
  real(kind=8) b2;
  static real(kind=8) c[19] = {4.29966935608136979762861074050306342542171478271484375e-1, 4.0975987533077107283219220335013233125209808349609375e-1, -1.8588436650145999384786676955627626739442348480224609375e-2, 1.45751084062270010698048050556963062263093888759613037109e-3, -1.43041844423399993257647877520355450542410835623741149902e-4, 1.58841554188000007633539689688717544413520954549312591553e-5, -1.90784959390000001533405082909666816703975200653076171875e-6, 2.41951808500000014990976258955068800560184172354638576508e-7, -3.19334127000000029833487067906783174464635521871969103813e-8, 4.34545059999999990404336193275738886576675668038660660386e-9, -6.05784800000000031702899790239050942242116093439108226448e-10, 8.61210000000000043179898485152937766956560139419707411435e-11, -1.24432999999999996973583044678214582466624360534979132353e-11, 1.82259999999999992808121477187458729478375385468780223164e-12, -2.70099999999999980006904480454594211127471864442028959274e-13, 4.03999999999999969861830942932155190161274890825460204269e-14, -6.09999999999999972458507928767136821253169514864267419796e-15, 9.00000000000000030491814627944381043890038776936202147283e-16, -9.99999999999999979097786724034603561841114940846736436342e-17};
  real(kind=8) h;
  static real(kind=8) half = 5.0e-1;
  integer(kind=4) i;
  static real(kind=8) malf = -5.0e-1;
  static real(kind=8) mone = -1.0e+0;
  static real(kind=8) mtwo = -2.0e+0;
  static real(kind=8) one = 1.0e+0;
  static real(kind=8) pi3 = 3.289868133696452812131383325322531163692474365234375e+0;
  static real(kind=8) pi6 = 1.6449340668482259619764818125986494123935699462890625e+0;
  real(kind=8) s;
  real(kind=8) t;
  real(kind=8) y;
  static real(kind=8) zero = 0.0;
  real(kind=8) __result_ddilog;

  if (*x == one)
    {
      __result_ddilog = pi6;
      return __result_ddilog;
    }
  else
    {
      if (*x == mone)
        {
          __result_ddilog = malf * pi6;
          return __result_ddilog;
        }
      L.28:;
    }
  L.27:;
  t = -*x;
  if (t <= mtwo)
    {
      y = mone / ((one + t));
      s = one;
      {
        real(kind=8) D.3523;
        real(kind=8) D.3522;
        real(kind=8) D.3521;
        real(kind=8) D.3520;

        D.3520 = __builtin_log (-t);
        D.3521 = D.3520 * D.3520;
        D.3522 = __builtin_log (one / t + one);
        D.3523 = D.3522 * D.3522;
        a = ((D.3521 - D.3523)) * half - pi3;
      }
    }
  else
    {
      if (t < mone)
        {
          y = mone - t;
          s = mone;
          a = __builtin_log (-t);
          a = ((__builtin_log (one / t + one) + a)) * a - pi6;
        }
      else
        {
          if (t <= malf)
            {
              y = ((mone - t)) / t;
              s = one;
              a = __builtin_log (-t);
              a = ((malf * a + __builtin_log (one + t))) * a - pi6;
            }
          else
            {
              if (t < zero)
                {
                  y = -(t / ((one + t)));
                  s = mone;
                  {
                    real(kind=8) D.3528;
                    real(kind=8) D.3527;

                    D.3527 = __builtin_log (one + t);
                    D.3528 = D.3527 * D.3527;
                    a = half * D.3528;
                  }
                }
              else
                {
                  if (t <= one)
                    {
                      y = t;
                      s = one;
                      a = zero;
                    }
                  else
                    {
                      y = one / t;
                      s = mone;
                      {
                        real(kind=8) D.3531;
                        real(kind=8) D.3530;

                        D.3530 = __builtin_log (t);
                        D.3531 = D.3530 * D.3530;
                        a = half * D.3531 + pi6;
                      }
                    }
                  L.33:;
                }
              L.32:;
            }
          L.31:;
        }
      L.30:;
    }
  L.29:;
  h = y * 2.0e+0 - one;
  alfa = h * 2.0e+0;
  b1 = zero;
  b2 = zero;
  i = 18;
  if (i >= 0)
    {
      while (1)
        {
          {
            logical(kind=4) D.3535;

            b0 = (c[(integer(kind=8)) i] + alfa * b1) - b2;
            b2 = b1;
            __label_000001:;
            b1 = b0;
            L.34:;
            D.3535 = i == 0;
            i = i + -1;
            if (D.3535) goto L.35;
          }
        }
    }
  L.35:;
  __result_ddilog = -((((b0 - h * b2)) * s + a));
  return __result_ddilog;
  return __result_ddilog;
}


cl2 (real(kind=8) & restrict theta)
{
  real(kind=8) b[30];
  real(kind=8) d;
  real(kind=8) h;
  integer(kind=4) i;
  real(kind=8) p;
  real(kind=8) pi;
  real(kind=8) v;
  real(kind=8) x;
  real(kind=8) xs;
  real(kind=8) __result_cl2;

  b[0] = 1.666666666666666574148081281236954964697360992431640625e-1;
  b[1] = 3.3333333333333332870740406406184774823486804962158203125e-2;
  b[2] = 2.38095238095238082021154468748136423528194427490234375e-2;
  b[3] = 3.3333333333333332870740406406184774823486804962158203125e-2;
  b[4] = 7.575757575757575967845269815370556898415088653564453125e-2;
  b[5] = 2.5311355311355310249155081692151725292205810546875e-1;
  b[6] = 1.1666666666666667406815349750104360282421112060546875e+0;
  b[7] = 7.0921568627450977118087394046597182750701904296875e+0;
  b[8] = 5.497117794486215558436015271581709384918212890625e+1;
  b[9] = 5.291242424242424249314353801310062408447265625e+2;
  b[10] = 6.1921231884057970091816969215869903564453125e+3;
  b[11] = 8.6580253113553117145784199237823486328125e+4;
  b[12] = 1.42551716666666674427688121795654296875e+6;
  b[13] = 2.729823106781609356403350830078125e+7;
  b[14] = 6.0158087390064239501953125e+8;
  b[15] = 1.51163157670921573638916015625e+10;
  b[16] = 4.2961464306116668701171875e+11;
  b[17] = 1.3711655205088333984375e+13;
  b[18] = 4.883323189735931875e+14;
  b[19] = 1.9296579341940068e+16;
  b[20] = 8.41693047573682688e+17;
  b[21] = 4.0338071854059454464e+19;
  b[22] = 2.115074863808199262208e+21;
  b[23] = 1.20866265222965262024704e+23;
  b[24] = 7.5008667460769641660416e+24;
  b[25] = 5.03877810148106816268009472e+26;
  b[26] = 3.6528776484818122275565862912e+28;
  b[27] = 2.849876930245088236122601947136e+30;
  b[28] = 2.38654274996836274479629072334848e+32;
  pi = 3.141592653589793115997963468544185161590576171875e+0;
  x = __builtin_fmod (*theta, pi * 2.0e+0);
  if (x > pi)
    {
      x = x - pi * 2.0e+0;
    }
  L.36:;
  if (-pi >= x)
    {
      x = pi * 2.0e+0 + x;
    }
  L.37:;
  if (x == 0.0)
    {
      __result_cl2 = 0.0;
    }
  else
    {
      h = 1.0e+0 - __builtin_log (ABS_EXPR <x>);
      {
        real(kind=8) D.3554;
        real(kind=8) D.3553;

        D.3553 = x;
        D.3554 = D.3553 * D.3553;
        xs = D.3554;
      }
      p = xs;
      v = 2.0e+0;
      i = 1;
      if (i <= 20)
        {
          while (1)
            {
              {
                logical(kind=4) D.3560;

                d = (b[(integer(kind=8)) i + -1] / (((real(kind=8)) ((i * 2) * (i * 2 + 1)) * v))) * p;
                h = h + d;
                if ((d < 1.00000000000000007770539987666107923830718560119501514549e-15 || p < 1.00000000000000000785754519458238030392258619451080624462e-35) || v > 9.9999999999999996863366107917975552e+34) goto __label_000002;
                L.41:;
                p = p * xs;
                __label_000001:;
                v = (real(kind=8)) ((i * 2 + 1) * ((i + 1) * 2)) * v;
                L.39:;
                D.3560 = i == 20;
                i = i + 1;
                if (D.3560) goto L.40;
              }
            }
        }
      L.40:;
      __label_000002:;
      __result_cl2 = x * h;
    }
  L.38:;
  return __result_cl2;
  return __result_cl2;
}


cl3 (real(kind=8) & restrict theta)
{
  real(kind=8) b[30];
  real(kind=8) d;
  real(kind=8) h;
  integer(kind=4) i;
  real(kind=8) p;
  real(kind=8) pi;
  real(kind=8) v;
  real(kind=8) x;
  real(kind=8) xs;
  real(kind=8) zeta3;
  real(kind=8) __result_cl3;

  b[0] = 1.666666666666666574148081281236954964697360992431640625e-1;
  b[1] = 3.3333333333333332870740406406184774823486804962158203125e-2;
  b[2] = 2.38095238095238082021154468748136423528194427490234375e-2;
  b[3] = 3.3333333333333332870740406406184774823486804962158203125e-2;
  b[4] = 7.575757575757575967845269815370556898415088653564453125e-2;
  b[5] = 2.5311355311355310249155081692151725292205810546875e-1;
  b[6] = 1.1666666666666667406815349750104360282421112060546875e+0;
  b[7] = 7.0921568627450977118087394046597182750701904296875e+0;
  b[8] = 5.497117794486215558436015271581709384918212890625e+1;
  b[9] = 5.291242424242424249314353801310062408447265625e+2;
  b[10] = 6.1921231884057970091816969215869903564453125e+3;
  b[11] = 8.6580253113553117145784199237823486328125e+4;
  b[12] = 1.42551716666666674427688121795654296875e+6;
  b[13] = 2.729823106781609356403350830078125e+7;
  b[14] = 6.0158087390064239501953125e+8;
  b[15] = 1.51163157670921573638916015625e+10;
  b[16] = 4.2961464306116668701171875e+11;
  b[17] = 1.3711655205088333984375e+13;
  b[18] = 4.883323189735931875e+14;
  b[19] = 1.9296579341940068e+16;
  b[20] = 8.41693047573682688e+17;
  b[21] = 4.0338071854059454464e+19;
  b[22] = 2.115074863808199262208e+21;
  b[23] = 1.20866265222965262024704e+23;
  b[24] = 7.5008667460769641660416e+24;
  b[25] = 5.03877810148106816268009472e+26;
  b[26] = 3.6528776484818122275565862912e+28;
  b[27] = 2.849876930245088236122601947136e+30;
  b[28] = 2.38654274996836274479629072334848e+32;
  pi = 3.141592653589793115997963468544185161590576171875e+0;
  {
    static real(kind=8) C.3580 = 1.0e+0;

    zeta3 = dtrilog (&C.3580);
  }
  x = __builtin_fmod (*theta, pi * 2.0e+0);
  if (x > pi)
    {
      x = x - pi * 2.0e+0;
    }
  L.42:;
  if (-pi >= x)
    {
      x = pi * 2.0e+0 + x;
    }
  L.43:;
  if (x == 0.0)
    {
      __result_cl3 = zeta3;
    }
  else
    {
      h = 7.5e-1 - __builtin_log (ABS_EXPR <x>) * 5.0e-1;
      {
        real(kind=8) D.3586;
        real(kind=8) D.3585;

        D.3585 = x;
        D.3586 = D.3585 * D.3585;
        xs = D.3586;
      }
      p = xs;
      v = 2.0e+0;
      i = 1;
      if (i <= 20)
        {
          while (1)
            {
              {
                logical(kind=4) D.3592;

                d = (b[(integer(kind=8)) i + -1] / (((real(kind=8)) (((i * 2) * (i * 2 + 1)) * ((i + 1) * 2)) * v))) * p;
                h = h + d;
                if ((d < 1.00000000000000007770539987666107923830718560119501514549e-15 || p < 1.00000000000000000785754519458238030392258619451080624462e-35) || v > 9.9999999999999996863366107917975552e+34) goto __label_000002;
                L.47:;
                p = p * xs;
                __label_000001:;
                v = (real(kind=8)) ((i * 2 + 1) * ((i + 1) * 2)) * v;
                L.45:;
                D.3592 = i == 20;
                i = i + 1;
                if (D.3592) goto L.46;
              }
            }
        }
      L.46:;
      __label_000002:;
      {
        real(kind=8) D.3594;
        real(kind=8) D.3593;

        D.3593 = x;
        D.3594 = D.3593 * D.3593;
        __result_cl3 = zeta3 - D.3594 * h;
      }
    }
  L.44:;
  return __result_cl3;
  return __result_cl3;
}


