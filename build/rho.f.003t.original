deltarhosef (complex(kind=8) & restrict drosef)
{
  static real(kind=8) q[10] [value-expr: coupls.q];
  static real(kind=8) i3[10] [value-expr: coupls.i3];
  static real(kind=8) nc[10] [value-expr: coupls.nc];
  static real(kind=8) v[10] [value-expr: coupls.v];
  static real(kind=8) a[10] [value-expr: coupls.a];
  static real(kind=8) alphat [value-expr: coupls.alphat];
  static real(kind=8) sinhat [value-expr: coupls.sinhat];
  static real(kind=8) coshat [value-expr: coupls.coshat];
  static real(kind=8) rhonc [value-expr: coupls.rhonc];
  static real(kind=8) i3r[10] [value-expr: coupls.i3r];
  static real(kind=8) u1xr[10] [value-expr: coupls.u1xr];
  static real(kind=8) u1xl[10] [value-expr: coupls.u1xl];
  static real(kind=8) fitx [value-expr: fit221.fitx];
  static real(kind=8) fitsph [value-expr: fit221.fitsph];
  static real(kind=8) fitcph [value-expr: fit221.fitcph];
  static real(kind=8) fittph [value-expr: fit221.fittph];
  static real(kind=8) fits2b [value-expr: fit221.fits2b];
  static real(kind=8) kkss [value-expr: fit221.kkss];
  static real(kind=8) kkcc [value-expr: fit221.kkcc];
  static real(kind=8) kkem [value-expr: fit221.kkem];
  static real(kind=8) bestlnx [value-expr: fitbst.bestlnx];
  static real(kind=8) besttph [value-expr: fitbst.besttph];
  static real(kind=8) bests2b [value-expr: fitbst.bests2b];
  static logical(kind=4) flgfitx [value-expr: fitflg.flgfitx];
  static logical(kind=4) flgtph [value-expr: fitflg.flgtph];
  static logical(kind=4) flgs2b [value-expr: fitflg.flgs2b];
  static logical(kind=4) flfout [value-expr: fitflg.flfout];
  static integer(kind=4) modtype [value-expr: fitswtr.modtype];
  static integer(kind=4) plltr [value-expr: fitswtr.plltr];
  static integer(kind=4) prtpll[81] [value-expr: fitswtr.prtpll];
  static logical(kind=4) flagmr [value-expr: flags.flagmr];
  static integer(kind=4) flgblm [value-expr: flags.flgblm];
  static logical(kind=4) ffermi [value-expr: flags.ffermi];
  static logical(kind=4) fa2mt4 [value-expr: flags.fa2mt4];
  static logical(kind=4) fa2mt2 [value-expr: flags.fa2mt2];
  static logical(kind=4) fa2mt0 [value-expr: flags.fa2mt0];
  static logical(kind=4) fla2im [value-expr: flags.fla2im];
  static logical(kind=4) fasmt2 [value-expr: flags.fasmt2];
  static logical(kind=4) fasmt0 [value-expr: flags.fasmt0];
  static logical(kind=4) fas2mt [value-expr: flags.fas2mt];
  static logical(kind=4) flagmf [value-expr: flags.flagmf];
  static logical(kind=4) fpolew [value-expr: flags.fpolew];
  static logical(kind=4) flgech [value-expr: flags.flgech];
  static logical(kind=4) fobliq [value-expr: flags.fobliq];
  static logical(kind=4) f4lqcd [value-expr: flags.f4lqcd];
  static logical(kind=4) falas2 [value-expr: flags.falas2];
  static logical(kind=4) fbayes [value-expr: flags.fbayes];
  static integer(kind=4) flagzp [value-expr: flags.flagzp];
  static logical(kind=4) flagmh [value-expr: flags.flagmh];
  static logical(kind=4) flagmt [value-expr: flags.flagmt];
  static logical(kind=4) flagmc [value-expr: flags.flagmc];
  static logical(kind=4) flgrho [value-expr: flags.flgrho];
  static logical(kind=4) fkappa [value-expr: flags.fkappa];
  static logical(kind=4) flags [value-expr: flags.flags];
  static logical(kind=4) flagt [value-expr: flags.flagt];
  static logical(kind=4) fzprim [value-expr: flags.fzprim];
  static logical(kind=4) fsinth [value-expr: flags.fsinth];
  static logical(kind=4) fwrite [value-expr: flags.fwrite];
  static logical(kind=4) flprob [value-expr: flags.flprob];
  static logical(kind=4) fhiggs [value-expr: flags.fhiggs];
  static logical(kind=4) flagal [value-expr: flags.flagal];
  static logical(kind=4) fsplot [value-expr: flags.fsplot];
  static real(kind=8) alpha [value-expr: inputs.alpha];
  static real(kind=8) gf [value-expr: inputs.gf];
  static real(kind=8) alfas0 [value-expr: inputs.alfas0];
  static real(kind=8) asgrid[2001] [value-expr: inputs.asgrid];
  static real(kind=8) mu0 [value-expr: inputs.mu0];
  static real(kind=8) dahad3 [value-expr: inputs.dahad3];
  static real(kind=8) pol4hf [value-expr: inputs.pol4hf];
  static real(kind=8) an[8004] [value-expr: inputs.an];
  static real(kind=8) bn[8004] [value-expr: inputs.bn];
  static real(kind=8) pi1 [value-expr: inputs.pi1];
  static real(kind=8) pi2 [value-expr: inputs.pi2];
  static real(kind=8) zeta2 [value-expr: inputs.zeta2];
  static real(kind=8) zeta3 [value-expr: inputs.zeta3];
  static real(kind=8) zeta4 [value-expr: inputs.zeta4];
  static real(kind=8) zeta5 [value-expr: inputs.zeta5];
  static real(kind=8) zeta6 [value-expr: inputs.zeta6];
  static real(kind=8) zeta7 [value-expr: inputs.zeta7];
  static real(kind=8) prob [value-expr: limits.prob];
  static real(kind=8) mtp [value-expr: limits.mtp];
  static real(kind=8) sigma [value-expr: limits.sigma];
  static integer(kind=4) zprime [value-expr: limits.zprime];
  static real(kind=8) mw2 [value-expr: mass2.mw2];
  static real(kind=8) mz2 [value-expr: mass2.mz2];
  static real(kind=8) mt2 [value-expr: mass2.mt2];
  static real(kind=8) mh2 [value-expr: mass2.mh2];
  static real(kind=8) mz [value-expr: masses.mz];
  static real(kind=8) mh [value-expr: masses.mh];
  static real(kind=8) mt [value-expr: masses.mt];
  static real(kind=8) mb [value-expr: masses.mb];
  static real(kind=8) mc [value-expr: masses.mc];
  static real(kind=8) ms [value-expr: masses.ms];
  static real(kind=8) md [value-expr: masses.md];
  static real(kind=8) mu [value-expr: masses.mu];
  static real(kind=8) mtau [value-expr: masses.mtau];
  static real(kind=8) mmu [value-expr: masses.mmu];
  static real(kind=8) me [value-expr: masses.me];
  static real(kind=8) mw [value-expr: masses.mw];
  static real(kind=8) swpar [value-expr: obliqe.swpar];
  static real(kind=8) spar [value-expr: obliqe.spar];
  static real(kind=8) tpar [value-expr: obliqe.tpar];
  static real(kind=8) upar [value-expr: obliqe.upar];
  static real(kind=8) brho [value-expr: obliqe.brho];
  static real(kind=8) bkappa [value-expr: obliqe.bkappa];
  static real(kind=8) rpar [value-expr: obliqe.rpar];
  static real(kind=8) zpar [value-expr: obliqe.zpar];
  static real(kind=8) delrwh [value-expr: obliqe.delrwh];
  static real(kind=8) delrzh [value-expr: obliqe.delrzh];
  static real(kind=8) delr [value-expr: obliqe.delr];
  static real(kind=8) rhohat [value-expr: obliqe.rhohat];
  static real(kind=8) rho2 [value-expr: obliqe.rho2];
  static real(kind=8) ratzw2 [value-expr: ratios.ratzw2];
  static real(kind=8) rathw2 [value-expr: ratios.rathw2];
  static real(kind=8) rathz2 [value-expr: ratios.rathz2];
  static real(kind=8) rattw2 [value-expr: ratios.rattw2];
  static real(kind=8) rattz2 [value-expr: ratios.rattz2];
  static real(kind=8) ratth2 [value-expr: ratios.ratth2];
  static real(kind=8) mzp [value-expr: zprime.mzp];
  static real(kind=8) mzp2 [value-expr: zprime.mzp2];
  static real(kind=8) mz02 [value-expr: zprime.mz02];
  static real(kind=8) sinth [value-expr: zprime.sinth];
  static real(kind=8) sinth2 [value-expr: zprime.sinth2];
  static real(kind=8) costh [value-expr: zprime.costh];
  static real(kind=8) costh2 [value-expr: zprime.costh2];
  static real(kind=8) ratg21 [value-expr: zprime.ratg21];
  static real(kind=8) rhoeff [value-expr: zprime.rhoeff];
  static real(kind=8) rhoezp [value-expr: zprime.rhoezp];
  static real(kind=8) rhozzp [value-expr: zprime.rhozzp];
  static real(kind=8) v2[10] [value-expr: zprime.v2];
  static real(kind=8) a2[10] [value-expr: zprime.a2];
  static real(kind=8) eps2_l[10] [value-expr: zprime.eps2_l];
  static real(kind=8) eps2_r[10] [value-expr: zprime.eps2_r];
  static real(kind=8) ratgrl [value-expr: zprime.ratgrl];
  real(kind=8) al;
  real(kind=8) at;
  real(kind=8) az;
  real(kind=8) c[12];
  complex(kind=8) const1;
  complex(kind=8) const2;
  complex(kind=8) const3;
  complex(kind=8) const4;
  complex(kind=8) const5;
  real(kind=8) dfks;
  real(kind=8) dfksh;
  integer(kind=4) f;
  real(kind=8) mbz2;
  real(kind=8) mcz2;
  real(kind=8) mtauz2;
  real(kind=8) t1;
  real(kind=8) t2;
  real(kind=8) t3;
  real(kind=8) xa2mt0;

  c[0] = 4.0000000000000002220446049250313080847263336181640625e-1;
  c[4] = 6.42857142857142793701541449991054832935333251953125e-2;
  c[8] = 1.26984126984126984016842953906234470196068286895751953125e-2;
  c[1] = 2.00000000000000011102230246251565404236316680908203125e-1;
  c[5] = 2.1428571428571428769682682968777953647077083587646484375e-2;
  c[9] = 3.17460317460317460042107384765586175490170717239379882812e-3;
  c[2] = 9.5802469135802470479035264361300505697727203369140625e-1;
  c[6] = 1.56031746031746021419195358248543925583362579345703125e-1;
  c[10] = 2.43466868228773003490772453005774877965450286865234375e-2;
  c[3] = 3.17283950617283927453371461524511687457561492919921875e-1;
  c[7] = 1.99206349206349220271050626251962967216968536376953125e-2;
  c[11] = -5.98135550516502899690007843958028388442471623420715332031e-4;
  al = alphat / pi1;
  az = alphas (&mz) / pi1;
  at = alphas (&mt) / pi1;
  const1 = __complex__ (-2.2222222222222220988641083749826066195964813232421875e-1, 0.0);
  const2 = COMPLEX_EXPR <-(((3.583333333333333481363069950020872056484222412109375e+0 - zeta3 * 4.0e+0)) / 3.0e+0), 0.0>;
  const3 = -(((COMPLEX_EXPR <pi1, 0.0> * __complex__ (0.0, 1.0e+0) + __complex__ (1.0e+0, 0.0))) * __complex__ (2.0e+0, 0.0));
  const4 = ((COMPLEX_EXPR <pi1, 0.0> * __complex__ (0.0, 1.0e+0) + __complex__ (1.0e+0, 0.0))) * __complex__ (4.0e+0, 0.0);
  const5 = -(((COMPLEX_EXPR <pi1, 0.0> * __complex__ (0.0, 1.0e+0) + __complex__ (1.0e+0, 0.0))) * __complex__ (7.33333333333333303727386009995825588703155517578125e+0, 0.0)) - COMPLEX_EXPR <pi1, 0.0> * __complex__ (0.0, 4.0e+0);
  {
    real(kind=8) D.3699;
    real(kind=8) D.3698;

    D.3698 = ((mtau / mz));
    D.3699 = D.3698 * D.3698;
    mtauz2 = D.3699;
  }
  {
    real(kind=8) D.3702;
    real(kind=8) D.3701;

    D.3701 = ((mcrun (&mz) / mz));
    D.3702 = D.3701 * D.3701;
    mcz2 = D.3702;
  }
  {
    real(kind=8) D.3705;
    real(kind=8) D.3704;

    D.3704 = ((mbrun (&mz) / mz));
    D.3705 = D.3704 * D.3704;
    mbz2 = D.3705;
  }
  xa2mt0 = 1.0e+0;
  if (!fa2mt0)
    {
      xa2mt0 = 0.0;
    }
  L.1:;
  if (!fasmt0)
    {
      az = 0.0;
      at = 0.0;
    }
  L.2:;
  *drosef = __complex__ (0.0, 0.0);
  f = 0;
  if (f <= 9)
    {
      while (1)
        {
          {
            logical(kind=4) D.3749;

            if ((real(kind=4)) f != 6.0e+0)
              {
                {
                  real(kind=8) D.3716;
                  real(kind=8) D.3715;
                  real(kind=8) D.3714;
                  real(kind=8) D.3713;
                  real(kind=8) D.3712;
                  real(kind=8) D.3711;

                  D.3711 = v[(integer(kind=8)) f];
                  D.3712 = D.3711 * D.3711;
                  D.3713 = a[(integer(kind=8)) f];
                  D.3714 = D.3713 * D.3713;
                  D.3715 = q[(integer(kind=8)) f];
                  D.3716 = D.3715 * D.3715;
                  *drosef = *drosef + COMPLEX_EXPR <(nc[(integer(kind=8)) f] * al) * ((D.3712 + D.3714)), 0.0> * (((COMPLEX_EXPR <(al * 7.5e-1) * D.3716, 0.0> * const2) * COMPLEX_EXPR <xa2mt0, 0.0> + const1));
                }
                if (f > 3)
                  {
                    {
                      real(kind=8) D.3721;
                      real(kind=8) D.3720;
                      real(kind=8) D.3719;
                      real(kind=8) D.3718;

                      D.3718 = v[(integer(kind=8)) f];
                      D.3719 = D.3718 * D.3718;
                      D.3720 = a[(integer(kind=8)) f];
                      D.3721 = D.3720 * D.3720;
                      *drosef = *drosef + COMPLEX_EXPR <((al * 3.0e+0) * ((D.3719 + D.3721))) * az, 0.0> * const2;
                    }
                  }
                L.6:;
                if (NON_LVALUE_EXPR <flagmf>)
                  {
                    if (f == 3)
                      {
                        {
                          real(kind=8) D.3725;
                          real(kind=8) D.3724;

                          D.3724 = a[(integer(kind=8)) f];
                          D.3725 = D.3724 * D.3724;
                          *drosef = *drosef + COMPLEX_EXPR <(al * D.3725) * mtauz2, 0.0> * const3;
                        }
                      }
                    L.8:;
                    if (f == 5)
                      {
                        {
                          real(kind=8) D.3730;
                          real(kind=8) D.3729;
                          real(kind=8) D.3728;
                          real(kind=8) D.3727;

                          D.3727 = v[(integer(kind=8)) f];
                          D.3728 = D.3727 * D.3727;
                          D.3729 = a[(integer(kind=8)) f];
                          D.3730 = D.3729 * D.3729;
                          *drosef = *drosef + COMPLEX_EXPR <(al * mcz2) * 3.0e+0, 0.0> * ((COMPLEX_EXPR <D.3728 * az, 0.0> * const4 + COMPLEX_EXPR <D.3730, 0.0> * ((COMPLEX_EXPR <az, 0.0> * const5 + const3))));
                        }
                      }
                    L.9:;
                    if (f == 9)
                      {
                        {
                          real(kind=8) D.3735;
                          real(kind=8) D.3734;
                          real(kind=8) D.3733;
                          real(kind=8) D.3732;

                          D.3732 = v[(integer(kind=8)) f];
                          D.3733 = D.3732 * D.3732;
                          D.3734 = a[(integer(kind=8)) f];
                          D.3735 = D.3734 * D.3734;
                          *drosef = *drosef + COMPLEX_EXPR <(al * mbz2) * 3.0e+0, 0.0> * ((COMPLEX_EXPR <D.3733 * az, 0.0> * const4 + COMPLEX_EXPR <D.3735, 0.0> * ((COMPLEX_EXPR <az, 0.0> * const5 + const3))));
                        }
                      }
                    L.10:;
                  }
                L.7:;
              }
            else
              {
                t1 = 1.0e+0 / rattz2;
                {
                  real(kind=8) D.3737;
                  real(kind=8) D.3736;

                  D.3736 = rattz2;
                  D.3737 = D.3736 * D.3736;
                  t2 = 1.0e+0 / D.3737;
                }
                {
                  real(kind=8) D.3738;

                  D.3738 = rattz2;
                  t3 = 1.0e+0 / __builtin_powi (D.3738, 3);
                }
                {
                  real(kind=8) D.3742;
                  real(kind=8) D.3741;
                  real(kind=8) D.3740;
                  real(kind=8) D.3739;

                  D.3739 = v[(integer(kind=8)) f];
                  D.3740 = D.3739 * D.3739;
                  D.3741 = a[(integer(kind=8)) f];
                  D.3742 = D.3741 * D.3741;
                  *drosef = (*drosef - COMPLEX_EXPR <(al * D.3740) * (((((c[0] * t1 + c[4] * t2) + c[8] * t3)) + (((c[2] * t1 + c[6] * t2) + c[10] * t3)) * at)), 0.0>) - COMPLEX_EXPR <(al * D.3742) * (((((((c[1] * t1 + c[5] * t2) + c[9] * t3) - 1.0e+0)) + (((c[3] * t1 + c[7] * t2) + c[11] * t3)) * at) - ((((al * xa2mt0) / 3.0e+0 + at)) * 1.7e+1) / 9.0e+0)), 0.0>;
                }
                dfks = (((1.0e+0 / sinhat) / 6.0e+0 - 4.444444444444444197728216749965213239192962646484375e-1)) * (((__builtin_log (rattz2) * (((at + 1.0e+0) + (xa2mt0 * al) / 3.0e+0)) - (at * 1.3e+1) / 1.2e+1) - ((xa2mt0 * 5.0e+0) * 2.5e-1) * al));
                dfksh = dfks / ((1.0e+0 - (sinhat * 8.0e+0) / 3.0e+0));
                {
                  real(kind=8) D.3746;
                  real(kind=8) D.3745;
                  real(kind=8) D.3744;
                  real(kind=8) D.3743;

                  D.3743 = v[(integer(kind=8)) f];
                  D.3744 = D.3743 * D.3743;
                  D.3745 = a[(integer(kind=8)) f];
                  D.3746 = D.3745 * D.3745;
                  *drosef = *drosef + COMPLEX_EXPR <(((((D.3744 + D.3746)) * al) * 6.0e+0) * sinhat) * dfksh, 0.0>;
                }
                if (NON_LVALUE_EXPR <flagmr>)
                  {
                    *drosef = *drosef + COMPLEX_EXPR <(((sinhat / coshat) * dfks - dfksh)) * al, 0.0>;
                  }
                L.11:;
              }
            L.5:;
            __label_000100:;
            L.3:;
            D.3749 = f == 9;
            f = f + 1;
            if (D.3749) goto L.4;
          }
        }
    }
  L.4:;
  if (NON_LVALUE_EXPR <fobliq>)
    {
      *drosef = *drosef + COMPLEX_EXPR <(((alphat * 2.5e-1) / sinhat) / coshat) * spar, 0.0>;
    }
  L.12:;
  return;
}


hds (real(kind=8) & restrict x)
{
  real(kind=8) xx;
  real(kind=8) __result_hds;

  {
    real(kind=8) D.3756;
    real(kind=8) D.3755;

    D.3755 = *x;
    D.3756 = D.3755 * D.3755;
    xx = D.3756;
  }
  {
    real(kind=8) D.3757;

    D.3757 = *x;
    __result_hds = (((1.72222222222222232090871330001391470432281494140625e+0 - *x) + xx / 3.0e+0) + ((((1.0e+0 - *x * 1.5e+0) + xx * 7.5e-1) - __builtin_powi (D.3757, 3) / 6.0e+0)) * __builtin_log (*x)) + ((((2.0e+0 / ((4.0e+0 - *x)) - 2.0e+0) + *x * 8.3333333333333337034076748750521801412105560302734375e-1) - xx / 3.0e+0)) * omegds ((real(kind=8) *) x);
  }
  return __result_hds;
  return __result_hds;
}


omegds (real(kind=8) & restrict x)
{
  real(kind=8) root;
  real(kind=8) __result_omegds;

  if (*x >= 4.0e+0)
    {
      root = __builtin_sqrt (1.0e+0 - 4.0e+0 / *x);
      __result_omegds = ((*x * 5.0e-1) * root) * __builtin_log (((1.0e+0 - root)) / ((root + 1.0e+0)));
    }
  else
    {
      root = __builtin_sqrt (4.0e+0 / *x - 1.0e+0);
      __result_omegds = (*x * root) * __builtin_atan (root);
    }
  L.13:;
  return __result_omegds;
  return __result_omegds;
}


rhof (complex(kind=8)[0:D.4101] * restrict rho, integer(kind=4) & restrict fmin, integer(kind=4) & restrict fmax)
{
  static real(kind=8) q[10] [value-expr: coupls.q];
  static real(kind=8) i3[10] [value-expr: coupls.i3];
  static real(kind=8) nc[10] [value-expr: coupls.nc];
  static real(kind=8) v[10] [value-expr: coupls.v];
  static real(kind=8) a[10] [value-expr: coupls.a];
  static real(kind=8) alphat [value-expr: coupls.alphat];
  static real(kind=8) sinhat [value-expr: coupls.sinhat];
  static real(kind=8) coshat [value-expr: coupls.coshat];
  static real(kind=8) rhonc [value-expr: coupls.rhonc];
  static real(kind=8) i3r[10] [value-expr: coupls.i3r];
  static real(kind=8) u1xr[10] [value-expr: coupls.u1xr];
  static real(kind=8) u1xl[10] [value-expr: coupls.u1xl];
  static real(kind=8) fitx [value-expr: fit221.fitx];
  static real(kind=8) fitsph [value-expr: fit221.fitsph];
  static real(kind=8) fitcph [value-expr: fit221.fitcph];
  static real(kind=8) fittph [value-expr: fit221.fittph];
  static real(kind=8) fits2b [value-expr: fit221.fits2b];
  static real(kind=8) kkss [value-expr: fit221.kkss];
  static real(kind=8) kkcc [value-expr: fit221.kkcc];
  static real(kind=8) kkem [value-expr: fit221.kkem];
  static real(kind=8) bestlnx [value-expr: fitbst.bestlnx];
  static real(kind=8) besttph [value-expr: fitbst.besttph];
  static real(kind=8) bests2b [value-expr: fitbst.bests2b];
  static logical(kind=4) flgfitx [value-expr: fitflg.flgfitx];
  static logical(kind=4) flgtph [value-expr: fitflg.flgtph];
  static logical(kind=4) flgs2b [value-expr: fitflg.flgs2b];
  static logical(kind=4) flfout [value-expr: fitflg.flfout];
  static integer(kind=4) modtype [value-expr: fitswtr.modtype];
  static integer(kind=4) plltr [value-expr: fitswtr.plltr];
  static integer(kind=4) prtpll[81] [value-expr: fitswtr.prtpll];
  static logical(kind=4) flagmr [value-expr: flags.flagmr];
  static integer(kind=4) flgblm [value-expr: flags.flgblm];
  static logical(kind=4) ffermi [value-expr: flags.ffermi];
  static logical(kind=4) fa2mt4 [value-expr: flags.fa2mt4];
  static logical(kind=4) fa2mt2 [value-expr: flags.fa2mt2];
  static logical(kind=4) fa2mt0 [value-expr: flags.fa2mt0];
  static logical(kind=4) fla2im [value-expr: flags.fla2im];
  static logical(kind=4) fasmt2 [value-expr: flags.fasmt2];
  static logical(kind=4) fasmt0 [value-expr: flags.fasmt0];
  static logical(kind=4) fas2mt [value-expr: flags.fas2mt];
  static logical(kind=4) flagmf [value-expr: flags.flagmf];
  static logical(kind=4) fpolew [value-expr: flags.fpolew];
  static logical(kind=4) flgech [value-expr: flags.flgech];
  static logical(kind=4) fobliq [value-expr: flags.fobliq];
  static logical(kind=4) f4lqcd [value-expr: flags.f4lqcd];
  static logical(kind=4) falas2 [value-expr: flags.falas2];
  static logical(kind=4) fbayes [value-expr: flags.fbayes];
  static integer(kind=4) flagzp [value-expr: flags.flagzp];
  static logical(kind=4) flagmh [value-expr: flags.flagmh];
  static logical(kind=4) flagmt [value-expr: flags.flagmt];
  static logical(kind=4) flagmc [value-expr: flags.flagmc];
  static logical(kind=4) flgrho [value-expr: flags.flgrho];
  static logical(kind=4) fkappa [value-expr: flags.fkappa];
  static logical(kind=4) flags [value-expr: flags.flags];
  static logical(kind=4) flagt [value-expr: flags.flagt];
  static logical(kind=4) fzprim [value-expr: flags.fzprim];
  static logical(kind=4) fsinth [value-expr: flags.fsinth];
  static logical(kind=4) fwrite [value-expr: flags.fwrite];
  static logical(kind=4) flprob [value-expr: flags.flprob];
  static logical(kind=4) fhiggs [value-expr: flags.fhiggs];
  static logical(kind=4) flagal [value-expr: flags.flagal];
  static logical(kind=4) fsplot [value-expr: flags.fsplot];
  static real(kind=8) alpha [value-expr: inputs.alpha];
  static real(kind=8) gf [value-expr: inputs.gf];
  static real(kind=8) alfas0 [value-expr: inputs.alfas0];
  static real(kind=8) asgrid[2001] [value-expr: inputs.asgrid];
  static real(kind=8) mu0 [value-expr: inputs.mu0];
  static real(kind=8) dahad3 [value-expr: inputs.dahad3];
  static real(kind=8) pol4hf [value-expr: inputs.pol4hf];
  static real(kind=8) an[8004] [value-expr: inputs.an];
  static real(kind=8) bn[8004] [value-expr: inputs.bn];
  static real(kind=8) pi1 [value-expr: inputs.pi1];
  static real(kind=8) pi2 [value-expr: inputs.pi2];
  static real(kind=8) zeta2 [value-expr: inputs.zeta2];
  static real(kind=8) zeta3 [value-expr: inputs.zeta3];
  static real(kind=8) zeta4 [value-expr: inputs.zeta4];
  static real(kind=8) zeta5 [value-expr: inputs.zeta5];
  static real(kind=8) zeta6 [value-expr: inputs.zeta6];
  static real(kind=8) zeta7 [value-expr: inputs.zeta7];
  static real(kind=8) prob [value-expr: limits.prob];
  static real(kind=8) mtp [value-expr: limits.mtp];
  static real(kind=8) sigma [value-expr: limits.sigma];
  static integer(kind=4) zprime [value-expr: limits.zprime];
  static real(kind=8) mw2 [value-expr: mass2.mw2];
  static real(kind=8) mz2 [value-expr: mass2.mz2];
  static real(kind=8) mt2 [value-expr: mass2.mt2];
  static real(kind=8) mh2 [value-expr: mass2.mh2];
  static real(kind=8) mz [value-expr: masses.mz];
  static real(kind=8) mh [value-expr: masses.mh];
  static real(kind=8) mt [value-expr: masses.mt];
  static real(kind=8) mb [value-expr: masses.mb];
  static real(kind=8) mc [value-expr: masses.mc];
  static real(kind=8) ms [value-expr: masses.ms];
  static real(kind=8) md [value-expr: masses.md];
  static real(kind=8) mu [value-expr: masses.mu];
  static real(kind=8) mtau [value-expr: masses.mtau];
  static real(kind=8) mmu [value-expr: masses.mmu];
  static real(kind=8) me [value-expr: masses.me];
  static real(kind=8) mw [value-expr: masses.mw];
  static real(kind=8) swpar [value-expr: obliqe.swpar];
  static real(kind=8) spar [value-expr: obliqe.spar];
  static real(kind=8) tpar [value-expr: obliqe.tpar];
  static real(kind=8) upar [value-expr: obliqe.upar];
  static real(kind=8) brho [value-expr: obliqe.brho];
  static real(kind=8) bkappa [value-expr: obliqe.bkappa];
  static real(kind=8) rpar [value-expr: obliqe.rpar];
  static real(kind=8) zpar [value-expr: obliqe.zpar];
  static real(kind=8) delrwh [value-expr: obliqe.delrwh];
  static real(kind=8) delrzh [value-expr: obliqe.delrzh];
  static real(kind=8) delr [value-expr: obliqe.delr];
  static real(kind=8) rhohat [value-expr: obliqe.rhohat];
  static real(kind=8) rho2 [value-expr: obliqe.rho2];
  static real(kind=8) ratzw2 [value-expr: ratios.ratzw2];
  static real(kind=8) rathw2 [value-expr: ratios.rathw2];
  static real(kind=8) rathz2 [value-expr: ratios.rathz2];
  static real(kind=8) rattw2 [value-expr: ratios.rattw2];
  static real(kind=8) rattz2 [value-expr: ratios.rattz2];
  static real(kind=8) ratth2 [value-expr: ratios.ratth2];
  static real(kind=8) mzp [value-expr: zprime.mzp];
  static real(kind=8) mzp2 [value-expr: zprime.mzp2];
  static real(kind=8) mz02 [value-expr: zprime.mz02];
  static real(kind=8) sinth [value-expr: zprime.sinth];
  static real(kind=8) sinth2 [value-expr: zprime.sinth2];
  static real(kind=8) costh [value-expr: zprime.costh];
  static real(kind=8) costh2 [value-expr: zprime.costh2];
  static real(kind=8) ratg21 [value-expr: zprime.ratg21];
  static real(kind=8) rhoeff [value-expr: zprime.rhoeff];
  static real(kind=8) rhoezp [value-expr: zprime.rhoezp];
  static real(kind=8) rhozzp [value-expr: zprime.rhozzp];
  static real(kind=8) v2[10] [value-expr: zprime.v2];
  static real(kind=8) a2[10] [value-expr: zprime.a2];
  static real(kind=8) eps2_l[10] [value-expr: zprime.eps2_l];
  static real(kind=8) eps2_r[10] [value-expr: zprime.eps2_r];
  static real(kind=8) ratgrl [value-expr: zprime.ratgrl];
  real(kind=8) az;
  complex(kind=8) dkbtop;
  complex(kind=8) drhofv;
  real(kind=8) droseb;
  complex(kind=8) drosef;
  integer(kind=4) f;
  complex(kind=8) f1;
  complex(kind=8) fy;
  real(kind=8) gy;
  integer(kind=8) lbound.0;
  integer(kind=8) ubound.1;
  integer(kind=8) offset.2;
  integer(kind=8) size.3;
  real(kind=8) taub;
  integer(kind=8) D.4101;
  bitsizetype D.4102;
  sizetype D.4103;

  lbound.0 = (integer(kind=8)) *fmin;
  ubound.1 = (integer(kind=8)) *fmax;
  size.3 = (1 - lbound.0) + ubound.1;
  size.3 = MAX_EXPR <size.3, 0>;
  D.4101 = size.3 + -1;
  D.4102 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.3> * 128;
  D.4103 = (sizetype) NON_LVALUE_EXPR <size.3> * 16;
  offset.2 = -NON_LVALUE_EXPR <lbound.0>;
  {
    real(kind=8) __var_1;

    __var_1 = __builtin_log (ratzw2);
    {
      real(kind=8) D.4073;
      real(kind=8) D.4072;

      D.4072 = sinhat;
      D.4073 = D.4072 * D.4072;
      droseb = (((alphat * 2.5e-1) / pi1) / sinhat) * (((((((((coshat * 4.0e+0) * __var_1 + (((4.0e+0 - 1.0e+0 / coshat) + (1.2e+1 / coshat) / ratzw2)) * 1.38888888888888895056794581250869669020175933837890625e-1) + coshat * 3.0e+0) - 2.666666666666666518636930049979127943515777587890625e+0 / ratzw2) - (coshat * 4.0e+0) / ratzw2) - (((8.333333333333332870740406406184774823486804962158203125e-2 / coshat - 3.33333333333333314829616256247390992939472198486328125e-1) - coshat * 3.0e+0)) * __var_1) + lambda (&ratzw2) * ((((((1.666666666666666574148081281236954964697360992431640625e-1 / coshat + (3.33333333333333314829616256247390992939472198486328125e-1 / coshat) / ratzw2) - 6.6666666666666662965923251249478198587894439697265625e-1) - 1.3333333333333332593184650249895639717578887939453125e+0 / ratzw2) - (coshat * 6.0e+0) * ((1.0e+0 - 1.0e+0 / ratzw2))) + ((coshat * 1.8e+1 - ((D.4073 * 8.0e+0) / coshat) / ratzw2)) / ((4.0e+0 - ratzw2))))) + (hds (&rathz2) * 5.0e-1) / coshat));
    }
    L.14:;
    deltarhosef (&drosef);
    az = alphas (&mz) / pi1;
    if (!fasmt0)
      {
        az = 0.0;
      }
    L.15:;
    {
      static real(kind=8) C.4076 = 1.0e+0;

      f1 = fds (&C.4076);
    }
    fy = fds (&ratzw2);
    gy = gds (&ratzw2);
    f = 0;
    if (f <= 3)
      {
        while (1)
          {
            {
              logical(kind=4) D.4086;

              {
                real(kind=8) __var_2;

                __var_2 = ABS_EXPR <q[(integer(kind=8)) f]>;
                {
                  real(kind=8) D.4084;
                  real(kind=8) D.4083;

                  D.4083 = ((q[(integer(kind=8)) f] * sinhat));
                  D.4084 = D.4083 * D.4083;
                  drhofv = COMPLEX_EXPR <((alphat * 2.5e-1) / pi1) / sinhat, 0.0> * (((COMPLEX_EXPR <(coshat * 8.0e+0) * gy, 0.0> + COMPLEX_EXPR <((1.0e+0 - (sinhat * 2.0e+0) * ((1.0e+0 - __var_2)))), 0.0> * fy) - COMPLEX_EXPR <((((1.0e+0 - (sinhat * 6.0e+0) * __var_2) + D.4084 * 1.2e+1)) * 5.0e-1) / coshat, 0.0> * f1));
                }
                L.18:;
                (*rho)[(integer(kind=8)) f + offset.2] = ((COMPLEX_EXPR <droseb + 1.0e+0, 0.0> + drhofv)) / ((__complex__ (1.0e+0, 0.0) - drosef));
                __label_000100:;
              }
              L.16:;
              D.4086 = f == 3;
              f = f + 1;
              if (D.4086) goto L.17;
            }
          }
      }
    L.17:;
    f1 = COMPLEX_EXPR <((1.0e+0 - az)), 0.0> * f1 + COMPLEX_EXPR <az * 4.9333333333333329040470971449394710361957550048828125e-1, 0.0>;
    fy = COMPLEX_EXPR <((1.0e+0 - az)), 0.0> * fy + COMPLEX_EXPR <az * 4.9333333333333329040470971449394710361957550048828125e-1, 0.0>;
    gy = ((1.0e+0 - az)) * gy - az * 8.6999999999999999555910790149937383830547332763671875e-1;
    bvertex (&dkbtop, &taub);
    f = 4;
    if (f <= 9)
      {
        while (1)
          {
            {
              logical(kind=4) D.4100;

              {
                real(kind=8) __var_3;

                __var_3 = ABS_EXPR <q[(integer(kind=8)) f]>;
                {
                  real(kind=8) D.4093;
                  real(kind=8) D.4092;

                  D.4092 = ((q[(integer(kind=8)) f] * sinhat));
                  D.4093 = D.4092 * D.4092;
                  drhofv = COMPLEX_EXPR <((alphat * 2.5e-1) / pi1) / sinhat, 0.0> * (((COMPLEX_EXPR <(coshat * 8.0e+0) * gy, 0.0> + COMPLEX_EXPR <((1.0e+0 - (sinhat * 2.0e+0) * ((1.0e+0 - __var_3)))), 0.0> * fy) - COMPLEX_EXPR <((((1.0e+0 - (sinhat * 6.0e+0) * __var_3) + D.4093 * 1.2e+1)) * 5.0e-1) / coshat, 0.0> * f1));
                }
                L.21:;
                if (f != 9)
                  {
                    (*rho)[(integer(kind=8)) f + offset.2] = ((COMPLEX_EXPR <droseb + 1.0e+0, 0.0> + drhofv)) / ((__complex__ (1.0e+0, 0.0) - drosef));
                  }
                else
                  {
                    (*rho)[offset.2 + 9] = (((COMPLEX_EXPR <droseb + 1.0e+0, 0.0> + drhofv) - dkbtop * __complex__ (2.0e+0, 0.0))) / ((__complex__ (1.0e+0, 0.0) - drosef));
                    if (NON_LVALUE_EXPR <fa2mt4>)
                      {
                        {
                          real(kind=8) D.4097;
                          real(kind=8) D.4096;

                          D.4096 = ((taub + 1.0e+0));
                          D.4097 = D.4096 * D.4096;
                          (*rho)[offset.2 + 9] = (*rho)[offset.2 + 9] * COMPLEX_EXPR <D.4097, 0.0>;
                        }
                      }
                    L.23:;
                    if (NON_LVALUE_EXPR <fobliq>)
                      {
                        (*rho)[offset.2 + 9] = (*rho)[offset.2 + 9] + COMPLEX_EXPR <brho, 0.0>;
                      }
                    L.24:;
                  }
                L.22:;
                __label_000200:;
              }
              L.19:;
              D.4100 = f == 9;
              f = f + 1;
              if (D.4100) goto L.20;
            }
          }
      }
    L.20:;
    return;
  }
}


