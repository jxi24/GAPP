deltakappase (complex(kind=8) & restrict dkapse, logical(kind=4) & restrict feonly)
{
  static real(kind=8) q[10] [value-expr: coupls.q];
  static real(kind=8) i3[10] [value-expr: coupls.i3];
  static real(kind=8) nc[10] [value-expr: coupls.nc];
  static real(kind=8) v[10] [value-expr: coupls.v];
  static real(kind=8) a[10] [value-expr: coupls.a];
  static real(kind=8) alphat [value-expr: coupls.alphat];
  static real(kind=8) sinhat [value-expr: coupls.sinhat];
  static real(kind=8) coshat [value-expr: coupls.coshat];
  static real(kind=8) rhonc [value-expr: coupls.rhonc];
  static real(kind=8) i3r[10] [value-expr: coupls.i3r];
  static real(kind=8) u1xr[10] [value-expr: coupls.u1xr];
  static real(kind=8) u1xl[10] [value-expr: coupls.u1xl];
  static real(kind=8) fitx [value-expr: fit221.fitx];
  static real(kind=8) fitsph [value-expr: fit221.fitsph];
  static real(kind=8) fitcph [value-expr: fit221.fitcph];
  static real(kind=8) fittph [value-expr: fit221.fittph];
  static real(kind=8) fits2b [value-expr: fit221.fits2b];
  static real(kind=8) kkss [value-expr: fit221.kkss];
  static real(kind=8) kkcc [value-expr: fit221.kkcc];
  static real(kind=8) kkem [value-expr: fit221.kkem];
  static real(kind=8) bestlnx [value-expr: fitbst.bestlnx];
  static real(kind=8) besttph [value-expr: fitbst.besttph];
  static real(kind=8) bests2b [value-expr: fitbst.bests2b];
  static logical(kind=4) flgfitx [value-expr: fitflg.flgfitx];
  static logical(kind=4) flgtph [value-expr: fitflg.flgtph];
  static logical(kind=4) flgs2b [value-expr: fitflg.flgs2b];
  static logical(kind=4) flfout [value-expr: fitflg.flfout];
  static integer(kind=4) modtype [value-expr: fitswtr.modtype];
  static integer(kind=4) plltr [value-expr: fitswtr.plltr];
  static integer(kind=4) prtpll[81] [value-expr: fitswtr.prtpll];
  static logical(kind=4) flagmr [value-expr: flags.flagmr];
  static integer(kind=4) flgblm [value-expr: flags.flgblm];
  static logical(kind=4) ffermi [value-expr: flags.ffermi];
  static logical(kind=4) fa2mt4 [value-expr: flags.fa2mt4];
  static logical(kind=4) fa2mt2 [value-expr: flags.fa2mt2];
  static logical(kind=4) fa2mt0 [value-expr: flags.fa2mt0];
  static logical(kind=4) fla2im [value-expr: flags.fla2im];
  static logical(kind=4) fasmt2 [value-expr: flags.fasmt2];
  static logical(kind=4) fasmt0 [value-expr: flags.fasmt0];
  static logical(kind=4) fas2mt [value-expr: flags.fas2mt];
  static logical(kind=4) flagmf [value-expr: flags.flagmf];
  static logical(kind=4) fpolew [value-expr: flags.fpolew];
  static logical(kind=4) flgech [value-expr: flags.flgech];
  static logical(kind=4) fobliq [value-expr: flags.fobliq];
  static logical(kind=4) f4lqcd [value-expr: flags.f4lqcd];
  static logical(kind=4) falas2 [value-expr: flags.falas2];
  static logical(kind=4) fbayes [value-expr: flags.fbayes];
  static integer(kind=4) flagzp [value-expr: flags.flagzp];
  static logical(kind=4) flagmh [value-expr: flags.flagmh];
  static logical(kind=4) flagmt [value-expr: flags.flagmt];
  static logical(kind=4) flagmc [value-expr: flags.flagmc];
  static logical(kind=4) flgrho [value-expr: flags.flgrho];
  static logical(kind=4) fkappa [value-expr: flags.fkappa];
  static logical(kind=4) flags [value-expr: flags.flags];
  static logical(kind=4) flagt [value-expr: flags.flagt];
  static logical(kind=4) fzprim [value-expr: flags.fzprim];
  static logical(kind=4) fsinth [value-expr: flags.fsinth];
  static logical(kind=4) fwrite [value-expr: flags.fwrite];
  static logical(kind=4) flprob [value-expr: flags.flprob];
  static logical(kind=4) fhiggs [value-expr: flags.fhiggs];
  static logical(kind=4) flagal [value-expr: flags.flagal];
  static logical(kind=4) fsplot [value-expr: flags.fsplot];
  static real(kind=8) alpha [value-expr: inputs.alpha];
  static real(kind=8) gf [value-expr: inputs.gf];
  static real(kind=8) alfas0 [value-expr: inputs.alfas0];
  static real(kind=8) asgrid[2001] [value-expr: inputs.asgrid];
  static real(kind=8) mu0 [value-expr: inputs.mu0];
  static real(kind=8) dahad3 [value-expr: inputs.dahad3];
  static real(kind=8) pol4hf [value-expr: inputs.pol4hf];
  static real(kind=8) an[8004] [value-expr: inputs.an];
  static real(kind=8) bn[8004] [value-expr: inputs.bn];
  static real(kind=8) pi1 [value-expr: inputs.pi1];
  static real(kind=8) pi2 [value-expr: inputs.pi2];
  static real(kind=8) zeta2 [value-expr: inputs.zeta2];
  static real(kind=8) zeta3 [value-expr: inputs.zeta3];
  static real(kind=8) zeta4 [value-expr: inputs.zeta4];
  static real(kind=8) zeta5 [value-expr: inputs.zeta5];
  static real(kind=8) zeta6 [value-expr: inputs.zeta6];
  static real(kind=8) zeta7 [value-expr: inputs.zeta7];
  static real(kind=8) prob [value-expr: limits.prob];
  static real(kind=8) mtp [value-expr: limits.mtp];
  static real(kind=8) sigma [value-expr: limits.sigma];
  static integer(kind=4) zprime [value-expr: limits.zprime];
  static real(kind=8) mw2 [value-expr: mass2.mw2];
  static real(kind=8) mz2 [value-expr: mass2.mz2];
  static real(kind=8) mt2 [value-expr: mass2.mt2];
  static real(kind=8) mh2 [value-expr: mass2.mh2];
  static real(kind=8) mz [value-expr: masses.mz];
  static real(kind=8) mh [value-expr: masses.mh];
  static real(kind=8) mt [value-expr: masses.mt];
  static real(kind=8) mb [value-expr: masses.mb];
  static real(kind=8) mc [value-expr: masses.mc];
  static real(kind=8) ms [value-expr: masses.ms];
  static real(kind=8) md [value-expr: masses.md];
  static real(kind=8) mu [value-expr: masses.mu];
  static real(kind=8) mtau [value-expr: masses.mtau];
  static real(kind=8) mmu [value-expr: masses.mmu];
  static real(kind=8) me [value-expr: masses.me];
  static real(kind=8) mw [value-expr: masses.mw];
  static real(kind=8) swpar [value-expr: obliqe.swpar];
  static real(kind=8) spar [value-expr: obliqe.spar];
  static real(kind=8) tpar [value-expr: obliqe.tpar];
  static real(kind=8) upar [value-expr: obliqe.upar];
  static real(kind=8) brho [value-expr: obliqe.brho];
  static real(kind=8) bkappa [value-expr: obliqe.bkappa];
  static real(kind=8) rpar [value-expr: obliqe.rpar];
  static real(kind=8) zpar [value-expr: obliqe.zpar];
  static real(kind=8) delrwh [value-expr: obliqe.delrwh];
  static real(kind=8) delrzh [value-expr: obliqe.delrzh];
  static real(kind=8) delr [value-expr: obliqe.delr];
  static real(kind=8) rhohat [value-expr: obliqe.rhohat];
  static real(kind=8) rho2 [value-expr: obliqe.rho2];
  static real(kind=8) ratzw2 [value-expr: ratios.ratzw2];
  static real(kind=8) rathw2 [value-expr: ratios.rathw2];
  static real(kind=8) rathz2 [value-expr: ratios.rathz2];
  static real(kind=8) rattw2 [value-expr: ratios.rattw2];
  static real(kind=8) rattz2 [value-expr: ratios.rattz2];
  static real(kind=8) ratth2 [value-expr: ratios.ratth2];
  static real(kind=8) mzp [value-expr: zprime.mzp];
  static real(kind=8) mzp2 [value-expr: zprime.mzp2];
  static real(kind=8) mz02 [value-expr: zprime.mz02];
  static real(kind=8) sinth [value-expr: zprime.sinth];
  static real(kind=8) sinth2 [value-expr: zprime.sinth2];
  static real(kind=8) costh [value-expr: zprime.costh];
  static real(kind=8) costh2 [value-expr: zprime.costh2];
  static real(kind=8) ratg21 [value-expr: zprime.ratg21];
  static real(kind=8) rhoeff [value-expr: zprime.rhoeff];
  static real(kind=8) rhoezp [value-expr: zprime.rhoezp];
  static real(kind=8) rhozzp [value-expr: zprime.rhozzp];
  static real(kind=8) v2[10] [value-expr: zprime.v2];
  static real(kind=8) a2[10] [value-expr: zprime.a2];
  static real(kind=8) eps2_l[10] [value-expr: zprime.eps2_l];
  static real(kind=8) eps2_r[10] [value-expr: zprime.eps2_r];
  static real(kind=8) ratgrl [value-expr: zprime.ratgrl];
  complex(kind=8) aboson;
  real(kind=8) al;
  real(kind=8) at;
  real(kind=8) az;
  real(kind=8) c[6];
  complex(kind=8) const1;
  complex(kind=8) const2;
  complex(kind=8) const3;
  integer(kind=4) f;
  complex(kind=8) imaqed;
  complex(kind=8) logc2;
  real(kind=8) ratbz2;
  real(kind=8) ratcz2;
  real(kind=8) rcs;
  real(kind=8) rtauz2;
  real(kind=8) t1;
  real(kind=8) t2;
  real(kind=8) t3;
  complex(kind=8) xa2mt0;

  c[0] = 2.00000000000000011102230246251565404236316680908203125e-1;
  c[2] = 2.1428571428571428769682682968777953647077083587646484375e-2;
  c[4] = 3.17460317460317460042107384765586175490170717239379882812e-3;
  c[1] = 4.79012345679012352395176321806502528488636016845703125e-1;
  c[3] = 5.2010582010582007139731786082847975194454193115234375e-2;
  c[5] = 6.086671705719325087269311325144371949136257171630859375e-3;
  al = alphat / pi1;
  az = alphas (&mz) / pi1;
  at = alphas (&mt) / pi1;
  const1 = ((COMPLEX_EXPR <pi1, 0.0> * __complex__ (0.0, 1.0e+0) + __complex__ (1.6666666666666667406815349750104360282421112060546875e+0, 0.0))) / __complex__ (3.0e+0, 0.0);
  const2 = ((COMPLEX_EXPR <4.58333333333333303727386009995825588703155517578125e+0 - zeta3 * 4.0e+0, 0.0> + COMPLEX_EXPR <pi1, 0.0> * __complex__ (0.0, 1.0e+0))) / __complex__ (3.0e+0, 0.0);
  const3 = ((COMPLEX_EXPR <pi1, 0.0> * __complex__ (0.0, 1.2e+1) + __complex__ (1.6e+1, 0.0))) / __complex__ (3.0e+0, 0.0);
  {
    real(kind=8) D.3700;
    real(kind=8) D.3699;

    D.3699 = ((mtau / mz));
    D.3700 = D.3699 * D.3699;
    rtauz2 = D.3700;
  }
  {
    real(kind=8) D.3703;
    real(kind=8) D.3702;

    D.3702 = ((mcrun (&mz) / mz));
    D.3703 = D.3702 * D.3702;
    ratcz2 = D.3703;
  }
  {
    real(kind=8) D.3706;
    real(kind=8) D.3705;

    D.3705 = ((mbrun (&mz) / mz));
    D.3706 = D.3705 * D.3705;
    ratbz2 = D.3706;
  }
  rcs = __builtin_sqrt (coshat / sinhat);
  xa2mt0 = __complex__ (1.0e+0, 0.0);
  if (!fa2mt0)
    {
      xa2mt0 = __complex__ (0.0, 0.0);
    }
  L.1:;
  if (!fasmt0)
    {
      az = 0.0;
      at = 0.0;
    }
  L.2:;
  *dkapse = __complex__ (0.0, 0.0);
  f = 1;
  if (f <= 9)
    {
      while (1)
        {
          {
            logical(kind=4) D.3724;

            if (f != 6)
              {
                {
                  real(kind=8) D.3713;
                  real(kind=8) D.3712;

                  D.3712 = q[(integer(kind=8)) f];
                  D.3713 = D.3712 * D.3712;
                  *dkapse = *dkapse + COMPLEX_EXPR <(((rcs * al) * nc[(integer(kind=8)) f]) * q[(integer(kind=8)) f]) * v[(integer(kind=8)) f], 0.0> * (((COMPLEX_EXPR <(al * 7.5e-1) * D.3713, 0.0> * const2) * xa2mt0 + const1));
                }
                if (f > 3)
                  {
                    *dkapse = *dkapse + COMPLEX_EXPR <((((rcs * 3.0e+0) * al) * q[(integer(kind=8)) f]) * v[(integer(kind=8)) f]) * az, 0.0> * const2;
                  }
                L.6:;
                if (NON_LVALUE_EXPR <flagmf>)
                  {
                    if (f == 3)
                      {
                        *dkapse = *dkapse + COMPLEX_EXPR <((((rcs * al) * q[(integer(kind=8)) f]) * v[(integer(kind=8)) f]) * 2.0e+0) * rtauz2, 0.0>;
                      }
                    L.8:;
                    if (f == 5)
                      {
                        *dkapse = *dkapse + COMPLEX_EXPR <((((rcs * al) * 3.0e+0) * q[(integer(kind=8)) f]) * v[(integer(kind=8)) f]) * ratcz2, 0.0> * ((COMPLEX_EXPR <az, 0.0> * const3 + __complex__ (2.0e+0, 0.0)));
                      }
                    L.9:;
                    if (f == 9)
                      {
                        *dkapse = *dkapse + COMPLEX_EXPR <((((rcs * al) * 3.0e+0) * q[(integer(kind=8)) f]) * v[(integer(kind=8)) f]) * ratbz2, 0.0> * ((COMPLEX_EXPR <az, 0.0> * const3 + __complex__ (2.0e+0, 0.0)));
                      }
                    L.10:;
                  }
                L.7:;
              }
            else
              {
                t1 = 1.0e+0 / rattz2;
                {
                  real(kind=8) D.3720;
                  real(kind=8) D.3719;

                  D.3719 = rattz2;
                  D.3720 = D.3719 * D.3719;
                  t2 = 1.0e+0 / D.3720;
                }
                {
                  real(kind=8) D.3721;

                  D.3721 = rattz2;
                  t3 = 1.0e+0 / __builtin_powi (D.3721, 3);
                }
                *dkapse = *dkapse + COMPLEX_EXPR <(((rcs * al) * q[(integer(kind=8)) f]) * v[(integer(kind=8)) f]) * (((((c[0] * t1 + c[2] * t2) + c[4] * t3)) + (((c[1] * t1 + c[3] * t2) + c[5] * t3)) * at)), 0.0>;
                if (!flagmr || mt <= mz)
                  {
                    *dkapse = *dkapse - COMPLEX_EXPR <((rcs * al) * q[(integer(kind=8)) f]) * v[(integer(kind=8)) f], 0.0> * (((COMPLEX_EXPR <__builtin_log (rattz2), 0.0> * ((COMPLEX_EXPR <at + 1.0e+0, 0.0> + (COMPLEX_EXPR <al, 0.0> * xa2mt0) / __complex__ (3.0e+0, 0.0))) - COMPLEX_EXPR <at * 1.0833333333333332593184650249895639717578887939453125e+0, 0.0>) - (COMPLEX_EXPR <al * 5.0e+0, 0.0> * xa2mt0) / __complex__ (4.0e+0, 0.0)));
                  }
                L.11:;
              }
            L.5:;
            __label_000100:;
            L.3:;
            D.3724 = f == 9;
            f = f + 1;
            if (D.3724) goto L.4;
          }
        }
    }
  L.4:;
  imaqed = __complex__ (0.0, 0.0);
  aboson = __complex__ (0.0, 0.0);
  logc2 = __complex__ (0.0, 0.0);
  if (!*feonly)
    {
      if (NON_LVALUE_EXPR <fla2im>)
        {
          imaqed = COMPLEX_EXPR <((alphat * 2.0e+1) / 9.0e+0) * IMAGPART_EXPR <*dkapse>, 0.0>;
        }
      L.13:;
      aboson = COMPLEX_EXPR <((al * 2.5e-1) / sinhat) * (((-(((coshat * 3.0e+0 + 1.666666666666666574148081281236954964697360992431640625e-1)) * __builtin_log (ratzw2)) - 1.11111111111111104943205418749130330979824066162109375e-1) + ((lambda (&ratzw2) - 1.0e+0)) * ((((8.0e+0 / ratzw2) * ((coshat + 3.33333333333333314829616256247390992939472198486328125e-1)) + coshat * 6.0e+0) + 3.33333333333333314829616256247390992939472198486328125e-1)))), 0.0>;
      logc2 = COMPLEX_EXPR <-(((al / sinhat) * coshat) * __builtin_log (ratzw2)), 0.0>;
    }
  L.12:;
  *dkapse = ((*dkapse + aboson) + imaqed) + logc2;
  return;
}


kappaf (complex(kind=8)[0:D.4060] * restrict kappa, integer(kind=4) & restrict fmin, integer(kind=4) & restrict fmax)
{
  static real(kind=8) q[10] [value-expr: coupls.q];
  static real(kind=8) i3[10] [value-expr: coupls.i3];
  static real(kind=8) nc[10] [value-expr: coupls.nc];
  static real(kind=8) v[10] [value-expr: coupls.v];
  static real(kind=8) a[10] [value-expr: coupls.a];
  static real(kind=8) alphat [value-expr: coupls.alphat];
  static real(kind=8) sinhat [value-expr: coupls.sinhat];
  static real(kind=8) coshat [value-expr: coupls.coshat];
  static real(kind=8) rhonc [value-expr: coupls.rhonc];
  static real(kind=8) i3r[10] [value-expr: coupls.i3r];
  static real(kind=8) u1xr[10] [value-expr: coupls.u1xr];
  static real(kind=8) u1xl[10] [value-expr: coupls.u1xl];
  static real(kind=8) fitx [value-expr: fit221.fitx];
  static real(kind=8) fitsph [value-expr: fit221.fitsph];
  static real(kind=8) fitcph [value-expr: fit221.fitcph];
  static real(kind=8) fittph [value-expr: fit221.fittph];
  static real(kind=8) fits2b [value-expr: fit221.fits2b];
  static real(kind=8) kkss [value-expr: fit221.kkss];
  static real(kind=8) kkcc [value-expr: fit221.kkcc];
  static real(kind=8) kkem [value-expr: fit221.kkem];
  static real(kind=8) bestlnx [value-expr: fitbst.bestlnx];
  static real(kind=8) besttph [value-expr: fitbst.besttph];
  static real(kind=8) bests2b [value-expr: fitbst.bests2b];
  static logical(kind=4) flgfitx [value-expr: fitflg.flgfitx];
  static logical(kind=4) flgtph [value-expr: fitflg.flgtph];
  static logical(kind=4) flgs2b [value-expr: fitflg.flgs2b];
  static logical(kind=4) flfout [value-expr: fitflg.flfout];
  static integer(kind=4) modtype [value-expr: fitswtr.modtype];
  static integer(kind=4) plltr [value-expr: fitswtr.plltr];
  static integer(kind=4) prtpll[81] [value-expr: fitswtr.prtpll];
  static logical(kind=4) flagmr [value-expr: flags.flagmr];
  static integer(kind=4) flgblm [value-expr: flags.flgblm];
  static logical(kind=4) ffermi [value-expr: flags.ffermi];
  static logical(kind=4) fa2mt4 [value-expr: flags.fa2mt4];
  static logical(kind=4) fa2mt2 [value-expr: flags.fa2mt2];
  static logical(kind=4) fa2mt0 [value-expr: flags.fa2mt0];
  static logical(kind=4) fla2im [value-expr: flags.fla2im];
  static logical(kind=4) fasmt2 [value-expr: flags.fasmt2];
  static logical(kind=4) fasmt0 [value-expr: flags.fasmt0];
  static logical(kind=4) fas2mt [value-expr: flags.fas2mt];
  static logical(kind=4) flagmf [value-expr: flags.flagmf];
  static logical(kind=4) fpolew [value-expr: flags.fpolew];
  static logical(kind=4) flgech [value-expr: flags.flgech];
  static logical(kind=4) fobliq [value-expr: flags.fobliq];
  static logical(kind=4) f4lqcd [value-expr: flags.f4lqcd];
  static logical(kind=4) falas2 [value-expr: flags.falas2];
  static logical(kind=4) fbayes [value-expr: flags.fbayes];
  static integer(kind=4) flagzp [value-expr: flags.flagzp];
  static logical(kind=4) flagmh [value-expr: flags.flagmh];
  static logical(kind=4) flagmt [value-expr: flags.flagmt];
  static logical(kind=4) flagmc [value-expr: flags.flagmc];
  static logical(kind=4) flgrho [value-expr: flags.flgrho];
  static logical(kind=4) fkappa [value-expr: flags.fkappa];
  static logical(kind=4) flags [value-expr: flags.flags];
  static logical(kind=4) flagt [value-expr: flags.flagt];
  static logical(kind=4) fzprim [value-expr: flags.fzprim];
  static logical(kind=4) fsinth [value-expr: flags.fsinth];
  static logical(kind=4) fwrite [value-expr: flags.fwrite];
  static logical(kind=4) flprob [value-expr: flags.flprob];
  static logical(kind=4) fhiggs [value-expr: flags.fhiggs];
  static logical(kind=4) flagal [value-expr: flags.flagal];
  static logical(kind=4) fsplot [value-expr: flags.fsplot];
  static real(kind=8) alpha [value-expr: inputs.alpha];
  static real(kind=8) gf [value-expr: inputs.gf];
  static real(kind=8) alfas0 [value-expr: inputs.alfas0];
  static real(kind=8) asgrid[2001] [value-expr: inputs.asgrid];
  static real(kind=8) mu0 [value-expr: inputs.mu0];
  static real(kind=8) dahad3 [value-expr: inputs.dahad3];
  static real(kind=8) pol4hf [value-expr: inputs.pol4hf];
  static real(kind=8) an[8004] [value-expr: inputs.an];
  static real(kind=8) bn[8004] [value-expr: inputs.bn];
  static real(kind=8) pi1 [value-expr: inputs.pi1];
  static real(kind=8) pi2 [value-expr: inputs.pi2];
  static real(kind=8) zeta2 [value-expr: inputs.zeta2];
  static real(kind=8) zeta3 [value-expr: inputs.zeta3];
  static real(kind=8) zeta4 [value-expr: inputs.zeta4];
  static real(kind=8) zeta5 [value-expr: inputs.zeta5];
  static real(kind=8) zeta6 [value-expr: inputs.zeta6];
  static real(kind=8) zeta7 [value-expr: inputs.zeta7];
  static real(kind=8) prob [value-expr: limits.prob];
  static real(kind=8) mtp [value-expr: limits.mtp];
  static real(kind=8) sigma [value-expr: limits.sigma];
  static integer(kind=4) zprime [value-expr: limits.zprime];
  static real(kind=8) mw2 [value-expr: mass2.mw2];
  static real(kind=8) mz2 [value-expr: mass2.mz2];
  static real(kind=8) mt2 [value-expr: mass2.mt2];
  static real(kind=8) mh2 [value-expr: mass2.mh2];
  static real(kind=8) mz [value-expr: masses.mz];
  static real(kind=8) mh [value-expr: masses.mh];
  static real(kind=8) mt [value-expr: masses.mt];
  static real(kind=8) mb [value-expr: masses.mb];
  static real(kind=8) mc [value-expr: masses.mc];
  static real(kind=8) ms [value-expr: masses.ms];
  static real(kind=8) md [value-expr: masses.md];
  static real(kind=8) mu [value-expr: masses.mu];
  static real(kind=8) mtau [value-expr: masses.mtau];
  static real(kind=8) mmu [value-expr: masses.mmu];
  static real(kind=8) me [value-expr: masses.me];
  static real(kind=8) mw [value-expr: masses.mw];
  static real(kind=8) swpar [value-expr: obliqe.swpar];
  static real(kind=8) spar [value-expr: obliqe.spar];
  static real(kind=8) tpar [value-expr: obliqe.tpar];
  static real(kind=8) upar [value-expr: obliqe.upar];
  static real(kind=8) brho [value-expr: obliqe.brho];
  static real(kind=8) bkappa [value-expr: obliqe.bkappa];
  static real(kind=8) rpar [value-expr: obliqe.rpar];
  static real(kind=8) zpar [value-expr: obliqe.zpar];
  static real(kind=8) delrwh [value-expr: obliqe.delrwh];
  static real(kind=8) delrzh [value-expr: obliqe.delrzh];
  static real(kind=8) delr [value-expr: obliqe.delr];
  static real(kind=8) rhohat [value-expr: obliqe.rhohat];
  static real(kind=8) rho2 [value-expr: obliqe.rho2];
  static real(kind=8) ratzw2 [value-expr: ratios.ratzw2];
  static real(kind=8) rathw2 [value-expr: ratios.rathw2];
  static real(kind=8) rathz2 [value-expr: ratios.rathz2];
  static real(kind=8) rattw2 [value-expr: ratios.rattw2];
  static real(kind=8) rattz2 [value-expr: ratios.rattz2];
  static real(kind=8) ratth2 [value-expr: ratios.ratth2];
  static real(kind=8) mzp [value-expr: zprime.mzp];
  static real(kind=8) mzp2 [value-expr: zprime.mzp2];
  static real(kind=8) mz02 [value-expr: zprime.mz02];
  static real(kind=8) sinth [value-expr: zprime.sinth];
  static real(kind=8) sinth2 [value-expr: zprime.sinth2];
  static real(kind=8) costh [value-expr: zprime.costh];
  static real(kind=8) costh2 [value-expr: zprime.costh2];
  static real(kind=8) ratg21 [value-expr: zprime.ratg21];
  static real(kind=8) rhoeff [value-expr: zprime.rhoeff];
  static real(kind=8) rhoezp [value-expr: zprime.rhoezp];
  static real(kind=8) rhozzp [value-expr: zprime.rhozzp];
  static real(kind=8) v2[10] [value-expr: zprime.v2];
  static real(kind=8) a2[10] [value-expr: zprime.a2];
  static real(kind=8) eps2_l[10] [value-expr: zprime.eps2_l];
  static real(kind=8) eps2_r[10] [value-expr: zprime.eps2_r];
  static real(kind=8) ratgrl [value-expr: zprime.ratgrl];
  real(kind=8) az;
  complex(kind=8) dkapfv;
  complex(kind=8) dkapse;
  complex(kind=8) dkbtop;
  integer(kind=4) f;
  complex(kind=8) f1;
  complex(kind=8) fy;
  real(kind=8) gy;
  integer(kind=8) lbound.0;
  integer(kind=8) ubound.1;
  integer(kind=8) offset.2;
  integer(kind=8) size.3;
  real(kind=8) taub;
  integer(kind=8) D.4060;
  bitsizetype D.4061;
  sizetype D.4062;

  lbound.0 = (integer(kind=8)) *fmin;
  ubound.1 = (integer(kind=8)) *fmax;
  size.3 = (1 - lbound.0) + ubound.1;
  size.3 = MAX_EXPR <size.3, 0>;
  D.4060 = size.3 + -1;
  D.4061 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.3> * 128;
  D.4062 = (sizetype) NON_LVALUE_EXPR <size.3> * 16;
  offset.2 = -NON_LVALUE_EXPR <lbound.0>;
  {
    static logical(kind=4) C.4031 = 0;

    deltakappase (&dkapse, &C.4031);
  }
  az = alphas (&mz) / pi1;
  if (!fasmt0)
    {
      az = 0.0;
    }
  L.14:;
  {
    static real(kind=8) C.4034 = 1.0e+0;

    f1 = fds (&C.4034);
  }
  fy = fds (&ratzw2);
  gy = gds (&ratzw2);
  f = 0;
  if (f <= 3)
    {
      while (1)
        {
          {
            logical(kind=4) D.4046;

            {
              real(kind=8) __var_1;

              __var_1 = ABS_EXPR <q[(integer(kind=8)) f]>;
              {
                real(kind=8) D.4044;
                real(kind=8) D.4043;
                real(kind=8) D.4042;
                real(kind=8) D.4041;

                D.4041 = sinhat;
                D.4042 = D.4041 * D.4041;
                D.4043 = q[(integer(kind=8)) f];
                D.4044 = D.4043 * D.4043;
                dkapfv = -(COMPLEX_EXPR <((alphat * 2.5e-1) / pi1) / sinhat, 0.0> * (((COMPLEX_EXPR <(coshat * 4.0e+0) * gy, 0.0> + COMPLEX_EXPR <((5.0e-1 - ((1.0e+0 - __var_1)) * sinhat)), 0.0> * fy) - COMPLEX_EXPR <((((1.0e+0 - (sinhat * 6.0e+0) * __var_1) + (D.4042 * 8.0e+0) * D.4044)) * 2.5e-1) / coshat, 0.0> * f1)));
              }
              L.17:;
              (*kappa)[(integer(kind=8)) f + offset.2] = (dkapse + __complex__ (1.0e+0, 0.0)) + dkapfv;
              __label_000100:;
            }
            L.15:;
            D.4046 = f == 3;
            f = f + 1;
            if (D.4046) goto L.16;
          }
        }
    }
  L.16:;
  f1 = COMPLEX_EXPR <((1.0e+0 - az)), 0.0> * f1 + COMPLEX_EXPR <az * 4.9333333333333329040470971449394710361957550048828125e-1, 0.0>;
  fy = COMPLEX_EXPR <((1.0e+0 - az)), 0.0> * fy + COMPLEX_EXPR <az * 4.9333333333333329040470971449394710361957550048828125e-1, 0.0>;
  gy = ((1.0e+0 - az)) * gy - az * 8.6999999999999999555910790149937383830547332763671875e-1;
  f = 4;
  if (f <= 9)
    {
      while (1)
        {
          {
            logical(kind=4) D.4056;

            {
              real(kind=8) __var_2;

              __var_2 = ABS_EXPR <q[(integer(kind=8)) f]>;
              {
                real(kind=8) D.4054;
                real(kind=8) D.4053;
                real(kind=8) D.4052;
                real(kind=8) D.4051;

                D.4051 = sinhat;
                D.4052 = D.4051 * D.4051;
                D.4053 = q[(integer(kind=8)) f];
                D.4054 = D.4053 * D.4053;
                dkapfv = -(COMPLEX_EXPR <((alphat * 2.5e-1) / pi1) / sinhat, 0.0> * (((COMPLEX_EXPR <(coshat * 4.0e+0) * gy, 0.0> + COMPLEX_EXPR <((5.0e-1 - ((1.0e+0 - __var_2)) * sinhat)), 0.0> * fy) - COMPLEX_EXPR <((((1.0e+0 - (sinhat * 6.0e+0) * __var_2) + (D.4052 * 8.0e+0) * D.4054)) * 2.5e-1) / coshat, 0.0> * f1)));
              }
              L.20:;
              (*kappa)[(integer(kind=8)) f + offset.2] = (dkapse + __complex__ (1.0e+0, 0.0)) + dkapfv;
              __label_000200:;
            }
            L.18:;
            D.4056 = f == 9;
            f = f + 1;
            if (D.4056) goto L.19;
          }
        }
    }
  L.19:;
  bvertex (&dkbtop, &taub);
  (*kappa)[offset.2 + 9] = (*kappa)[offset.2 + 9] + dkbtop;
  if (NON_LVALUE_EXPR <fa2mt4>)
    {
      (*kappa)[offset.2 + 9] = (*kappa)[offset.2 + 9] / COMPLEX_EXPR <((taub + 1.0e+0)), 0.0>;
    }
  L.21:;
  if (NON_LVALUE_EXPR <fobliq>)
    {
      (*kappa)[offset.2 + 9] = (*kappa)[offset.2 + 9] + COMPLEX_EXPR <bkappa, 0.0>;
    }
  L.22:;
  return;
}


