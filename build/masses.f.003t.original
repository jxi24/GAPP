mrun (integer(kind=4) & restrict nf, real(kind=8) & restrict a1, real(kind=8) & restrict ax, real(kind=8) & restrict mrun0)
{
  static real(kind=8) q[10] [value-expr: coupls.q];
  static real(kind=8) i3[10] [value-expr: coupls.i3];
  static real(kind=8) nc[10] [value-expr: coupls.nc];
  static real(kind=8) v[10] [value-expr: coupls.v];
  static real(kind=8) a[10] [value-expr: coupls.a];
  static real(kind=8) alphat [value-expr: coupls.alphat];
  static real(kind=8) sinhat [value-expr: coupls.sinhat];
  static real(kind=8) coshat [value-expr: coupls.coshat];
  static real(kind=8) rhonc [value-expr: coupls.rhonc];
  static real(kind=8) i3r[10] [value-expr: coupls.i3r];
  static real(kind=8) u1xr[10] [value-expr: coupls.u1xr];
  static real(kind=8) u1xl[10] [value-expr: coupls.u1xl];
  static real(kind=8) fitx [value-expr: fit221.fitx];
  static real(kind=8) fitsph [value-expr: fit221.fitsph];
  static real(kind=8) fitcph [value-expr: fit221.fitcph];
  static real(kind=8) fittph [value-expr: fit221.fittph];
  static real(kind=8) fits2b [value-expr: fit221.fits2b];
  static real(kind=8) kkss [value-expr: fit221.kkss];
  static real(kind=8) kkcc [value-expr: fit221.kkcc];
  static real(kind=8) kkem [value-expr: fit221.kkem];
  static real(kind=8) bestlnx [value-expr: fitbst.bestlnx];
  static real(kind=8) besttph [value-expr: fitbst.besttph];
  static real(kind=8) bests2b [value-expr: fitbst.bests2b];
  static logical(kind=4) flgfitx [value-expr: fitflg.flgfitx];
  static logical(kind=4) flgtph [value-expr: fitflg.flgtph];
  static logical(kind=4) flgs2b [value-expr: fitflg.flgs2b];
  static logical(kind=4) flfout [value-expr: fitflg.flfout];
  static integer(kind=4) modtype [value-expr: fitswtr.modtype];
  static integer(kind=4) plltr [value-expr: fitswtr.plltr];
  static integer(kind=4) prtpll[81] [value-expr: fitswtr.prtpll];
  static logical(kind=4) flagmr [value-expr: flags.flagmr];
  static integer(kind=4) flgblm [value-expr: flags.flgblm];
  static logical(kind=4) ffermi [value-expr: flags.ffermi];
  static logical(kind=4) fa2mt4 [value-expr: flags.fa2mt4];
  static logical(kind=4) fa2mt2 [value-expr: flags.fa2mt2];
  static logical(kind=4) fa2mt0 [value-expr: flags.fa2mt0];
  static logical(kind=4) fla2im [value-expr: flags.fla2im];
  static logical(kind=4) fasmt2 [value-expr: flags.fasmt2];
  static logical(kind=4) fasmt0 [value-expr: flags.fasmt0];
  static logical(kind=4) fas2mt [value-expr: flags.fas2mt];
  static logical(kind=4) flagmf [value-expr: flags.flagmf];
  static logical(kind=4) fpolew [value-expr: flags.fpolew];
  static logical(kind=4) flgech [value-expr: flags.flgech];
  static logical(kind=4) fobliq [value-expr: flags.fobliq];
  static logical(kind=4) f4lqcd [value-expr: flags.f4lqcd];
  static logical(kind=4) falas2 [value-expr: flags.falas2];
  static logical(kind=4) fbayes [value-expr: flags.fbayes];
  static integer(kind=4) flagzp [value-expr: flags.flagzp];
  static logical(kind=4) flagmh [value-expr: flags.flagmh];
  static logical(kind=4) flagmt [value-expr: flags.flagmt];
  static logical(kind=4) flagmc [value-expr: flags.flagmc];
  static logical(kind=4) flgrho [value-expr: flags.flgrho];
  static logical(kind=4) fkappa [value-expr: flags.fkappa];
  static logical(kind=4) flags [value-expr: flags.flags];
  static logical(kind=4) flagt [value-expr: flags.flagt];
  static logical(kind=4) fzprim [value-expr: flags.fzprim];
  static logical(kind=4) fsinth [value-expr: flags.fsinth];
  static logical(kind=4) fwrite [value-expr: flags.fwrite];
  static logical(kind=4) flprob [value-expr: flags.flprob];
  static logical(kind=4) fhiggs [value-expr: flags.fhiggs];
  static logical(kind=4) flagal [value-expr: flags.flagal];
  static logical(kind=4) fsplot [value-expr: flags.fsplot];
  static real(kind=8) alpha [value-expr: inputs.alpha];
  static real(kind=8) gf [value-expr: inputs.gf];
  static real(kind=8) alfas0 [value-expr: inputs.alfas0];
  static real(kind=8) asgrid[2001] [value-expr: inputs.asgrid];
  static real(kind=8) mu0 [value-expr: inputs.mu0];
  static real(kind=8) dahad3 [value-expr: inputs.dahad3];
  static real(kind=8) pol4hf [value-expr: inputs.pol4hf];
  static real(kind=8) an[8004] [value-expr: inputs.an];
  static real(kind=8) bn[8004] [value-expr: inputs.bn];
  static real(kind=8) pi1 [value-expr: inputs.pi1];
  static real(kind=8) pi2 [value-expr: inputs.pi2];
  static real(kind=8) zeta2 [value-expr: inputs.zeta2];
  static real(kind=8) zeta3 [value-expr: inputs.zeta3];
  static real(kind=8) zeta4 [value-expr: inputs.zeta4];
  static real(kind=8) zeta5 [value-expr: inputs.zeta5];
  static real(kind=8) zeta6 [value-expr: inputs.zeta6];
  static real(kind=8) zeta7 [value-expr: inputs.zeta7];
  static real(kind=8) prob [value-expr: limits.prob];
  static real(kind=8) mtp [value-expr: limits.mtp];
  static real(kind=8) sigma [value-expr: limits.sigma];
  static integer(kind=4) zprime [value-expr: limits.zprime];
  static real(kind=8) mw2 [value-expr: mass2.mw2];
  static real(kind=8) mz2 [value-expr: mass2.mz2];
  static real(kind=8) mt2 [value-expr: mass2.mt2];
  static real(kind=8) mh2 [value-expr: mass2.mh2];
  static real(kind=8) mz [value-expr: masses.mz];
  static real(kind=8) mh [value-expr: masses.mh];
  static real(kind=8) mt [value-expr: masses.mt];
  static real(kind=8) mb [value-expr: masses.mb];
  static real(kind=8) mc [value-expr: masses.mc];
  static real(kind=8) ms [value-expr: masses.ms];
  static real(kind=8) md [value-expr: masses.md];
  static real(kind=8) mu [value-expr: masses.mu];
  static real(kind=8) mtau [value-expr: masses.mtau];
  static real(kind=8) mmu [value-expr: masses.mmu];
  static real(kind=8) me [value-expr: masses.me];
  static real(kind=8) mw [value-expr: masses.mw];
  static real(kind=8) swpar [value-expr: obliqe.swpar];
  static real(kind=8) spar [value-expr: obliqe.spar];
  static real(kind=8) tpar [value-expr: obliqe.tpar];
  static real(kind=8) upar [value-expr: obliqe.upar];
  static real(kind=8) brho [value-expr: obliqe.brho];
  static real(kind=8) bkappa [value-expr: obliqe.bkappa];
  static real(kind=8) rpar [value-expr: obliqe.rpar];
  static real(kind=8) zpar [value-expr: obliqe.zpar];
  static real(kind=8) delrwh [value-expr: obliqe.delrwh];
  static real(kind=8) delrzh [value-expr: obliqe.delrzh];
  static real(kind=8) delr [value-expr: obliqe.delr];
  static real(kind=8) rhohat [value-expr: obliqe.rhohat];
  static real(kind=8) rho2 [value-expr: obliqe.rho2];
  static real(kind=8) ratzw2 [value-expr: ratios.ratzw2];
  static real(kind=8) rathw2 [value-expr: ratios.rathw2];
  static real(kind=8) rathz2 [value-expr: ratios.rathz2];
  static real(kind=8) rattw2 [value-expr: ratios.rattw2];
  static real(kind=8) rattz2 [value-expr: ratios.rattz2];
  static real(kind=8) ratth2 [value-expr: ratios.ratth2];
  static real(kind=8) mzp [value-expr: zprime.mzp];
  static real(kind=8) mzp2 [value-expr: zprime.mzp2];
  static real(kind=8) mz02 [value-expr: zprime.mz02];
  static real(kind=8) sinth [value-expr: zprime.sinth];
  static real(kind=8) sinth2 [value-expr: zprime.sinth2];
  static real(kind=8) costh [value-expr: zprime.costh];
  static real(kind=8) costh2 [value-expr: zprime.costh2];
  static real(kind=8) ratg21 [value-expr: zprime.ratg21];
  static real(kind=8) rhoeff [value-expr: zprime.rhoeff];
  static real(kind=8) rhoezp [value-expr: zprime.rhoezp];
  static real(kind=8) rhozzp [value-expr: zprime.rhozzp];
  static real(kind=8) v2[10] [value-expr: zprime.v2];
  static real(kind=8) a2[10] [value-expr: zprime.a2];
  static real(kind=8) eps2_l[10] [value-expr: zprime.eps2_l];
  static real(kind=8) eps2_r[10] [value-expr: zprime.eps2_r];
  static real(kind=8) ratgrl [value-expr: zprime.ratgrl];
  real(kind=8) beta0;
  real(kind=8) beta1;
  real(kind=8) beta2;
  real(kind=8) fac1;
  real(kind=8) fac2;
  real(kind=8) gamma1;
  real(kind=8) gamma2;
  real(kind=8) __result_mrun;

  if (*a1 == *ax)
    {
      __result_mrun = *mrun0;
      return __result_mrun;
    }
  L.1:;
  beta0 = fbeta0 ((integer(kind=4) *) nf);
  beta1 = fbeta1 ((integer(kind=4) *) nf);
  beta2 = fbeta2 ((integer(kind=4) *) nf);
  gamma1 = ((6.73333333333333285963817615993320941925048828125e+1 - (real(kind=8)) *nf * 2.22222222222222232090871330001391470432281494140625e+0)) * 6.25e-2;
  {
    integer(kind=4) D.3693;
    integer(kind=4) D.3692;

    D.3692 = *nf;
    D.3693 = D.3692 * D.3692;
    gamma2 = (((1.249e+3 - ((zeta3 * 5.333333333333333570180911920033395290374755859375e+1 + 8.207407407407407617938588373363018035888671875e+1)) * (real(kind=8)) *nf) - (real(kind=8)) D.3693 * 1.7283950617283949657831954027642495930194854736328125e+0)) * 1.5625e-2;
  }
  {
    real(kind=8) D.3695;
    real(kind=8) D.3694;

    D.3694 = beta0;
    D.3695 = D.3694 * D.3694;
    fac1 = gamma1 / beta0 - beta1 / D.3695;
  }
  {
    real(kind=8) D.3697;
    real(kind=8) D.3696;

    D.3696 = beta0;
    D.3697 = D.3696 * D.3696;
    fac2 = gamma2 / beta0 - beta2 / D.3697;
  }
  {
    real(kind=8) D.3702;
    real(kind=8) D.3701;
    real(kind=8) D.3700;
    real(kind=8) D.3699;
    real(kind=8) D.3698;

    D.3698 = ((*ax / *a1));
    D.3699 = *ax;
    D.3700 = D.3699 * D.3699;
    D.3701 = *a1;
    D.3702 = D.3701 * D.3701;
    __result_mrun = (*mrun0 * __builtin_pow (D.3698, ((1.0e+0 / beta0)))) * __builtin_exp (((*ax - *a1)) * fac1 + (((fac2 - (beta1 / beta0) * fac1)) * ((D.3700 - D.3702))) * 5.0e-1);
  }
  return __result_mrun;
  return __result_mrun;
}


msrun (real(kind=8) & restrict x)
{
  static real(kind=8) q[10] [value-expr: coupls.q];
  static real(kind=8) i3[10] [value-expr: coupls.i3];
  static real(kind=8) nc[10] [value-expr: coupls.nc];
  static real(kind=8) v[10] [value-expr: coupls.v];
  static real(kind=8) a[10] [value-expr: coupls.a];
  static real(kind=8) alphat [value-expr: coupls.alphat];
  static real(kind=8) sinhat [value-expr: coupls.sinhat];
  static real(kind=8) coshat [value-expr: coupls.coshat];
  static real(kind=8) rhonc [value-expr: coupls.rhonc];
  static real(kind=8) i3r[10] [value-expr: coupls.i3r];
  static real(kind=8) u1xr[10] [value-expr: coupls.u1xr];
  static real(kind=8) u1xl[10] [value-expr: coupls.u1xl];
  static real(kind=8) fitx [value-expr: fit221.fitx];
  static real(kind=8) fitsph [value-expr: fit221.fitsph];
  static real(kind=8) fitcph [value-expr: fit221.fitcph];
  static real(kind=8) fittph [value-expr: fit221.fittph];
  static real(kind=8) fits2b [value-expr: fit221.fits2b];
  static real(kind=8) kkss [value-expr: fit221.kkss];
  static real(kind=8) kkcc [value-expr: fit221.kkcc];
  static real(kind=8) kkem [value-expr: fit221.kkem];
  static real(kind=8) bestlnx [value-expr: fitbst.bestlnx];
  static real(kind=8) besttph [value-expr: fitbst.besttph];
  static real(kind=8) bests2b [value-expr: fitbst.bests2b];
  static logical(kind=4) flgfitx [value-expr: fitflg.flgfitx];
  static logical(kind=4) flgtph [value-expr: fitflg.flgtph];
  static logical(kind=4) flgs2b [value-expr: fitflg.flgs2b];
  static logical(kind=4) flfout [value-expr: fitflg.flfout];
  static integer(kind=4) modtype [value-expr: fitswtr.modtype];
  static integer(kind=4) plltr [value-expr: fitswtr.plltr];
  static integer(kind=4) prtpll[81] [value-expr: fitswtr.prtpll];
  static logical(kind=4) flagmr [value-expr: flags.flagmr];
  static integer(kind=4) flgblm [value-expr: flags.flgblm];
  static logical(kind=4) ffermi [value-expr: flags.ffermi];
  static logical(kind=4) fa2mt4 [value-expr: flags.fa2mt4];
  static logical(kind=4) fa2mt2 [value-expr: flags.fa2mt2];
  static logical(kind=4) fa2mt0 [value-expr: flags.fa2mt0];
  static logical(kind=4) fla2im [value-expr: flags.fla2im];
  static logical(kind=4) fasmt2 [value-expr: flags.fasmt2];
  static logical(kind=4) fasmt0 [value-expr: flags.fasmt0];
  static logical(kind=4) fas2mt [value-expr: flags.fas2mt];
  static logical(kind=4) flagmf [value-expr: flags.flagmf];
  static logical(kind=4) fpolew [value-expr: flags.fpolew];
  static logical(kind=4) flgech [value-expr: flags.flgech];
  static logical(kind=4) fobliq [value-expr: flags.fobliq];
  static logical(kind=4) f4lqcd [value-expr: flags.f4lqcd];
  static logical(kind=4) falas2 [value-expr: flags.falas2];
  static logical(kind=4) fbayes [value-expr: flags.fbayes];
  static integer(kind=4) flagzp [value-expr: flags.flagzp];
  static logical(kind=4) flagmh [value-expr: flags.flagmh];
  static logical(kind=4) flagmt [value-expr: flags.flagmt];
  static logical(kind=4) flagmc [value-expr: flags.flagmc];
  static logical(kind=4) flgrho [value-expr: flags.flgrho];
  static logical(kind=4) fkappa [value-expr: flags.fkappa];
  static logical(kind=4) flags [value-expr: flags.flags];
  static logical(kind=4) flagt [value-expr: flags.flagt];
  static logical(kind=4) fzprim [value-expr: flags.fzprim];
  static logical(kind=4) fsinth [value-expr: flags.fsinth];
  static logical(kind=4) fwrite [value-expr: flags.fwrite];
  static logical(kind=4) flprob [value-expr: flags.flprob];
  static logical(kind=4) fhiggs [value-expr: flags.fhiggs];
  static logical(kind=4) flagal [value-expr: flags.flagal];
  static logical(kind=4) fsplot [value-expr: flags.fsplot];
  static real(kind=8) alpha [value-expr: inputs.alpha];
  static real(kind=8) gf [value-expr: inputs.gf];
  static real(kind=8) alfas0 [value-expr: inputs.alfas0];
  static real(kind=8) asgrid[2001] [value-expr: inputs.asgrid];
  static real(kind=8) mu0 [value-expr: inputs.mu0];
  static real(kind=8) dahad3 [value-expr: inputs.dahad3];
  static real(kind=8) pol4hf [value-expr: inputs.pol4hf];
  static real(kind=8) an[8004] [value-expr: inputs.an];
  static real(kind=8) bn[8004] [value-expr: inputs.bn];
  static real(kind=8) pi1 [value-expr: inputs.pi1];
  static real(kind=8) pi2 [value-expr: inputs.pi2];
  static real(kind=8) zeta2 [value-expr: inputs.zeta2];
  static real(kind=8) zeta3 [value-expr: inputs.zeta3];
  static real(kind=8) zeta4 [value-expr: inputs.zeta4];
  static real(kind=8) zeta5 [value-expr: inputs.zeta5];
  static real(kind=8) zeta6 [value-expr: inputs.zeta6];
  static real(kind=8) zeta7 [value-expr: inputs.zeta7];
  static real(kind=8) prob [value-expr: limits.prob];
  static real(kind=8) mtp [value-expr: limits.mtp];
  static real(kind=8) sigma [value-expr: limits.sigma];
  static integer(kind=4) zprime [value-expr: limits.zprime];
  static real(kind=8) mw2 [value-expr: mass2.mw2];
  static real(kind=8) mz2 [value-expr: mass2.mz2];
  static real(kind=8) mt2 [value-expr: mass2.mt2];
  static real(kind=8) mh2 [value-expr: mass2.mh2];
  static real(kind=8) mz [value-expr: masses.mz];
  static real(kind=8) mh [value-expr: masses.mh];
  static real(kind=8) mt [value-expr: masses.mt];
  static real(kind=8) mb [value-expr: masses.mb];
  static real(kind=8) mc [value-expr: masses.mc];
  static real(kind=8) ms [value-expr: masses.ms];
  static real(kind=8) md [value-expr: masses.md];
  static real(kind=8) mu [value-expr: masses.mu];
  static real(kind=8) mtau [value-expr: masses.mtau];
  static real(kind=8) mmu [value-expr: masses.mmu];
  static real(kind=8) me [value-expr: masses.me];
  static real(kind=8) mw [value-expr: masses.mw];
  static real(kind=8) swpar [value-expr: obliqe.swpar];
  static real(kind=8) spar [value-expr: obliqe.spar];
  static real(kind=8) tpar [value-expr: obliqe.tpar];
  static real(kind=8) upar [value-expr: obliqe.upar];
  static real(kind=8) brho [value-expr: obliqe.brho];
  static real(kind=8) bkappa [value-expr: obliqe.bkappa];
  static real(kind=8) rpar [value-expr: obliqe.rpar];
  static real(kind=8) zpar [value-expr: obliqe.zpar];
  static real(kind=8) delrwh [value-expr: obliqe.delrwh];
  static real(kind=8) delrzh [value-expr: obliqe.delrzh];
  static real(kind=8) delr [value-expr: obliqe.delr];
  static real(kind=8) rhohat [value-expr: obliqe.rhohat];
  static real(kind=8) rho2 [value-expr: obliqe.rho2];
  static real(kind=8) ratzw2 [value-expr: ratios.ratzw2];
  static real(kind=8) rathw2 [value-expr: ratios.rathw2];
  static real(kind=8) rathz2 [value-expr: ratios.rathz2];
  static real(kind=8) rattw2 [value-expr: ratios.rattw2];
  static real(kind=8) rattz2 [value-expr: ratios.rattz2];
  static real(kind=8) ratth2 [value-expr: ratios.ratth2];
  static real(kind=8) mzp [value-expr: zprime.mzp];
  static real(kind=8) mzp2 [value-expr: zprime.mzp2];
  static real(kind=8) mz02 [value-expr: zprime.mz02];
  static real(kind=8) sinth [value-expr: zprime.sinth];
  static real(kind=8) sinth2 [value-expr: zprime.sinth2];
  static real(kind=8) costh [value-expr: zprime.costh];
  static real(kind=8) costh2 [value-expr: zprime.costh2];
  static real(kind=8) ratg21 [value-expr: zprime.ratg21];
  static real(kind=8) rhoeff [value-expr: zprime.rhoeff];
  static real(kind=8) rhoezp [value-expr: zprime.rhoezp];
  static real(kind=8) rhozzp [value-expr: zprime.rhozzp];
  static real(kind=8) v2[10] [value-expr: zprime.v2];
  static real(kind=8) a2[10] [value-expr: zprime.a2];
  static real(kind=8) eps2_l[10] [value-expr: zprime.eps2_l];
  static real(kind=8) eps2_r[10] [value-expr: zprime.eps2_r];
  static real(kind=8) ratgrl [value-expr: zprime.ratgrl];
  real(kind=8) a1;
  real(kind=8) amatch;
  real(kind=8) ax;
  real(kind=8) mmatch;
  real(kind=8) __result_msrun;

  {
    static real(kind=8) C.3994 = 1.0e+0;

    a1 = alphas (&C.3994) / pi1;
  }
  amatch = 1.5277777777777779011358916250173933804035186767578125e-1;
  mmatch = 2.060185185185185174905342364581883884966373443603515625e-1;
  if (*x >= mc)
    {
      ax = alphas (&mc) / pi1;
      {
        real(kind=8) D.4000;
        real(kind=8) D.3999;
        real(kind=8) D.3998;
        static integer(kind=4) C.3997 = 3;

        D.3998 = ax;
        D.3999 = D.3998 * D.3998;
        D.4000 = ((amatch * D.3999 + 1.0e+0)) * ax;
        __result_msrun = mrun (&C.3997, &a1, &D.4000, &ms);
      }
      {
        real(kind=8) D.4003;
        real(kind=8) D.4002;

        D.4002 = ax;
        D.4003 = D.4002 * D.4002;
        __result_msrun = __result_msrun / ((mmatch * D.4003 + 1.0e+0));
      }
      a1 = ax;
      if (*x >= mb)
        {
          ax = alphas (&mb) / pi1;
          {
            real(kind=8) D.4008;
            real(kind=8) D.4007;
            real(kind=8) D.4006;
            static integer(kind=4) C.4005 = 4;

            D.4006 = ax;
            D.4007 = D.4006 * D.4006;
            D.4008 = ((amatch * D.4007 + 1.0e+0)) * ax;
            __result_msrun = mrun (&C.4005, &a1, &D.4008, &__result_msrun);
          }
          {
            real(kind=8) D.4010;
            real(kind=8) D.4009;

            D.4009 = ax;
            D.4010 = D.4009 * D.4009;
            __result_msrun = __result_msrun / ((mmatch * D.4010 + 1.0e+0));
          }
          a1 = ax;
          if (*x >= mt)
            {
              ax = alphas (&mt) / pi1;
              {
                real(kind=8) D.4015;
                real(kind=8) D.4014;
                real(kind=8) D.4013;
                static integer(kind=4) C.4012 = 5;

                D.4013 = ax;
                D.4014 = D.4013 * D.4013;
                D.4015 = ((amatch * D.4014 + 1.0e+0)) * ax;
                __result_msrun = mrun (&C.4012, &a1, &D.4015, &__result_msrun);
              }
              {
                real(kind=8) D.4017;
                real(kind=8) D.4016;

                D.4016 = ax;
                D.4017 = D.4016 * D.4016;
                __result_msrun = __result_msrun / ((mmatch * D.4017 + 1.0e+0));
              }
              a1 = ax;
              ax = alphas ((real(kind=8) *) x) / pi1;
              {
                static integer(kind=4) C.4018 = 6;

                __result_msrun = mrun (&C.4018, &a1, &ax, &__result_msrun);
              }
            }
          else
            {
              ax = alphas ((real(kind=8) *) x) / pi1;
              {
                static integer(kind=4) C.4019 = 5;

                __result_msrun = mrun (&C.4019, &a1, &ax, &__result_msrun);
              }
            }
          L.4:;
        }
      else
        {
          ax = alphas ((real(kind=8) *) x) / pi1;
          {
            static integer(kind=4) C.4020 = 4;

            __result_msrun = mrun (&C.4020, &a1, &ax, &__result_msrun);
          }
        }
      L.3:;
    }
  else
    {
      ax = alphas ((real(kind=8) *) x) / pi1;
      {
        static integer(kind=4) C.4021 = 3;

        __result_msrun = mrun (&C.4021, &a1, &ax, &ms);
      }
    }
  L.2:;
  return __result_msrun;
  return __result_msrun;
}


mcrun (real(kind=8) & restrict x)
{
  static real(kind=8) q[10] [value-expr: coupls.q];
  static real(kind=8) i3[10] [value-expr: coupls.i3];
  static real(kind=8) nc[10] [value-expr: coupls.nc];
  static real(kind=8) v[10] [value-expr: coupls.v];
  static real(kind=8) a[10] [value-expr: coupls.a];
  static real(kind=8) alphat [value-expr: coupls.alphat];
  static real(kind=8) sinhat [value-expr: coupls.sinhat];
  static real(kind=8) coshat [value-expr: coupls.coshat];
  static real(kind=8) rhonc [value-expr: coupls.rhonc];
  static real(kind=8) i3r[10] [value-expr: coupls.i3r];
  static real(kind=8) u1xr[10] [value-expr: coupls.u1xr];
  static real(kind=8) u1xl[10] [value-expr: coupls.u1xl];
  static real(kind=8) fitx [value-expr: fit221.fitx];
  static real(kind=8) fitsph [value-expr: fit221.fitsph];
  static real(kind=8) fitcph [value-expr: fit221.fitcph];
  static real(kind=8) fittph [value-expr: fit221.fittph];
  static real(kind=8) fits2b [value-expr: fit221.fits2b];
  static real(kind=8) kkss [value-expr: fit221.kkss];
  static real(kind=8) kkcc [value-expr: fit221.kkcc];
  static real(kind=8) kkem [value-expr: fit221.kkem];
  static real(kind=8) bestlnx [value-expr: fitbst.bestlnx];
  static real(kind=8) besttph [value-expr: fitbst.besttph];
  static real(kind=8) bests2b [value-expr: fitbst.bests2b];
  static logical(kind=4) flgfitx [value-expr: fitflg.flgfitx];
  static logical(kind=4) flgtph [value-expr: fitflg.flgtph];
  static logical(kind=4) flgs2b [value-expr: fitflg.flgs2b];
  static logical(kind=4) flfout [value-expr: fitflg.flfout];
  static integer(kind=4) modtype [value-expr: fitswtr.modtype];
  static integer(kind=4) plltr [value-expr: fitswtr.plltr];
  static integer(kind=4) prtpll[81] [value-expr: fitswtr.prtpll];
  static logical(kind=4) flagmr [value-expr: flags.flagmr];
  static integer(kind=4) flgblm [value-expr: flags.flgblm];
  static logical(kind=4) ffermi [value-expr: flags.ffermi];
  static logical(kind=4) fa2mt4 [value-expr: flags.fa2mt4];
  static logical(kind=4) fa2mt2 [value-expr: flags.fa2mt2];
  static logical(kind=4) fa2mt0 [value-expr: flags.fa2mt0];
  static logical(kind=4) fla2im [value-expr: flags.fla2im];
  static logical(kind=4) fasmt2 [value-expr: flags.fasmt2];
  static logical(kind=4) fasmt0 [value-expr: flags.fasmt0];
  static logical(kind=4) fas2mt [value-expr: flags.fas2mt];
  static logical(kind=4) flagmf [value-expr: flags.flagmf];
  static logical(kind=4) fpolew [value-expr: flags.fpolew];
  static logical(kind=4) flgech [value-expr: flags.flgech];
  static logical(kind=4) fobliq [value-expr: flags.fobliq];
  static logical(kind=4) f4lqcd [value-expr: flags.f4lqcd];
  static logical(kind=4) falas2 [value-expr: flags.falas2];
  static logical(kind=4) fbayes [value-expr: flags.fbayes];
  static integer(kind=4) flagzp [value-expr: flags.flagzp];
  static logical(kind=4) flagmh [value-expr: flags.flagmh];
  static logical(kind=4) flagmt [value-expr: flags.flagmt];
  static logical(kind=4) flagmc [value-expr: flags.flagmc];
  static logical(kind=4) flgrho [value-expr: flags.flgrho];
  static logical(kind=4) fkappa [value-expr: flags.fkappa];
  static logical(kind=4) flags [value-expr: flags.flags];
  static logical(kind=4) flagt [value-expr: flags.flagt];
  static logical(kind=4) fzprim [value-expr: flags.fzprim];
  static logical(kind=4) fsinth [value-expr: flags.fsinth];
  static logical(kind=4) fwrite [value-expr: flags.fwrite];
  static logical(kind=4) flprob [value-expr: flags.flprob];
  static logical(kind=4) fhiggs [value-expr: flags.fhiggs];
  static logical(kind=4) flagal [value-expr: flags.flagal];
  static logical(kind=4) fsplot [value-expr: flags.fsplot];
  static real(kind=8) alpha [value-expr: inputs.alpha];
  static real(kind=8) gf [value-expr: inputs.gf];
  static real(kind=8) alfas0 [value-expr: inputs.alfas0];
  static real(kind=8) asgrid[2001] [value-expr: inputs.asgrid];
  static real(kind=8) mu0 [value-expr: inputs.mu0];
  static real(kind=8) dahad3 [value-expr: inputs.dahad3];
  static real(kind=8) pol4hf [value-expr: inputs.pol4hf];
  static real(kind=8) an[8004] [value-expr: inputs.an];
  static real(kind=8) bn[8004] [value-expr: inputs.bn];
  static real(kind=8) pi1 [value-expr: inputs.pi1];
  static real(kind=8) pi2 [value-expr: inputs.pi2];
  static real(kind=8) zeta2 [value-expr: inputs.zeta2];
  static real(kind=8) zeta3 [value-expr: inputs.zeta3];
  static real(kind=8) zeta4 [value-expr: inputs.zeta4];
  static real(kind=8) zeta5 [value-expr: inputs.zeta5];
  static real(kind=8) zeta6 [value-expr: inputs.zeta6];
  static real(kind=8) zeta7 [value-expr: inputs.zeta7];
  static real(kind=8) prob [value-expr: limits.prob];
  static real(kind=8) mtp [value-expr: limits.mtp];
  static real(kind=8) sigma [value-expr: limits.sigma];
  static integer(kind=4) zprime [value-expr: limits.zprime];
  static real(kind=8) mw2 [value-expr: mass2.mw2];
  static real(kind=8) mz2 [value-expr: mass2.mz2];
  static real(kind=8) mt2 [value-expr: mass2.mt2];
  static real(kind=8) mh2 [value-expr: mass2.mh2];
  static real(kind=8) mz [value-expr: masses.mz];
  static real(kind=8) mh [value-expr: masses.mh];
  static real(kind=8) mt [value-expr: masses.mt];
  static real(kind=8) mb [value-expr: masses.mb];
  static real(kind=8) mc [value-expr: masses.mc];
  static real(kind=8) ms [value-expr: masses.ms];
  static real(kind=8) md [value-expr: masses.md];
  static real(kind=8) mu [value-expr: masses.mu];
  static real(kind=8) mtau [value-expr: masses.mtau];
  static real(kind=8) mmu [value-expr: masses.mmu];
  static real(kind=8) me [value-expr: masses.me];
  static real(kind=8) mw [value-expr: masses.mw];
  static real(kind=8) swpar [value-expr: obliqe.swpar];
  static real(kind=8) spar [value-expr: obliqe.spar];
  static real(kind=8) tpar [value-expr: obliqe.tpar];
  static real(kind=8) upar [value-expr: obliqe.upar];
  static real(kind=8) brho [value-expr: obliqe.brho];
  static real(kind=8) bkappa [value-expr: obliqe.bkappa];
  static real(kind=8) rpar [value-expr: obliqe.rpar];
  static real(kind=8) zpar [value-expr: obliqe.zpar];
  static real(kind=8) delrwh [value-expr: obliqe.delrwh];
  static real(kind=8) delrzh [value-expr: obliqe.delrzh];
  static real(kind=8) delr [value-expr: obliqe.delr];
  static real(kind=8) rhohat [value-expr: obliqe.rhohat];
  static real(kind=8) rho2 [value-expr: obliqe.rho2];
  static real(kind=8) ratzw2 [value-expr: ratios.ratzw2];
  static real(kind=8) rathw2 [value-expr: ratios.rathw2];
  static real(kind=8) rathz2 [value-expr: ratios.rathz2];
  static real(kind=8) rattw2 [value-expr: ratios.rattw2];
  static real(kind=8) rattz2 [value-expr: ratios.rattz2];
  static real(kind=8) ratth2 [value-expr: ratios.ratth2];
  static real(kind=8) mzp [value-expr: zprime.mzp];
  static real(kind=8) mzp2 [value-expr: zprime.mzp2];
  static real(kind=8) mz02 [value-expr: zprime.mz02];
  static real(kind=8) sinth [value-expr: zprime.sinth];
  static real(kind=8) sinth2 [value-expr: zprime.sinth2];
  static real(kind=8) costh [value-expr: zprime.costh];
  static real(kind=8) costh2 [value-expr: zprime.costh2];
  static real(kind=8) ratg21 [value-expr: zprime.ratg21];
  static real(kind=8) rhoeff [value-expr: zprime.rhoeff];
  static real(kind=8) rhoezp [value-expr: zprime.rhoezp];
  static real(kind=8) rhozzp [value-expr: zprime.rhozzp];
  static real(kind=8) v2[10] [value-expr: zprime.v2];
  static real(kind=8) a2[10] [value-expr: zprime.a2];
  static real(kind=8) eps2_l[10] [value-expr: zprime.eps2_l];
  static real(kind=8) eps2_r[10] [value-expr: zprime.eps2_r];
  static real(kind=8) ratgrl [value-expr: zprime.ratgrl];
  real(kind=8) a1;
  real(kind=8) amatch;
  real(kind=8) ax;
  real(kind=8) mmatch;
  real(kind=8) __result_mcrun;

  a1 = alphas (&mc) / pi1;
  amatch = 1.5277777777777779011358916250173933804035186767578125e-1;
  mmatch = 2.060185185185185174905342364581883884966373443603515625e-1;
  if (*x >= mb)
    {
      ax = alphas (&mb) / pi1;
      {
        real(kind=8) D.4318;
        real(kind=8) D.4317;
        real(kind=8) D.4316;
        static integer(kind=4) C.4315 = 4;

        D.4316 = ax;
        D.4317 = D.4316 * D.4316;
        D.4318 = ((amatch * D.4317 + 1.0e+0)) * ax;
        __result_mcrun = mrun (&C.4315, &a1, &D.4318, &mc);
      }
      {
        real(kind=8) D.4321;
        real(kind=8) D.4320;

        D.4320 = ax;
        D.4321 = D.4320 * D.4320;
        __result_mcrun = __result_mcrun / ((mmatch * D.4321 + 1.0e+0));
      }
      a1 = ax;
      if (*x >= mt)
        {
          ax = alphas (&mt) / pi1;
          {
            real(kind=8) D.4326;
            real(kind=8) D.4325;
            real(kind=8) D.4324;
            static integer(kind=4) C.4323 = 5;

            D.4324 = ax;
            D.4325 = D.4324 * D.4324;
            D.4326 = ((amatch * D.4325 + 1.0e+0)) * ax;
            __result_mcrun = mrun (&C.4323, &a1, &D.4326, &__result_mcrun);
          }
          {
            real(kind=8) D.4328;
            real(kind=8) D.4327;

            D.4327 = ax;
            D.4328 = D.4327 * D.4327;
            __result_mcrun = __result_mcrun / ((mmatch * D.4328 + 1.0e+0));
          }
          a1 = ax;
          ax = alphas ((real(kind=8) *) x) / pi1;
          {
            static integer(kind=4) C.4329 = 6;

            __result_mcrun = mrun (&C.4329, &a1, &ax, &__result_mcrun);
          }
        }
      else
        {
          ax = alphas ((real(kind=8) *) x) / pi1;
          {
            static integer(kind=4) C.4330 = 5;

            __result_mcrun = mrun (&C.4330, &a1, &ax, &__result_mcrun);
          }
        }
      L.6:;
    }
  else
    {
      ax = alphas ((real(kind=8) *) x) / pi1;
      if (*x < mc)
        {
          {
            real(kind=8) D.4333;
            real(kind=8) D.4332;

            D.4332 = a1;
            D.4333 = D.4332 * D.4332;
            __result_mcrun = ((mmatch * D.4333 + 1.0e+0)) * mc;
          }
          {
            real(kind=8) D.4337;
            real(kind=8) D.4336;
            real(kind=8) D.4335;
            static integer(kind=4) C.4334 = 3;

            D.4335 = a1;
            D.4336 = D.4335 * D.4335;
            D.4337 = ((amatch * D.4336 + 1.0e+0)) * a1;
            __result_mcrun = mrun (&C.4334, &D.4337, &ax, &__result_mcrun);
          }
        }
      else
        {
          {
            static integer(kind=4) C.4338 = 4;

            __result_mcrun = mrun (&C.4338, &a1, &ax, &mc);
          }
        }
      L.7:;
    }
  L.5:;
  return __result_mcrun;
  return __result_mcrun;
}


mbrun (real(kind=8) & restrict x)
{
  static real(kind=8) q[10] [value-expr: coupls.q];
  static real(kind=8) i3[10] [value-expr: coupls.i3];
  static real(kind=8) nc[10] [value-expr: coupls.nc];
  static real(kind=8) v[10] [value-expr: coupls.v];
  static real(kind=8) a[10] [value-expr: coupls.a];
  static real(kind=8) alphat [value-expr: coupls.alphat];
  static real(kind=8) sinhat [value-expr: coupls.sinhat];
  static real(kind=8) coshat [value-expr: coupls.coshat];
  static real(kind=8) rhonc [value-expr: coupls.rhonc];
  static real(kind=8) i3r[10] [value-expr: coupls.i3r];
  static real(kind=8) u1xr[10] [value-expr: coupls.u1xr];
  static real(kind=8) u1xl[10] [value-expr: coupls.u1xl];
  static real(kind=8) fitx [value-expr: fit221.fitx];
  static real(kind=8) fitsph [value-expr: fit221.fitsph];
  static real(kind=8) fitcph [value-expr: fit221.fitcph];
  static real(kind=8) fittph [value-expr: fit221.fittph];
  static real(kind=8) fits2b [value-expr: fit221.fits2b];
  static real(kind=8) kkss [value-expr: fit221.kkss];
  static real(kind=8) kkcc [value-expr: fit221.kkcc];
  static real(kind=8) kkem [value-expr: fit221.kkem];
  static real(kind=8) bestlnx [value-expr: fitbst.bestlnx];
  static real(kind=8) besttph [value-expr: fitbst.besttph];
  static real(kind=8) bests2b [value-expr: fitbst.bests2b];
  static logical(kind=4) flgfitx [value-expr: fitflg.flgfitx];
  static logical(kind=4) flgtph [value-expr: fitflg.flgtph];
  static logical(kind=4) flgs2b [value-expr: fitflg.flgs2b];
  static logical(kind=4) flfout [value-expr: fitflg.flfout];
  static integer(kind=4) modtype [value-expr: fitswtr.modtype];
  static integer(kind=4) plltr [value-expr: fitswtr.plltr];
  static integer(kind=4) prtpll[81] [value-expr: fitswtr.prtpll];
  static logical(kind=4) flagmr [value-expr: flags.flagmr];
  static integer(kind=4) flgblm [value-expr: flags.flgblm];
  static logical(kind=4) ffermi [value-expr: flags.ffermi];
  static logical(kind=4) fa2mt4 [value-expr: flags.fa2mt4];
  static logical(kind=4) fa2mt2 [value-expr: flags.fa2mt2];
  static logical(kind=4) fa2mt0 [value-expr: flags.fa2mt0];
  static logical(kind=4) fla2im [value-expr: flags.fla2im];
  static logical(kind=4) fasmt2 [value-expr: flags.fasmt2];
  static logical(kind=4) fasmt0 [value-expr: flags.fasmt0];
  static logical(kind=4) fas2mt [value-expr: flags.fas2mt];
  static logical(kind=4) flagmf [value-expr: flags.flagmf];
  static logical(kind=4) fpolew [value-expr: flags.fpolew];
  static logical(kind=4) flgech [value-expr: flags.flgech];
  static logical(kind=4) fobliq [value-expr: flags.fobliq];
  static logical(kind=4) f4lqcd [value-expr: flags.f4lqcd];
  static logical(kind=4) falas2 [value-expr: flags.falas2];
  static logical(kind=4) fbayes [value-expr: flags.fbayes];
  static integer(kind=4) flagzp [value-expr: flags.flagzp];
  static logical(kind=4) flagmh [value-expr: flags.flagmh];
  static logical(kind=4) flagmt [value-expr: flags.flagmt];
  static logical(kind=4) flagmc [value-expr: flags.flagmc];
  static logical(kind=4) flgrho [value-expr: flags.flgrho];
  static logical(kind=4) fkappa [value-expr: flags.fkappa];
  static logical(kind=4) flags [value-expr: flags.flags];
  static logical(kind=4) flagt [value-expr: flags.flagt];
  static logical(kind=4) fzprim [value-expr: flags.fzprim];
  static logical(kind=4) fsinth [value-expr: flags.fsinth];
  static logical(kind=4) fwrite [value-expr: flags.fwrite];
  static logical(kind=4) flprob [value-expr: flags.flprob];
  static logical(kind=4) fhiggs [value-expr: flags.fhiggs];
  static logical(kind=4) flagal [value-expr: flags.flagal];
  static logical(kind=4) fsplot [value-expr: flags.fsplot];
  static real(kind=8) alpha [value-expr: inputs.alpha];
  static real(kind=8) gf [value-expr: inputs.gf];
  static real(kind=8) alfas0 [value-expr: inputs.alfas0];
  static real(kind=8) asgrid[2001] [value-expr: inputs.asgrid];
  static real(kind=8) mu0 [value-expr: inputs.mu0];
  static real(kind=8) dahad3 [value-expr: inputs.dahad3];
  static real(kind=8) pol4hf [value-expr: inputs.pol4hf];
  static real(kind=8) an[8004] [value-expr: inputs.an];
  static real(kind=8) bn[8004] [value-expr: inputs.bn];
  static real(kind=8) pi1 [value-expr: inputs.pi1];
  static real(kind=8) pi2 [value-expr: inputs.pi2];
  static real(kind=8) zeta2 [value-expr: inputs.zeta2];
  static real(kind=8) zeta3 [value-expr: inputs.zeta3];
  static real(kind=8) zeta4 [value-expr: inputs.zeta4];
  static real(kind=8) zeta5 [value-expr: inputs.zeta5];
  static real(kind=8) zeta6 [value-expr: inputs.zeta6];
  static real(kind=8) zeta7 [value-expr: inputs.zeta7];
  static real(kind=8) prob [value-expr: limits.prob];
  static real(kind=8) mtp [value-expr: limits.mtp];
  static real(kind=8) sigma [value-expr: limits.sigma];
  static integer(kind=4) zprime [value-expr: limits.zprime];
  static real(kind=8) mw2 [value-expr: mass2.mw2];
  static real(kind=8) mz2 [value-expr: mass2.mz2];
  static real(kind=8) mt2 [value-expr: mass2.mt2];
  static real(kind=8) mh2 [value-expr: mass2.mh2];
  static real(kind=8) mz [value-expr: masses.mz];
  static real(kind=8) mh [value-expr: masses.mh];
  static real(kind=8) mt [value-expr: masses.mt];
  static real(kind=8) mb [value-expr: masses.mb];
  static real(kind=8) mc [value-expr: masses.mc];
  static real(kind=8) ms [value-expr: masses.ms];
  static real(kind=8) md [value-expr: masses.md];
  static real(kind=8) mu [value-expr: masses.mu];
  static real(kind=8) mtau [value-expr: masses.mtau];
  static real(kind=8) mmu [value-expr: masses.mmu];
  static real(kind=8) me [value-expr: masses.me];
  static real(kind=8) mw [value-expr: masses.mw];
  static real(kind=8) swpar [value-expr: obliqe.swpar];
  static real(kind=8) spar [value-expr: obliqe.spar];
  static real(kind=8) tpar [value-expr: obliqe.tpar];
  static real(kind=8) upar [value-expr: obliqe.upar];
  static real(kind=8) brho [value-expr: obliqe.brho];
  static real(kind=8) bkappa [value-expr: obliqe.bkappa];
  static real(kind=8) rpar [value-expr: obliqe.rpar];
  static real(kind=8) zpar [value-expr: obliqe.zpar];
  static real(kind=8) delrwh [value-expr: obliqe.delrwh];
  static real(kind=8) delrzh [value-expr: obliqe.delrzh];
  static real(kind=8) delr [value-expr: obliqe.delr];
  static real(kind=8) rhohat [value-expr: obliqe.rhohat];
  static real(kind=8) rho2 [value-expr: obliqe.rho2];
  static real(kind=8) ratzw2 [value-expr: ratios.ratzw2];
  static real(kind=8) rathw2 [value-expr: ratios.rathw2];
  static real(kind=8) rathz2 [value-expr: ratios.rathz2];
  static real(kind=8) rattw2 [value-expr: ratios.rattw2];
  static real(kind=8) rattz2 [value-expr: ratios.rattz2];
  static real(kind=8) ratth2 [value-expr: ratios.ratth2];
  static real(kind=8) mzp [value-expr: zprime.mzp];
  static real(kind=8) mzp2 [value-expr: zprime.mzp2];
  static real(kind=8) mz02 [value-expr: zprime.mz02];
  static real(kind=8) sinth [value-expr: zprime.sinth];
  static real(kind=8) sinth2 [value-expr: zprime.sinth2];
  static real(kind=8) costh [value-expr: zprime.costh];
  static real(kind=8) costh2 [value-expr: zprime.costh2];
  static real(kind=8) ratg21 [value-expr: zprime.ratg21];
  static real(kind=8) rhoeff [value-expr: zprime.rhoeff];
  static real(kind=8) rhoezp [value-expr: zprime.rhoezp];
  static real(kind=8) rhozzp [value-expr: zprime.rhozzp];
  static real(kind=8) v2[10] [value-expr: zprime.v2];
  static real(kind=8) a2[10] [value-expr: zprime.a2];
  static real(kind=8) eps2_l[10] [value-expr: zprime.eps2_l];
  static real(kind=8) eps2_r[10] [value-expr: zprime.eps2_r];
  static real(kind=8) ratgrl [value-expr: zprime.ratgrl];
  real(kind=8) a1;
  real(kind=8) amatch;
  real(kind=8) ax;
  real(kind=8) mmatch;
  real(kind=8) __result_mbrun;

  a1 = alphas (&mb) / pi1;
  amatch = 1.5277777777777779011358916250173933804035186767578125e-1;
  mmatch = 2.060185185185185174905342364581883884966373443603515625e-1;
  if (*x >= mb)
    {
      if (*x >= mt)
        {
          ax = alphas (&mt) / pi1;
          {
            real(kind=8) D.4636;
            real(kind=8) D.4635;
            real(kind=8) D.4634;
            static integer(kind=4) C.4633 = 5;

            D.4634 = ax;
            D.4635 = D.4634 * D.4634;
            D.4636 = ((amatch * D.4635 + 1.0e+0)) * ax;
            __result_mbrun = mrun (&C.4633, &a1, &D.4636, &mb);
          }
          {
            real(kind=8) D.4639;
            real(kind=8) D.4638;

            D.4638 = ax;
            D.4639 = D.4638 * D.4638;
            __result_mbrun = __result_mbrun / ((mmatch * D.4639 + 1.0e+0));
          }
          a1 = ax;
          ax = alphas ((real(kind=8) *) x) / pi1;
          {
            static integer(kind=4) C.4640 = 6;

            __result_mbrun = mrun (&C.4640, &a1, &ax, &__result_mbrun);
          }
        }
      else
        {
          ax = alphas ((real(kind=8) *) x) / pi1;
          {
            static integer(kind=4) C.4641 = 5;

            __result_mbrun = mrun (&C.4641, &a1, &ax, &mb);
          }
        }
      L.9:;
    }
  else
    {
      {
        real(kind=8) D.4643;
        real(kind=8) D.4642;

        D.4642 = a1;
        D.4643 = D.4642 * D.4642;
        __result_mbrun = ((mmatch * D.4643 + 1.0e+0)) * mb;
      }
      if (*x < mc)
        {
          ax = alphas (&mc) / pi1;
          {
            real(kind=8) D.4648;
            real(kind=8) D.4647;
            real(kind=8) D.4646;
            static integer(kind=4) C.4645 = 4;

            D.4646 = a1;
            D.4647 = D.4646 * D.4646;
            D.4648 = ((amatch * D.4647 + 1.0e+0)) * a1;
            __result_mbrun = mrun (&C.4645, &D.4648, &ax, &__result_mbrun);
          }
          a1 = ax;
          ax = alphas ((real(kind=8) *) x) / pi1;
          {
            real(kind=8) D.4650;
            real(kind=8) D.4649;

            D.4649 = a1;
            D.4650 = D.4649 * D.4649;
            __result_mbrun = ((mmatch * D.4650 + 1.0e+0)) * __result_mbrun;
          }
          {
            real(kind=8) D.4654;
            real(kind=8) D.4653;
            real(kind=8) D.4652;
            static integer(kind=4) C.4651 = 3;

            D.4652 = a1;
            D.4653 = D.4652 * D.4652;
            D.4654 = ((amatch * D.4653 + 1.0e+0)) * a1;
            __result_mbrun = mrun (&C.4651, &D.4654, &ax, &__result_mbrun);
          }
        }
      else
        {
          ax = alphas ((real(kind=8) *) x) / pi1;
          {
            real(kind=8) D.4658;
            real(kind=8) D.4657;
            real(kind=8) D.4656;
            static integer(kind=4) C.4655 = 4;

            D.4656 = a1;
            D.4657 = D.4656 * D.4656;
            D.4658 = ((amatch * D.4657 + 1.0e+0)) * a1;
            __result_mbrun = mrun (&C.4655, &D.4658, &ax, &__result_mbrun);
          }
        }
      L.10:;
    }
  L.8:;
  return __result_mbrun;
  return __result_mbrun;
}


polemasses (integer(kind=4) & restrict nf, real(kind=8) & restrict mpole)
{
  static real(kind=8) q[10] [value-expr: coupls.q];
  static real(kind=8) i3[10] [value-expr: coupls.i3];
  static real(kind=8) nc[10] [value-expr: coupls.nc];
  static real(kind=8) v[10] [value-expr: coupls.v];
  static real(kind=8) a[10] [value-expr: coupls.a];
  static real(kind=8) alphat [value-expr: coupls.alphat];
  static real(kind=8) sinhat [value-expr: coupls.sinhat];
  static real(kind=8) coshat [value-expr: coupls.coshat];
  static real(kind=8) rhonc [value-expr: coupls.rhonc];
  static real(kind=8) i3r[10] [value-expr: coupls.i3r];
  static real(kind=8) u1xr[10] [value-expr: coupls.u1xr];
  static real(kind=8) u1xl[10] [value-expr: coupls.u1xl];
  static real(kind=8) fitx [value-expr: fit221.fitx];
  static real(kind=8) fitsph [value-expr: fit221.fitsph];
  static real(kind=8) fitcph [value-expr: fit221.fitcph];
  static real(kind=8) fittph [value-expr: fit221.fittph];
  static real(kind=8) fits2b [value-expr: fit221.fits2b];
  static real(kind=8) kkss [value-expr: fit221.kkss];
  static real(kind=8) kkcc [value-expr: fit221.kkcc];
  static real(kind=8) kkem [value-expr: fit221.kkem];
  static real(kind=8) bestlnx [value-expr: fitbst.bestlnx];
  static real(kind=8) besttph [value-expr: fitbst.besttph];
  static real(kind=8) bests2b [value-expr: fitbst.bests2b];
  static logical(kind=4) flgfitx [value-expr: fitflg.flgfitx];
  static logical(kind=4) flgtph [value-expr: fitflg.flgtph];
  static logical(kind=4) flgs2b [value-expr: fitflg.flgs2b];
  static logical(kind=4) flfout [value-expr: fitflg.flfout];
  static integer(kind=4) modtype [value-expr: fitswtr.modtype];
  static integer(kind=4) plltr [value-expr: fitswtr.plltr];
  static integer(kind=4) prtpll[81] [value-expr: fitswtr.prtpll];
  static logical(kind=4) flagmr [value-expr: flags.flagmr];
  static integer(kind=4) flgblm [value-expr: flags.flgblm];
  static logical(kind=4) ffermi [value-expr: flags.ffermi];
  static logical(kind=4) fa2mt4 [value-expr: flags.fa2mt4];
  static logical(kind=4) fa2mt2 [value-expr: flags.fa2mt2];
  static logical(kind=4) fa2mt0 [value-expr: flags.fa2mt0];
  static logical(kind=4) fla2im [value-expr: flags.fla2im];
  static logical(kind=4) fasmt2 [value-expr: flags.fasmt2];
  static logical(kind=4) fasmt0 [value-expr: flags.fasmt0];
  static logical(kind=4) fas2mt [value-expr: flags.fas2mt];
  static logical(kind=4) flagmf [value-expr: flags.flagmf];
  static logical(kind=4) fpolew [value-expr: flags.fpolew];
  static logical(kind=4) flgech [value-expr: flags.flgech];
  static logical(kind=4) fobliq [value-expr: flags.fobliq];
  static logical(kind=4) f4lqcd [value-expr: flags.f4lqcd];
  static logical(kind=4) falas2 [value-expr: flags.falas2];
  static logical(kind=4) fbayes [value-expr: flags.fbayes];
  static integer(kind=4) flagzp [value-expr: flags.flagzp];
  static logical(kind=4) flagmh [value-expr: flags.flagmh];
  static logical(kind=4) flagmt [value-expr: flags.flagmt];
  static logical(kind=4) flagmc [value-expr: flags.flagmc];
  static logical(kind=4) flgrho [value-expr: flags.flgrho];
  static logical(kind=4) fkappa [value-expr: flags.fkappa];
  static logical(kind=4) flags [value-expr: flags.flags];
  static logical(kind=4) flagt [value-expr: flags.flagt];
  static logical(kind=4) fzprim [value-expr: flags.fzprim];
  static logical(kind=4) fsinth [value-expr: flags.fsinth];
  static logical(kind=4) fwrite [value-expr: flags.fwrite];
  static logical(kind=4) flprob [value-expr: flags.flprob];
  static logical(kind=4) fhiggs [value-expr: flags.fhiggs];
  static logical(kind=4) flagal [value-expr: flags.flagal];
  static logical(kind=4) fsplot [value-expr: flags.fsplot];
  static real(kind=8) alpha [value-expr: inputs.alpha];
  static real(kind=8) gf [value-expr: inputs.gf];
  static real(kind=8) alfas0 [value-expr: inputs.alfas0];
  static real(kind=8) asgrid[2001] [value-expr: inputs.asgrid];
  static real(kind=8) mu0 [value-expr: inputs.mu0];
  static real(kind=8) dahad3 [value-expr: inputs.dahad3];
  static real(kind=8) pol4hf [value-expr: inputs.pol4hf];
  static real(kind=8) an[8004] [value-expr: inputs.an];
  static real(kind=8) bn[8004] [value-expr: inputs.bn];
  static real(kind=8) pi1 [value-expr: inputs.pi1];
  static real(kind=8) pi2 [value-expr: inputs.pi2];
  static real(kind=8) zeta2 [value-expr: inputs.zeta2];
  static real(kind=8) zeta3 [value-expr: inputs.zeta3];
  static real(kind=8) zeta4 [value-expr: inputs.zeta4];
  static real(kind=8) zeta5 [value-expr: inputs.zeta5];
  static real(kind=8) zeta6 [value-expr: inputs.zeta6];
  static real(kind=8) zeta7 [value-expr: inputs.zeta7];
  static real(kind=8) prob [value-expr: limits.prob];
  static real(kind=8) mtp [value-expr: limits.mtp];
  static real(kind=8) sigma [value-expr: limits.sigma];
  static integer(kind=4) zprime [value-expr: limits.zprime];
  static real(kind=8) mw2 [value-expr: mass2.mw2];
  static real(kind=8) mz2 [value-expr: mass2.mz2];
  static real(kind=8) mt2 [value-expr: mass2.mt2];
  static real(kind=8) mh2 [value-expr: mass2.mh2];
  static real(kind=8) mz [value-expr: masses.mz];
  static real(kind=8) mh [value-expr: masses.mh];
  static real(kind=8) mt [value-expr: masses.mt];
  static real(kind=8) mb [value-expr: masses.mb];
  static real(kind=8) mc [value-expr: masses.mc];
  static real(kind=8) ms [value-expr: masses.ms];
  static real(kind=8) md [value-expr: masses.md];
  static real(kind=8) mu [value-expr: masses.mu];
  static real(kind=8) mtau [value-expr: masses.mtau];
  static real(kind=8) mmu [value-expr: masses.mmu];
  static real(kind=8) me [value-expr: masses.me];
  static real(kind=8) mw [value-expr: masses.mw];
  static real(kind=8) swpar [value-expr: obliqe.swpar];
  static real(kind=8) spar [value-expr: obliqe.spar];
  static real(kind=8) tpar [value-expr: obliqe.tpar];
  static real(kind=8) upar [value-expr: obliqe.upar];
  static real(kind=8) brho [value-expr: obliqe.brho];
  static real(kind=8) bkappa [value-expr: obliqe.bkappa];
  static real(kind=8) rpar [value-expr: obliqe.rpar];
  static real(kind=8) zpar [value-expr: obliqe.zpar];
  static real(kind=8) delrwh [value-expr: obliqe.delrwh];
  static real(kind=8) delrzh [value-expr: obliqe.delrzh];
  static real(kind=8) delr [value-expr: obliqe.delr];
  static real(kind=8) rhohat [value-expr: obliqe.rhohat];
  static real(kind=8) rho2 [value-expr: obliqe.rho2];
  static real(kind=8) ratzw2 [value-expr: ratios.ratzw2];
  static real(kind=8) rathw2 [value-expr: ratios.rathw2];
  static real(kind=8) rathz2 [value-expr: ratios.rathz2];
  static real(kind=8) rattw2 [value-expr: ratios.rattw2];
  static real(kind=8) rattz2 [value-expr: ratios.rattz2];
  static real(kind=8) ratth2 [value-expr: ratios.ratth2];
  static real(kind=8) mzp [value-expr: zprime.mzp];
  static real(kind=8) mzp2 [value-expr: zprime.mzp2];
  static real(kind=8) mz02 [value-expr: zprime.mz02];
  static real(kind=8) sinth [value-expr: zprime.sinth];
  static real(kind=8) sinth2 [value-expr: zprime.sinth2];
  static real(kind=8) costh [value-expr: zprime.costh];
  static real(kind=8) costh2 [value-expr: zprime.costh2];
  static real(kind=8) ratg21 [value-expr: zprime.ratg21];
  static real(kind=8) rhoeff [value-expr: zprime.rhoeff];
  static real(kind=8) rhoezp [value-expr: zprime.rhoezp];
  static real(kind=8) rhozzp [value-expr: zprime.rhozzp];
  static real(kind=8) v2[10] [value-expr: zprime.v2];
  static real(kind=8) a2[10] [value-expr: zprime.a2];
  static real(kind=8) eps2_l[10] [value-expr: zprime.eps2_l];
  static real(kind=8) eps2_r[10] [value-expr: zprime.eps2_r];
  static real(kind=8) ratgrl [value-expr: zprime.ratgrl];
  real(kind=8) ablm;
  real(kind=8) as;
  real(kind=8) bblm;
  real(kind=8) cblm;
  real(kind=8) ln2;
  real(kind=8) ln22;
  real(kind=8) ln24;
  real(kind=8) mublm;
  real(kind=8) ratbt;
  real(kind=8) ratcb;
  real(kind=8) ratct;
  real(kind=8) ratsb;
  real(kind=8) ratsc;
  real(kind=8) ratst;
  real(kind=8) x;

  ln2 = 6.9314718055994528622676398299518041312694549560546875e-1;
  ln22 = ln2 * ln2;
  ln24 = ln22 * ln22;
  if ((unsigned int) *nf + 4294967292 > 2)
    {
      {
        struct __st_parameter_dt dt_parm.0;

        dt_parm.0.common.filename = &"../src/F/core/masses.f"[1]{lb: 1 sz: 1};
        dt_parm.0.common.line = 27;
        dt_parm.0.common.flags = 128;
        dt_parm.0.common.unit = 6;
        _gfortran_st_write (&dt_parm.0);
        _gfortran_transfer_character_write (&dt_parm.0, &"Note: pole mass is not defined for this quark flavor!"[1]{lb: 1 sz: 1}, 53);
        _gfortran_st_write_done (&dt_parm.0);
      }
      {
        struct __st_parameter_dt dt_parm.1;

        dt_parm.1.common.filename = &"../src/F/core/masses.f"[1]{lb: 1 sz: 1};
        dt_parm.1.common.line = 28;
        dt_parm.1.common.flags = 128;
        dt_parm.1.common.unit = 6;
        _gfortran_st_write (&dt_parm.1);
        _gfortran_transfer_character_write (&dt_parm.1, &"STOP."[1]{lb: 1 sz: 1}, 5);
        _gfortran_st_write_done (&dt_parm.1);
      }
      _gfortran_stop_string (0B, 0);
    }
  L.11:;
  if (*nf == 4)
    {
      as = alphas (&mc) / pi1;
      ratsc = msrun (&mc) / mc;
      {
        real(kind=8) D.4972;
        real(kind=8) D.4971;
        real(kind=8) D.4970;
        real(kind=8) x.2;
        real(kind=8) D.4968;
        real(kind=8) D.4967;

        D.4967 = as;
        D.4968 = D.4967 * D.4967;
        x.2 = ratsc;
        D.4970 = x.2;
        D.4971 = D.4970 * D.4970;
        D.4972 = as;
        *mpole = (((((as * 4.0e+0) / 3.0e+0 + 1.0e+0) + (D.4968 / 3.0e+0) * ((((2.434375e+1 - zeta3 * 5.0e-1) + ((ln2 * 2.0e+0 + 3.0e+0)) * zeta2) + ((((zeta2 * 7.5e-1 - x.2 * 5.96999999999999975131004248396493494510650634765625e-1) + D.4971 * 2.300000000000000099920072216264088638126850128173828125e-1)) * x.2) * 4.0e+0))) + (__builtin_powi (D.4972, 3) / 2.7e+1) * ((((((((1.673746817129629562259651720523834228515625e+3 - ((zeta3 * 1.453e+3 - zeta5 * 1.975e+3)) * 1.25e-1) + (zeta2 * 4.88501e+5) / 2.4e+2) + (zeta4 * 1.85e+2) * 6.25e-2) - ((zeta2 * 4.317e+3) * zeta3) * 1.25e-1) - (((ln2 * 3.2e+1 + 6.41e+2)) * ln2) * zeta2) - (ln24 * 4.9e+1) / 6.0e+0) - pol4hf * 1.96e+2)))) * mc;
      }
    }
  else
    {
      if (*nf == 5)
        {
          as = alphas (&mb) / pi1;
          ratcb = mcrun (&mb) / mb;
          ratsb = msrun (&mb) / mb;
          {
            real(kind=8) D.4982;
            real(kind=8) D.4981;
            real(kind=8) D.4980;
            real(kind=8) x.4;
            real(kind=8) D.4978;
            real(kind=8) D.4977;
            real(kind=8) x.3;
            real(kind=8) D.4975;
            real(kind=8) D.4974;

            D.4974 = as;
            D.4975 = D.4974 * D.4974;
            x.3 = ratcb;
            D.4977 = x.3;
            D.4978 = D.4977 * D.4977;
            x.4 = ratsb;
            D.4980 = x.4;
            D.4981 = D.4980 * D.4980;
            D.4982 = as;
            *mpole = (((((as * 4.0e+0) / 3.0e+0 + 1.0e+0) + (D.4975 / 3.0e+0) * ((((2.2864583333333332149095440399833023548126220703125e+1 - zeta3 * 5.0e-1) + ((ln2 * 2.0e+0 + 2.0e+0)) * zeta2) + (((((zeta2 * 7.5e-1 - x.3 * 5.96999999999999975131004248396493494510650634765625e-1) + D.4978 * 2.300000000000000099920072216264088638126850128173828125e-1)) * x.3 + (((zeta2 * 7.5e-1 - x.4 * 5.96999999999999975131004248396493494510650634765625e-1) + D.4981 * 2.300000000000000099920072216264088638126850128173828125e-1)) * x.4)) * 4.0e+0))) + (__builtin_powi (D.4982, 3) / 2.7e+1) * (((((((((1.424469039351851961328065954148769378662109375e+3 - (zeta3 * 4.95e+2) * 5.0e-1) + (zeta5 * 1.975e+3) * 1.25e-1) + (zeta2 * 4.39961e+5) / 2.4e+2) + (zeta4 * 1.405e+3) * 6.25e-2) - ((zeta2 * 4.317e+3) * zeta3) * 1.25e-1) - (((ln2 * 2.8e+1 + 6.63e+2)) * ln2) * zeta2) - (ln24 * 4.7e+1) / 6.0e+0) - pol4hf * 1.88e+2)))) * mb;
          }
        }
      else
        {
          ratbt = mbrun (&mt) / mt;
          ratct = mcrun (&mt) / mt;
          ratst = msrun (&mt) / mt;
          if (flgblm == 0)
            {
              as = alphas (&mt) / pi1;
              {
                real(kind=8) D.4995;
                real(kind=8) D.4994;
                real(kind=8) D.4993;
                real(kind=8) x.7;
                real(kind=8) D.4991;
                real(kind=8) D.4990;
                real(kind=8) x.6;
                real(kind=8) D.4988;
                real(kind=8) D.4987;
                real(kind=8) x.5;
                real(kind=8) D.4985;
                real(kind=8) D.4984;

                D.4984 = as;
                D.4985 = D.4984 * D.4984;
                x.5 = ratbt;
                D.4987 = x.5;
                D.4988 = D.4987 * D.4987;
                x.6 = ratct;
                D.4990 = x.6;
                D.4991 = D.4990 * D.4990;
                x.7 = ratst;
                D.4993 = x.7;
                D.4994 = D.4993 * D.4993;
                D.4995 = as;
                *mpole = (((((as * 4.0e+0) / 3.0e+0 + 1.0e+0) + (D.4985 / 6.0e+0) * ((((((ln2 * 4.0e+0 + 2.0e+0)) * zeta2 + 4.277083333333333570180911920033395290374755859375e+1) - zeta3) + ((((((zeta2 * 7.5e-1 - x.5 * 5.96999999999999975131004248396493494510650634765625e-1) + D.4988 * 2.300000000000000099920072216264088638126850128173828125e-1)) * x.5 + (((zeta2 * 7.5e-1 - x.6 * 5.96999999999999975131004248396493494510650634765625e-1) + D.4991 * 2.300000000000000099920072216264088638126850128173828125e-1)) * x.6) + (((zeta2 * 7.5e-1 - x.7 * 5.96999999999999975131004248396493494510650634765625e-1) + D.4994 * 2.300000000000000099920072216264088638126850128173828125e-1)) * x.7)) * 8.0e+0))) + (__builtin_powi (D.4995, 3) / 2.7e+1) * (((((((((1.180638020833333257542108185589313507080078125e+3 - (zeta3 * 2.451e+3) * 1.25e-1) + (zeta5 * 1.975e+3) * 1.25e-1) + (zeta2 * 3.94541e+5) / 2.4e+2) + (zeta4 * 2.625e+3) * 6.25e-2) - ((zeta2 * 4.317e+3) * zeta3) * 1.25e-1) - (((ln2 * 2.4e+1 + 6.85e+2)) * ln2) * zeta2) - (ln24 * 1.5e+1) * 5.0e-1) - pol4hf * 1.8e+2)))) * mt;
              }
            }
          else
            {
              if (flgblm == 1)
                {
                  as = alphas (&mt) / pi1;
                  {
                    real(kind=8) D.5008;
                    real(kind=8) D.5007;
                    real(kind=8) D.5006;
                    real(kind=8) x.10;
                    real(kind=8) D.5004;
                    real(kind=8) D.5003;
                    real(kind=8) x.9;
                    real(kind=8) D.5001;
                    real(kind=8) D.5000;
                    real(kind=8) x.8;
                    real(kind=8) D.4998;
                    real(kind=8) D.4997;

                    D.4997 = as;
                    D.4998 = D.4997 * D.4997;
                    x.8 = ratbt;
                    D.5000 = x.8;
                    D.5001 = D.5000 * D.5000;
                    x.9 = ratct;
                    D.5003 = x.9;
                    D.5004 = D.5003 * D.5003;
                    x.10 = ratst;
                    D.5006 = x.10;
                    D.5007 = D.5006 * D.5006;
                    D.5008 = as;
                    *mpole = (1.0e+0 / ((((1.0e+0 - (as * 4.0e+0) / 3.0e+0) - (D.4998 / 6.0e+0) * ((((((ln2 * 4.0e+0 + 2.0e+0)) * zeta2 + 3.210416666666666429819088079966604709625244140625e+1) - zeta3) + ((((((zeta2 * 7.5e-1 - x.8 * 5.96999999999999975131004248396493494510650634765625e-1) + D.5001 * 2.300000000000000099920072216264088638126850128173828125e-1)) * x.8 + (((zeta2 * 7.5e-1 - x.9 * 5.96999999999999975131004248396493494510650634765625e-1) + D.5004 * 2.300000000000000099920072216264088638126850128173828125e-1)) * x.9) + (((zeta2 * 7.5e-1 - x.10 * 5.96999999999999975131004248396493494510650634765625e-1) + D.5007 * 2.300000000000000099920072216264088638126850128173828125e-1)) * x.10)) * 8.0e+0))) - (__builtin_powi (D.5008, 3) / 2.7e+1) * (((((((((7.313880208333333712289459072053432464599609375e+2 - (zeta3 * 2.355e+3) * 1.25e-1) + (zeta5 * 1.975e+3) * 1.25e-1) + (zeta2 * 3.88781e+5) / 2.4e+2) + (zeta4 * 2.625e+3) * 6.25e-2) - ((zeta2 * 4.317e+3) * zeta3) * 1.25e-1) - (((ln2 * 2.4e+1 + 7.33e+2)) * ln2) * zeta2) - (ln24 * 1.5e+1) * 5.0e-1) - pol4hf * 1.8e+2))))) * mt;
                  }
                }
              else
                {
                  ablm = 1.3333333333333332593184650249895639717578887939453125e+0;
                  {
                    real(kind=8) D.5017;
                    real(kind=8) D.5016;
                    real(kind=8) x.13;
                    real(kind=8) D.5014;
                    real(kind=8) D.5013;
                    real(kind=8) x.12;
                    real(kind=8) D.5011;
                    real(kind=8) D.5010;
                    real(kind=8) x.11;

                    x.11 = ratbt;
                    D.5010 = x.11;
                    D.5011 = D.5010 * D.5010;
                    x.12 = ratct;
                    D.5013 = x.12;
                    D.5014 = D.5013 * D.5013;
                    x.13 = ratst;
                    D.5016 = x.13;
                    D.5017 = D.5016 * D.5016;
                    bblm = (((pi2 / 3.0e+0 + 9.59375e+0) + (zeta2 * 1.3862943611198905724535279659903608262538909912109375e+0) / 3.0e+0) - zeta3 / 6.0e+0) + ((((((zeta2 * 7.5e-1 - x.11 * 5.96999999999999975131004248396493494510650634765625e-1) + D.5011 * 2.300000000000000099920072216264088638126850128173828125e-1)) * x.11 + (((zeta2 * 7.5e-1 - x.12 * 5.96999999999999975131004248396493494510650634765625e-1) + D.5014 * 2.300000000000000099920072216264088638126850128173828125e-1)) * x.12) + (((zeta2 * 7.5e-1 - x.13 * 5.96999999999999975131004248396493494510650634765625e-1) + D.5017 * 2.300000000000000099920072216264088638126850128173828125e-1)) * x.13)) * 1.3333333333333332593184650249895639717578887939453125e+0;
                  }
                  cblm = zeta2 / 3.0e+0 + 4.930555555555555802271783250034786760807037353515625e-1;
                  mublm = __builtin_exp (-((cblm * 3.0e+0) / ablm)) * mt;
                  as = alphas (&mublm) / pi1;
                  {
                    real(kind=8) D.5019;
                    real(kind=8) D.5018;

                    D.5018 = as;
                    D.5019 = D.5018 * D.5018;
                    *mpole = (((ablm * as + 1.0e+0) + ((bblm - cblm * 1.65e+1)) * D.5019)) * mt;
                  }
                }
              L.15:;
            }
          L.14:;
        }
      L.13:;
    }
  L.12:;
  return;
}


mtrun (real(kind=8) & restrict x)
{
  static real(kind=8) q[10] [value-expr: coupls.q];
  static real(kind=8) i3[10] [value-expr: coupls.i3];
  static real(kind=8) nc[10] [value-expr: coupls.nc];
  static real(kind=8) v[10] [value-expr: coupls.v];
  static real(kind=8) a[10] [value-expr: coupls.a];
  static real(kind=8) alphat [value-expr: coupls.alphat];
  static real(kind=8) sinhat [value-expr: coupls.sinhat];
  static real(kind=8) coshat [value-expr: coupls.coshat];
  static real(kind=8) rhonc [value-expr: coupls.rhonc];
  static real(kind=8) i3r[10] [value-expr: coupls.i3r];
  static real(kind=8) u1xr[10] [value-expr: coupls.u1xr];
  static real(kind=8) u1xl[10] [value-expr: coupls.u1xl];
  static real(kind=8) fitx [value-expr: fit221.fitx];
  static real(kind=8) fitsph [value-expr: fit221.fitsph];
  static real(kind=8) fitcph [value-expr: fit221.fitcph];
  static real(kind=8) fittph [value-expr: fit221.fittph];
  static real(kind=8) fits2b [value-expr: fit221.fits2b];
  static real(kind=8) kkss [value-expr: fit221.kkss];
  static real(kind=8) kkcc [value-expr: fit221.kkcc];
  static real(kind=8) kkem [value-expr: fit221.kkem];
  static real(kind=8) bestlnx [value-expr: fitbst.bestlnx];
  static real(kind=8) besttph [value-expr: fitbst.besttph];
  static real(kind=8) bests2b [value-expr: fitbst.bests2b];
  static logical(kind=4) flgfitx [value-expr: fitflg.flgfitx];
  static logical(kind=4) flgtph [value-expr: fitflg.flgtph];
  static logical(kind=4) flgs2b [value-expr: fitflg.flgs2b];
  static logical(kind=4) flfout [value-expr: fitflg.flfout];
  static integer(kind=4) modtype [value-expr: fitswtr.modtype];
  static integer(kind=4) plltr [value-expr: fitswtr.plltr];
  static integer(kind=4) prtpll[81] [value-expr: fitswtr.prtpll];
  static logical(kind=4) flagmr [value-expr: flags.flagmr];
  static integer(kind=4) flgblm [value-expr: flags.flgblm];
  static logical(kind=4) ffermi [value-expr: flags.ffermi];
  static logical(kind=4) fa2mt4 [value-expr: flags.fa2mt4];
  static logical(kind=4) fa2mt2 [value-expr: flags.fa2mt2];
  static logical(kind=4) fa2mt0 [value-expr: flags.fa2mt0];
  static logical(kind=4) fla2im [value-expr: flags.fla2im];
  static logical(kind=4) fasmt2 [value-expr: flags.fasmt2];
  static logical(kind=4) fasmt0 [value-expr: flags.fasmt0];
  static logical(kind=4) fas2mt [value-expr: flags.fas2mt];
  static logical(kind=4) flagmf [value-expr: flags.flagmf];
  static logical(kind=4) fpolew [value-expr: flags.fpolew];
  static logical(kind=4) flgech [value-expr: flags.flgech];
  static logical(kind=4) fobliq [value-expr: flags.fobliq];
  static logical(kind=4) f4lqcd [value-expr: flags.f4lqcd];
  static logical(kind=4) falas2 [value-expr: flags.falas2];
  static logical(kind=4) fbayes [value-expr: flags.fbayes];
  static integer(kind=4) flagzp [value-expr: flags.flagzp];
  static logical(kind=4) flagmh [value-expr: flags.flagmh];
  static logical(kind=4) flagmt [value-expr: flags.flagmt];
  static logical(kind=4) flagmc [value-expr: flags.flagmc];
  static logical(kind=4) flgrho [value-expr: flags.flgrho];
  static logical(kind=4) fkappa [value-expr: flags.fkappa];
  static logical(kind=4) flags [value-expr: flags.flags];
  static logical(kind=4) flagt [value-expr: flags.flagt];
  static logical(kind=4) fzprim [value-expr: flags.fzprim];
  static logical(kind=4) fsinth [value-expr: flags.fsinth];
  static logical(kind=4) fwrite [value-expr: flags.fwrite];
  static logical(kind=4) flprob [value-expr: flags.flprob];
  static logical(kind=4) fhiggs [value-expr: flags.fhiggs];
  static logical(kind=4) flagal [value-expr: flags.flagal];
  static logical(kind=4) fsplot [value-expr: flags.fsplot];
  static real(kind=8) alpha [value-expr: inputs.alpha];
  static real(kind=8) gf [value-expr: inputs.gf];
  static real(kind=8) alfas0 [value-expr: inputs.alfas0];
  static real(kind=8) asgrid[2001] [value-expr: inputs.asgrid];
  static real(kind=8) mu0 [value-expr: inputs.mu0];
  static real(kind=8) dahad3 [value-expr: inputs.dahad3];
  static real(kind=8) pol4hf [value-expr: inputs.pol4hf];
  static real(kind=8) an[8004] [value-expr: inputs.an];
  static real(kind=8) bn[8004] [value-expr: inputs.bn];
  static real(kind=8) pi1 [value-expr: inputs.pi1];
  static real(kind=8) pi2 [value-expr: inputs.pi2];
  static real(kind=8) zeta2 [value-expr: inputs.zeta2];
  static real(kind=8) zeta3 [value-expr: inputs.zeta3];
  static real(kind=8) zeta4 [value-expr: inputs.zeta4];
  static real(kind=8) zeta5 [value-expr: inputs.zeta5];
  static real(kind=8) zeta6 [value-expr: inputs.zeta6];
  static real(kind=8) zeta7 [value-expr: inputs.zeta7];
  static real(kind=8) prob [value-expr: limits.prob];
  static real(kind=8) mtp [value-expr: limits.mtp];
  static real(kind=8) sigma [value-expr: limits.sigma];
  static integer(kind=4) zprime [value-expr: limits.zprime];
  static real(kind=8) mw2 [value-expr: mass2.mw2];
  static real(kind=8) mz2 [value-expr: mass2.mz2];
  static real(kind=8) mt2 [value-expr: mass2.mt2];
  static real(kind=8) mh2 [value-expr: mass2.mh2];
  static real(kind=8) mz [value-expr: masses.mz];
  static real(kind=8) mh [value-expr: masses.mh];
  static real(kind=8) mt [value-expr: masses.mt];
  static real(kind=8) mb [value-expr: masses.mb];
  static real(kind=8) mc [value-expr: masses.mc];
  static real(kind=8) ms [value-expr: masses.ms];
  static real(kind=8) md [value-expr: masses.md];
  static real(kind=8) mu [value-expr: masses.mu];
  static real(kind=8) mtau [value-expr: masses.mtau];
  static real(kind=8) mmu [value-expr: masses.mmu];
  static real(kind=8) me [value-expr: masses.me];
  static real(kind=8) mw [value-expr: masses.mw];
  static real(kind=8) swpar [value-expr: obliqe.swpar];
  static real(kind=8) spar [value-expr: obliqe.spar];
  static real(kind=8) tpar [value-expr: obliqe.tpar];
  static real(kind=8) upar [value-expr: obliqe.upar];
  static real(kind=8) brho [value-expr: obliqe.brho];
  static real(kind=8) bkappa [value-expr: obliqe.bkappa];
  static real(kind=8) rpar [value-expr: obliqe.rpar];
  static real(kind=8) zpar [value-expr: obliqe.zpar];
  static real(kind=8) delrwh [value-expr: obliqe.delrwh];
  static real(kind=8) delrzh [value-expr: obliqe.delrzh];
  static real(kind=8) delr [value-expr: obliqe.delr];
  static real(kind=8) rhohat [value-expr: obliqe.rhohat];
  static real(kind=8) rho2 [value-expr: obliqe.rho2];
  static real(kind=8) ratzw2 [value-expr: ratios.ratzw2];
  static real(kind=8) rathw2 [value-expr: ratios.rathw2];
  static real(kind=8) rathz2 [value-expr: ratios.rathz2];
  static real(kind=8) rattw2 [value-expr: ratios.rattw2];
  static real(kind=8) rattz2 [value-expr: ratios.rattz2];
  static real(kind=8) ratth2 [value-expr: ratios.ratth2];
  static real(kind=8) mzp [value-expr: zprime.mzp];
  static real(kind=8) mzp2 [value-expr: zprime.mzp2];
  static real(kind=8) mz02 [value-expr: zprime.mz02];
  static real(kind=8) sinth [value-expr: zprime.sinth];
  static real(kind=8) sinth2 [value-expr: zprime.sinth2];
  static real(kind=8) costh [value-expr: zprime.costh];
  static real(kind=8) costh2 [value-expr: zprime.costh2];
  static real(kind=8) ratg21 [value-expr: zprime.ratg21];
  static real(kind=8) rhoeff [value-expr: zprime.rhoeff];
  static real(kind=8) rhoezp [value-expr: zprime.rhoezp];
  static real(kind=8) rhozzp [value-expr: zprime.rhozzp];
  static real(kind=8) v2[10] [value-expr: zprime.v2];
  static real(kind=8) a2[10] [value-expr: zprime.a2];
  static real(kind=8) eps2_l[10] [value-expr: zprime.eps2_l];
  static real(kind=8) eps2_r[10] [value-expr: zprime.eps2_r];
  static real(kind=8) ratgrl [value-expr: zprime.ratgrl];
  real(kind=8) a1;
  real(kind=8) amatch;
  real(kind=8) ax;
  real(kind=8) mmatch;
  real(kind=8) __result_mtrun;

  a1 = alphas (&mt) / pi1;
  amatch = 1.5277777777777779011358916250173933804035186767578125e-1;
  mmatch = 2.060185185185185174905342364581883884966373443603515625e-1;
  if (*x < mt)
    {
      {
        real(kind=8) D.5314;
        real(kind=8) D.5313;

        D.5313 = a1;
        D.5314 = D.5313 * D.5313;
        __result_mtrun = ((mmatch * D.5314 + 1.0e+0)) * mt;
      }
      if (*x < mb)
        {
          ax = alphas (&mb) / pi1;
          {
            real(kind=8) D.5320;
            real(kind=8) D.5319;
            real(kind=8) D.5318;
            static integer(kind=4) C.5317 = 5;

            D.5318 = a1;
            D.5319 = D.5318 * D.5318;
            D.5320 = ((amatch * D.5319 + 1.0e+0)) * a1;
            __result_mtrun = mrun (&C.5317, &D.5320, &ax, &__result_mtrun);
          }
          a1 = ax;
          {
            real(kind=8) D.5322;
            real(kind=8) D.5321;

            D.5321 = a1;
            D.5322 = D.5321 * D.5321;
            __result_mtrun = ((mmatch * D.5322 + 1.0e+0)) * __result_mtrun;
          }
          if (*x < mc)
            {
              ax = alphas (&mc) / pi1;
              {
                real(kind=8) D.5327;
                real(kind=8) D.5326;
                real(kind=8) D.5325;
                static integer(kind=4) C.5324 = 4;

                D.5325 = a1;
                D.5326 = D.5325 * D.5325;
                D.5327 = ((amatch * D.5326 + 1.0e+0)) * a1;
                __result_mtrun = mrun (&C.5324, &D.5327, &ax, &__result_mtrun);
              }
              a1 = ax;
              {
                real(kind=8) D.5329;
                real(kind=8) D.5328;

                D.5328 = a1;
                D.5329 = D.5328 * D.5328;
                __result_mtrun = ((mmatch * D.5329 + 1.0e+0)) * __result_mtrun;
              }
              ax = alphas ((real(kind=8) *) x) / pi1;
              {
                real(kind=8) D.5333;
                real(kind=8) D.5332;
                real(kind=8) D.5331;
                static integer(kind=4) C.5330 = 3;

                D.5331 = a1;
                D.5332 = D.5331 * D.5331;
                D.5333 = ((amatch * D.5332 + 1.0e+0)) * a1;
                __result_mtrun = mrun (&C.5330, &D.5333, &ax, &__result_mtrun);
              }
            }
          else
            {
              ax = alphas ((real(kind=8) *) x) / pi1;
              {
                real(kind=8) D.5337;
                real(kind=8) D.5336;
                real(kind=8) D.5335;
                static integer(kind=4) C.5334 = 4;

                D.5335 = a1;
                D.5336 = D.5335 * D.5335;
                D.5337 = ((amatch * D.5336 + 1.0e+0)) * a1;
                __result_mtrun = mrun (&C.5334, &D.5337, &ax, &__result_mtrun);
              }
            }
          L.18:;
        }
      else
        {
          ax = alphas ((real(kind=8) *) x) / pi1;
          {
            real(kind=8) D.5341;
            real(kind=8) D.5340;
            real(kind=8) D.5339;
            static integer(kind=4) C.5338 = 5;

            D.5339 = a1;
            D.5340 = D.5339 * D.5339;
            D.5341 = ((amatch * D.5340 + 1.0e+0)) * a1;
            __result_mtrun = mrun (&C.5338, &D.5341, &ax, &__result_mtrun);
          }
        }
      L.17:;
    }
  else
    {
      ax = alphas ((real(kind=8) *) x) / pi1;
      {
        static integer(kind=4) C.5342 = 6;

        __result_mtrun = mrun (&C.5342, &a1, &ax, &mt);
      }
    }
  L.16:;
  return __result_mtrun;
  return __result_mtrun;
}


