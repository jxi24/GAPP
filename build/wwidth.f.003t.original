wwprod (real(kind=8)[7] * restrict gammaw)
{
  static real(kind=8) q[10] [value-expr: coupls.q];
  static real(kind=8) i3[10] [value-expr: coupls.i3];
  static real(kind=8) nc[10] [value-expr: coupls.nc];
  static real(kind=8) v[10] [value-expr: coupls.v];
  static real(kind=8) a[10] [value-expr: coupls.a];
  static real(kind=8) alphat [value-expr: coupls.alphat];
  static real(kind=8) sinhat [value-expr: coupls.sinhat];
  static real(kind=8) coshat [value-expr: coupls.coshat];
  static real(kind=8) rhonc [value-expr: coupls.rhonc];
  static real(kind=8) i3r[10] [value-expr: coupls.i3r];
  static real(kind=8) u1xr[10] [value-expr: coupls.u1xr];
  static real(kind=8) u1xl[10] [value-expr: coupls.u1xl];
  static real(kind=8) fitx [value-expr: fit221.fitx];
  static real(kind=8) fitsph [value-expr: fit221.fitsph];
  static real(kind=8) fitcph [value-expr: fit221.fitcph];
  static real(kind=8) fittph [value-expr: fit221.fittph];
  static real(kind=8) fits2b [value-expr: fit221.fits2b];
  static real(kind=8) kkss [value-expr: fit221.kkss];
  static real(kind=8) kkcc [value-expr: fit221.kkcc];
  static real(kind=8) kkem [value-expr: fit221.kkem];
  static real(kind=8) bestlnx [value-expr: fitbst.bestlnx];
  static real(kind=8) besttph [value-expr: fitbst.besttph];
  static real(kind=8) bests2b [value-expr: fitbst.bests2b];
  static logical(kind=4) flgfitx [value-expr: fitflg.flgfitx];
  static logical(kind=4) flgtph [value-expr: fitflg.flgtph];
  static logical(kind=4) flgs2b [value-expr: fitflg.flgs2b];
  static logical(kind=4) flfout [value-expr: fitflg.flfout];
  static integer(kind=4) modtype [value-expr: fitswtr.modtype];
  static integer(kind=4) plltr [value-expr: fitswtr.plltr];
  static integer(kind=4) prtpll[81] [value-expr: fitswtr.prtpll];
  static logical(kind=4) flagmr [value-expr: flags.flagmr];
  static integer(kind=4) flgblm [value-expr: flags.flgblm];
  static logical(kind=4) ffermi [value-expr: flags.ffermi];
  static logical(kind=4) fa2mt4 [value-expr: flags.fa2mt4];
  static logical(kind=4) fa2mt2 [value-expr: flags.fa2mt2];
  static logical(kind=4) fa2mt0 [value-expr: flags.fa2mt0];
  static logical(kind=4) fla2im [value-expr: flags.fla2im];
  static logical(kind=4) fasmt2 [value-expr: flags.fasmt2];
  static logical(kind=4) fasmt0 [value-expr: flags.fasmt0];
  static logical(kind=4) fas2mt [value-expr: flags.fas2mt];
  static logical(kind=4) flagmf [value-expr: flags.flagmf];
  static logical(kind=4) fpolew [value-expr: flags.fpolew];
  static logical(kind=4) flgech [value-expr: flags.flgech];
  static logical(kind=4) fobliq [value-expr: flags.fobliq];
  static logical(kind=4) f4lqcd [value-expr: flags.f4lqcd];
  static logical(kind=4) falas2 [value-expr: flags.falas2];
  static logical(kind=4) fbayes [value-expr: flags.fbayes];
  static integer(kind=4) flagzp [value-expr: flags.flagzp];
  static logical(kind=4) flagmh [value-expr: flags.flagmh];
  static logical(kind=4) flagmt [value-expr: flags.flagmt];
  static logical(kind=4) flagmc [value-expr: flags.flagmc];
  static logical(kind=4) flgrho [value-expr: flags.flgrho];
  static logical(kind=4) fkappa [value-expr: flags.fkappa];
  static logical(kind=4) flags [value-expr: flags.flags];
  static logical(kind=4) flagt [value-expr: flags.flagt];
  static logical(kind=4) fzprim [value-expr: flags.fzprim];
  static logical(kind=4) fsinth [value-expr: flags.fsinth];
  static logical(kind=4) fwrite [value-expr: flags.fwrite];
  static logical(kind=4) flprob [value-expr: flags.flprob];
  static logical(kind=4) fhiggs [value-expr: flags.fhiggs];
  static logical(kind=4) flagal [value-expr: flags.flagal];
  static logical(kind=4) fsplot [value-expr: flags.fsplot];
  static real(kind=8) alpha [value-expr: inputs.alpha];
  static real(kind=8) gf [value-expr: inputs.gf];
  static real(kind=8) alfas0 [value-expr: inputs.alfas0];
  static real(kind=8) asgrid[2001] [value-expr: inputs.asgrid];
  static real(kind=8) mu0 [value-expr: inputs.mu0];
  static real(kind=8) dahad3 [value-expr: inputs.dahad3];
  static real(kind=8) pol4hf [value-expr: inputs.pol4hf];
  static real(kind=8) an[8004] [value-expr: inputs.an];
  static real(kind=8) bn[8004] [value-expr: inputs.bn];
  static real(kind=8) pi1 [value-expr: inputs.pi1];
  static real(kind=8) pi2 [value-expr: inputs.pi2];
  static real(kind=8) zeta2 [value-expr: inputs.zeta2];
  static real(kind=8) zeta3 [value-expr: inputs.zeta3];
  static real(kind=8) zeta4 [value-expr: inputs.zeta4];
  static real(kind=8) zeta5 [value-expr: inputs.zeta5];
  static real(kind=8) zeta6 [value-expr: inputs.zeta6];
  static real(kind=8) zeta7 [value-expr: inputs.zeta7];
  static real(kind=8) prob [value-expr: limits.prob];
  static real(kind=8) mtp [value-expr: limits.mtp];
  static real(kind=8) sigma [value-expr: limits.sigma];
  static integer(kind=4) zprime [value-expr: limits.zprime];
  static real(kind=8) mw2 [value-expr: mass2.mw2];
  static real(kind=8) mz2 [value-expr: mass2.mz2];
  static real(kind=8) mt2 [value-expr: mass2.mt2];
  static real(kind=8) mh2 [value-expr: mass2.mh2];
  static real(kind=8) mz [value-expr: masses.mz];
  static real(kind=8) mh [value-expr: masses.mh];
  static real(kind=8) mt [value-expr: masses.mt];
  static real(kind=8) mb [value-expr: masses.mb];
  static real(kind=8) mc [value-expr: masses.mc];
  static real(kind=8) ms [value-expr: masses.ms];
  static real(kind=8) md [value-expr: masses.md];
  static real(kind=8) mu [value-expr: masses.mu];
  static real(kind=8) mtau [value-expr: masses.mtau];
  static real(kind=8) mmu [value-expr: masses.mmu];
  static real(kind=8) me [value-expr: masses.me];
  static real(kind=8) mw [value-expr: masses.mw];
  static real(kind=8) swpar [value-expr: obliqe.swpar];
  static real(kind=8) spar [value-expr: obliqe.spar];
  static real(kind=8) tpar [value-expr: obliqe.tpar];
  static real(kind=8) upar [value-expr: obliqe.upar];
  static real(kind=8) brho [value-expr: obliqe.brho];
  static real(kind=8) bkappa [value-expr: obliqe.bkappa];
  static real(kind=8) rpar [value-expr: obliqe.rpar];
  static real(kind=8) zpar [value-expr: obliqe.zpar];
  static real(kind=8) delrwh [value-expr: obliqe.delrwh];
  static real(kind=8) delrzh [value-expr: obliqe.delrzh];
  static real(kind=8) delr [value-expr: obliqe.delr];
  static real(kind=8) rhohat [value-expr: obliqe.rhohat];
  static real(kind=8) rho2 [value-expr: obliqe.rho2];
  static real(kind=8) ratzw2 [value-expr: ratios.ratzw2];
  static real(kind=8) rathw2 [value-expr: ratios.rathw2];
  static real(kind=8) rathz2 [value-expr: ratios.rathz2];
  static real(kind=8) rattw2 [value-expr: ratios.rattw2];
  static real(kind=8) rattz2 [value-expr: ratios.rattz2];
  static real(kind=8) ratth2 [value-expr: ratios.ratth2];
  static real(kind=8) mzp [value-expr: zprime.mzp];
  static real(kind=8) mzp2 [value-expr: zprime.mzp2];
  static real(kind=8) mz02 [value-expr: zprime.mz02];
  static real(kind=8) sinth [value-expr: zprime.sinth];
  static real(kind=8) sinth2 [value-expr: zprime.sinth2];
  static real(kind=8) costh [value-expr: zprime.costh];
  static real(kind=8) costh2 [value-expr: zprime.costh2];
  static real(kind=8) ratg21 [value-expr: zprime.ratg21];
  static real(kind=8) rhoeff [value-expr: zprime.rhoeff];
  static real(kind=8) rhoezp [value-expr: zprime.rhoezp];
  static real(kind=8) rhozzp [value-expr: zprime.rhozzp];
  static real(kind=8) v2[10] [value-expr: zprime.v2];
  static real(kind=8) a2[10] [value-expr: zprime.a2];
  static real(kind=8) eps2_l[10] [value-expr: zprime.eps2_l];
  static real(kind=8) eps2_r[10] [value-expr: zprime.eps2_r];
  static real(kind=8) ratgrl [value-expr: zprime.ratgrl];
  real(kind=8) aw;

  aw = alphas (&mw) / pi1;
  if (modtype == 0)
    {
      {
        real(kind=8) D.3681;

        D.3681 = mw;
        (*gammaw)[0] = (((__builtin_powi (D.3681, 3) * gf) / 6.0e+0) / 1.4142135623730951454746218587388284504413604736328125e+0) / pi1;
      }
      (*gammaw)[2] = (*gammaw)[0];
      (*gammaw)[3] = (*gammaw)[0];
    }
  L.1:;
  if (modtype == 1)
    {
      {
        real(kind=8) D.3685;
        real(kind=8) D.3684;
        real(kind=8) D.3683;

        D.3683 = fitcph;
        D.3684 = D.3683 * D.3683;
        D.3685 = ((((gf * kkss)) / alphat));
        (*gammaw)[0] = (((((((fits2b * 3.0e+0) * kkcc - (D.3684 * 3.0e+0) * kkcc) + (fitx * 2.0e+0) * ((kkss - kkcc)))) * gf) * __builtin_sqrt (pi1))) / ((((fitx * 2.85409698486328125e+1) * __builtin_pow (D.3685, 1.5e+0)) * ((kkss - kkcc))));
      }
      (*gammaw)[2] = (*gammaw)[0];
      (*gammaw)[3] = (*gammaw)[0];
    }
  L.2:;
  if (modtype == 2)
    {
      {
        real(kind=8) D.3689;
        real(kind=8) D.3688;
        real(kind=8) D.3687;

        D.3687 = fitcph;
        D.3688 = D.3687 * D.3687;
        D.3689 = ((((gf * kkss)) / alphat));
        (*gammaw)[0] = (((((((fits2b * 6.0e+0) * kkcc - (D.3688 * 3.0e+0) * kkcc) + (fitx * 8.0e+0) * ((kkss - kkcc)))) * gf) * __builtin_sqrt (pi1))) / ((((fitx * 1.1416387939453125e+2) * __builtin_pow (D.3689, 1.5e+0)) * ((kkss - kkcc))));
      }
      (*gammaw)[2] = (*gammaw)[0];
      (*gammaw)[3] = (*gammaw)[0];
    }
  L.3:;
  if (modtype == 3)
    {
      {
        real(kind=8) D.3694;
        real(kind=8) D.3693;
        real(kind=8) D.3692;
        real(kind=8) D.3691;

        D.3691 = alphat;
        D.3692 = fitsph;
        D.3693 = D.3692 * D.3692;
        D.3694 = kkss;
        (*gammaw)[0] = (((__builtin_pow (D.3691, 1.5e+0) * ((fitx * 4.0e+0 + ((3.0e+0 / ((1.0e+0 - kkss * 2.0e+0)) - 7.0e+0)) * D.3693))) * __builtin_sqrt (pi1))) / (((fitx * 5.7081939697265625e+1) * __builtin_sqrt (__builtin_powi (D.3694, 3) * gf)));
      }
      (*gammaw)[2] = (*gammaw)[0];
      {
        real(kind=8) D.3695;

        D.3695 = alphat;
        (*gammaw)[3] = (((__builtin_pow (D.3695, 1.5e+0) * ((((2.0e+0 - kkcc * 4.0e+0)) * fitx + (((4.0e+0 - kkcc * 8.0e+0) + ((kkcc * 7.0e+0 - 5.0e+0)) * fitsph)) * fitsph))) * __builtin_sqrt (pi1))) / (((((fitx * 2.85409698486328125e+1) * ((kkcc - 1.0e+0))) * ((kkcc * 2.0e+0 - 1.0e+0))) * __builtin_sqrt (gf - gf * kkcc)));
      }
    }
  L.4:;
  if (modtype == 4)
    {
      {
        real(kind=8) D.3697;

        D.3697 = alphat;
        (*gammaw)[0] = (((__builtin_pow (D.3697, 1.5e+0) * ((((2.0e+0 - kkcc * 4.0e+0)) * fitx + (((4.0e+0 - kkcc * 8.0e+0) + ((kkcc * 7.0e+0 - 5.0e+0)) * fitsph)) * fitsph))) * __builtin_sqrt (pi1))) / (((((fitx * 2.85409698486328125e+1) * ((kkcc - 1.0e+0))) * ((kkcc * 2.0e+0 - 1.0e+0))) * __builtin_sqrt (gf - gf * kkcc)));
      }
      {
        real(kind=8) D.3701;
        real(kind=8) D.3700;
        real(kind=8) D.3699;
        real(kind=8) D.3698;

        D.3698 = alphat;
        D.3699 = fitsph;
        D.3700 = D.3699 * D.3699;
        D.3701 = kkss;
        (*gammaw)[2] = (((__builtin_pow (D.3698, 1.5e+0) * ((fitx * 4.0e+0 + ((3.0e+0 / ((1.0e+0 - kkss * 2.0e+0)) - 7.0e+0)) * D.3700))) * __builtin_sqrt (pi1))) / (((fitx * 5.7081939697265625e+1) * __builtin_sqrt (__builtin_powi (D.3701, 3) * gf)));
      }
      (*gammaw)[3] = (*gammaw)[0];
    }
  L.5:;
  (*gammaw)[0] = (*gammaw)[0] * 9.9644999999999994688693050193251110613346099853515625e-1;
  (*gammaw)[2] = (*gammaw)[2] * 9.9644999999999994688693050193251110613346099853515625e-1;
  (*gammaw)[3] = (*gammaw)[3] * 9.9644999999999994688693050193251110613346099853515625e-1;
  (*gammaw)[1] = (*gammaw)[0];
  (*gammaw)[2] = (*gammaw)[2] - 2.00000000000000009584347204771859196625882759690284729004e-4;
  {
    real(kind=8) D.3704;
    real(kind=8) D.3703;
    real(kind=8) D.3702;

    D.3702 = aw;
    D.3703 = D.3702 * D.3702;
    D.3704 = aw;
    (*gammaw)[3] = ((*gammaw)[3] * 3.0e+0) * ((((aw + 1.0e+0) + D.3703 * 1.4090000000000000301980662698042578995227813720703125e+0) - __builtin_powi (D.3704, 3) * 1.2769999999999999573674358543939888477325439453125e+1));
  }
  (*gammaw)[4] = (*gammaw)[3] - 1.00000000000000004792173602385929598312941379845142364502e-4;
  (*gammaw)[5] = (*gammaw)[3] + (*gammaw)[4];
  (*gammaw)[6] = (((*gammaw)[0] + (*gammaw)[1]) + (*gammaw)[2]) + (*gammaw)[5];
  return;
}


