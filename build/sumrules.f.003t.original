smrule (real(kind=8)[9] * restrict sumrlc, real(kind=8)[8] * restrict momntc, real(kind=8)[9] * restrict errorc, real(kind=8)[9] * restrict sumrlb, real(kind=8)[8] * restrict momntb, real(kind=8)[9] * restrict errorb, real(kind=8) & restrict ccmbc)
{
  static real(kind=8) q[10] [value-expr: coupls.q];
  static real(kind=8) i3[10] [value-expr: coupls.i3];
  static real(kind=8) nc[10] [value-expr: coupls.nc];
  static real(kind=8) v[10] [value-expr: coupls.v];
  static real(kind=8) a[10] [value-expr: coupls.a];
  static real(kind=8) alphat [value-expr: coupls.alphat];
  static real(kind=8) sinhat [value-expr: coupls.sinhat];
  static real(kind=8) coshat [value-expr: coupls.coshat];
  static real(kind=8) rhonc [value-expr: coupls.rhonc];
  static real(kind=8) i3r[10] [value-expr: coupls.i3r];
  static real(kind=8) u1xr[10] [value-expr: coupls.u1xr];
  static real(kind=8) u1xl[10] [value-expr: coupls.u1xl];
  static real(kind=8) fitx [value-expr: fit221.fitx];
  static real(kind=8) fitsph [value-expr: fit221.fitsph];
  static real(kind=8) fitcph [value-expr: fit221.fitcph];
  static real(kind=8) fittph [value-expr: fit221.fittph];
  static real(kind=8) fits2b [value-expr: fit221.fits2b];
  static real(kind=8) kkss [value-expr: fit221.kkss];
  static real(kind=8) kkcc [value-expr: fit221.kkcc];
  static real(kind=8) kkem [value-expr: fit221.kkem];
  static real(kind=8) bestlnx [value-expr: fitbst.bestlnx];
  static real(kind=8) besttph [value-expr: fitbst.besttph];
  static real(kind=8) bests2b [value-expr: fitbst.bests2b];
  static logical(kind=4) flgfitx [value-expr: fitflg.flgfitx];
  static logical(kind=4) flgtph [value-expr: fitflg.flgtph];
  static logical(kind=4) flgs2b [value-expr: fitflg.flgs2b];
  static logical(kind=4) flfout [value-expr: fitflg.flfout];
  static integer(kind=4) modtype [value-expr: fitswtr.modtype];
  static integer(kind=4) plltr [value-expr: fitswtr.plltr];
  static integer(kind=4) prtpll[81] [value-expr: fitswtr.prtpll];
  static logical(kind=4) flagmr [value-expr: flags.flagmr];
  static integer(kind=4) flgblm [value-expr: flags.flgblm];
  static logical(kind=4) ffermi [value-expr: flags.ffermi];
  static logical(kind=4) fa2mt4 [value-expr: flags.fa2mt4];
  static logical(kind=4) fa2mt2 [value-expr: flags.fa2mt2];
  static logical(kind=4) fa2mt0 [value-expr: flags.fa2mt0];
  static logical(kind=4) fla2im [value-expr: flags.fla2im];
  static logical(kind=4) fasmt2 [value-expr: flags.fasmt2];
  static logical(kind=4) fasmt0 [value-expr: flags.fasmt0];
  static logical(kind=4) fas2mt [value-expr: flags.fas2mt];
  static logical(kind=4) flagmf [value-expr: flags.flagmf];
  static logical(kind=4) fpolew [value-expr: flags.fpolew];
  static logical(kind=4) flgech [value-expr: flags.flgech];
  static logical(kind=4) fobliq [value-expr: flags.fobliq];
  static logical(kind=4) f4lqcd [value-expr: flags.f4lqcd];
  static logical(kind=4) falas2 [value-expr: flags.falas2];
  static logical(kind=4) fbayes [value-expr: flags.fbayes];
  static integer(kind=4) flagzp [value-expr: flags.flagzp];
  static logical(kind=4) flagmh [value-expr: flags.flagmh];
  static logical(kind=4) flagmt [value-expr: flags.flagmt];
  static logical(kind=4) flagmc [value-expr: flags.flagmc];
  static logical(kind=4) flgrho [value-expr: flags.flgrho];
  static logical(kind=4) fkappa [value-expr: flags.fkappa];
  static logical(kind=4) flags [value-expr: flags.flags];
  static logical(kind=4) flagt [value-expr: flags.flagt];
  static logical(kind=4) fzprim [value-expr: flags.fzprim];
  static logical(kind=4) fsinth [value-expr: flags.fsinth];
  static logical(kind=4) fwrite [value-expr: flags.fwrite];
  static logical(kind=4) flprob [value-expr: flags.flprob];
  static logical(kind=4) fhiggs [value-expr: flags.fhiggs];
  static logical(kind=4) flagal [value-expr: flags.flagal];
  static logical(kind=4) fsplot [value-expr: flags.fsplot];
  static real(kind=8) alpha [value-expr: inputs.alpha];
  static real(kind=8) gf [value-expr: inputs.gf];
  static real(kind=8) alfas0 [value-expr: inputs.alfas0];
  static real(kind=8) asgrid[2001] [value-expr: inputs.asgrid];
  static real(kind=8) mu0 [value-expr: inputs.mu0];
  static real(kind=8) dahad3 [value-expr: inputs.dahad3];
  static real(kind=8) pol4hf [value-expr: inputs.pol4hf];
  static real(kind=8) an[8004] [value-expr: inputs.an];
  static real(kind=8) bn[8004] [value-expr: inputs.bn];
  static real(kind=8) pi1 [value-expr: inputs.pi1];
  static real(kind=8) pi2 [value-expr: inputs.pi2];
  static real(kind=8) zeta2 [value-expr: inputs.zeta2];
  static real(kind=8) zeta3 [value-expr: inputs.zeta3];
  static real(kind=8) zeta4 [value-expr: inputs.zeta4];
  static real(kind=8) zeta5 [value-expr: inputs.zeta5];
  static real(kind=8) zeta6 [value-expr: inputs.zeta6];
  static real(kind=8) zeta7 [value-expr: inputs.zeta7];
  static real(kind=8) prob [value-expr: limits.prob];
  static real(kind=8) mtp [value-expr: limits.mtp];
  static real(kind=8) sigma [value-expr: limits.sigma];
  static integer(kind=4) zprime [value-expr: limits.zprime];
  static real(kind=8) mw2 [value-expr: mass2.mw2];
  static real(kind=8) mz2 [value-expr: mass2.mz2];
  static real(kind=8) mt2 [value-expr: mass2.mt2];
  static real(kind=8) mh2 [value-expr: mass2.mh2];
  static real(kind=8) mz [value-expr: masses.mz];
  static real(kind=8) mh [value-expr: masses.mh];
  static real(kind=8) mt [value-expr: masses.mt];
  static real(kind=8) mb [value-expr: masses.mb];
  static real(kind=8) mc [value-expr: masses.mc];
  static real(kind=8) ms [value-expr: masses.ms];
  static real(kind=8) md [value-expr: masses.md];
  static real(kind=8) mu [value-expr: masses.mu];
  static real(kind=8) mtau [value-expr: masses.mtau];
  static real(kind=8) mmu [value-expr: masses.mmu];
  static real(kind=8) me [value-expr: masses.me];
  static real(kind=8) mw [value-expr: masses.mw];
  static real(kind=8) swpar [value-expr: obliqe.swpar];
  static real(kind=8) spar [value-expr: obliqe.spar];
  static real(kind=8) tpar [value-expr: obliqe.tpar];
  static real(kind=8) upar [value-expr: obliqe.upar];
  static real(kind=8) brho [value-expr: obliqe.brho];
  static real(kind=8) bkappa [value-expr: obliqe.bkappa];
  static real(kind=8) rpar [value-expr: obliqe.rpar];
  static real(kind=8) zpar [value-expr: obliqe.zpar];
  static real(kind=8) delrwh [value-expr: obliqe.delrwh];
  static real(kind=8) delrzh [value-expr: obliqe.delrzh];
  static real(kind=8) delr [value-expr: obliqe.delr];
  static real(kind=8) rhohat [value-expr: obliqe.rhohat];
  static real(kind=8) rho2 [value-expr: obliqe.rho2];
  static real(kind=8) ratzw2 [value-expr: ratios.ratzw2];
  static real(kind=8) rathw2 [value-expr: ratios.rathw2];
  static real(kind=8) rathz2 [value-expr: ratios.rathz2];
  static real(kind=8) rattw2 [value-expr: ratios.rattw2];
  static real(kind=8) rattz2 [value-expr: ratios.rattz2];
  static real(kind=8) ratth2 [value-expr: ratios.ratth2];
  static real(kind=8) mzp [value-expr: zprime.mzp];
  static real(kind=8) mzp2 [value-expr: zprime.mzp2];
  static real(kind=8) mz02 [value-expr: zprime.mz02];
  static real(kind=8) sinth [value-expr: zprime.sinth];
  static real(kind=8) sinth2 [value-expr: zprime.sinth2];
  static real(kind=8) costh [value-expr: zprime.costh];
  static real(kind=8) costh2 [value-expr: zprime.costh2];
  static real(kind=8) ratg21 [value-expr: zprime.ratg21];
  static real(kind=8) rhoeff [value-expr: zprime.rhoeff];
  static real(kind=8) rhoezp [value-expr: zprime.rhoezp];
  static real(kind=8) rhozzp [value-expr: zprime.rhozzp];
  static real(kind=8) v2[10] [value-expr: zprime.v2];
  static real(kind=8) a2[10] [value-expr: zprime.a2];
  static real(kind=8) eps2_l[10] [value-expr: zprime.eps2_l];
  static real(kind=8) eps2_r[10] [value-expr: zprime.eps2_r];
  static real(kind=8) ratgrl [value-expr: zprime.ratgrl];
  real(kind=8) agg;
  real(kind=8) aggb;
  real(kind=8) aggc;
  real(kind=8) agger;
  real(kind=8) aggerb;
  real(kind=8) aggerc;
  real(kind=8) alfamb;
  real(kind=8) alfamc;
  real(kind=8) as2m;
  real(kind=8) asb;
  real(kind=8) asc;
  real(kind=8) b[16];
  real(kind=8) c[32];
  real(kind=8) coefb1[11];
  real(kind=8) coefb3[9];
  real(kind=8) coefc1[11];
  real(kind=8) coefc3[9];
  real(kind=8) coeff2[8];
  real(kind=8) dgamma;
  real(kind=8) error;
  logical(kind=4) flgbes;
  real(kind=8) fqcd1;
  real(kind=8) fqcd2;
  real(kind=8) fqcdb;
  integer(kind=4) k;
  real(kind=8) lb;
  real(kind=8) lc;
  real(kind=8) lerr;
  real(kind=8) logm;
  real(kind=8) logr;
  real(kind=8) m_b[6];
  static real(kind=8) m_c[76] = {3.096915999999999780101234136964194476604461669921875e+0, 3.68609000000000008867573342286050319671630859375e+0, 3.75e+0, 3.7599999999999997868371792719699442386627197265625e+0, 3.763999999999999790389892950770445168018341064453125e+0, 3.76799999999999979394260662957094609737396240234375e+0, 3.770000000000000017763568394002504646778106689453125e+0, 3.771999999999999797495320308371447026729583740234375e+0, 3.775999999999999801048033987171947956085205078125e+0, 3.779999999999999804600747665972448885440826416015625e+0, 3.79000000000000003552713678800500929355621337890625e+0, 3.810000000000000053290705182007513940334320068359375e+0, 3.850000000000000088817841970012523233890533447265625e+0, 3.890000000000000124344978758017532527446746826171875e+0, 3.930000000000000159872115546022541821002960205078125e+0, 3.939999999999999946709294817992486059665679931640625e+0, 3.95000000000000017763568394002504646778106689453125e+0, 3.95999999999999996447286321199499070644378662109375e+0, 3.970000000000000195399252334027551114559173583984375e+0, 3.979999999999999982236431605997495353221893310546875e+0, 3.9900000000000002131628207280300557613372802734375e+0, 4.0e+0, 4.0099999999999997868371792719699442386627197265625e+0, 4.019999999999999573674358543939888477325439453125e+0, 4.02700000000000013500311979441903531551361083984375e+0, 4.03000000000000024868995751603506505489349365234375e+0, 4.03300000000000036237679523765109479427337646484375e+0, 4.04000000000000003552713678800500929355621337890625e+0, 4.04999999999999982236431605997495353221893310546875e+0, 4.05999999999999960920149533194489777088165283203125e+0, 4.07000000000000028421709430404007434844970703125e+0, 4.0800000000000000710542735760100185871124267578125e+0, 4.089999999999999857891452847979962825775146484375e+0, 4.0999999999999996447286321199499070644378662109375e+0, 4.11000000000000031974423109204508364200592041015625e+0, 4.12000000000000010658141036401502788066864013671875e+0, 4.12999999999999989341858963598497211933135986328125e+0, 4.13999999999999968025576890795491635799407958984375e+0, 4.1500000000000003552713678800500929355621337890625e+0, 4.160000000000000142108547152020037174224853515625e+0, 4.1699999999999999289457264239899814128875732421875e+0, 4.17999999999999971578290569595992565155029296875e+0, 4.19000000000000039079850466805510222911834716796875e+0, 4.20000000000000017763568394002504646778106689453125e+0, 4.20999999999999996447286321199499070644378662109375e+0, 4.21999999999999975131004248396493494510650634765625e+0, 4.230000000000000426325641456060111522674560546875e+0, 4.2400000000000002131628207280300557613372802734375e+0, 4.24500000000000010658141036401502788066864013671875e+0, 4.25e+0, 4.25499999999999989341858963598497211933135986328125e+0, 4.2599999999999997868371792719699442386627197265625e+0, 4.26499999999999968025576890795491635799407958984375e+0, 4.269999999999999573674358543939888477325439453125e+0, 4.28000000000000024868995751603506505489349365234375e+0, 4.29999999999999982236431605997495353221893310546875e+0, 4.32000000000000028421709430404007434844970703125e+0, 4.339999999999999857891452847979962825775146484375e+0, 4.3499999999999996447286321199499070644378662109375e+0, 4.36000000000000031974423109204508364200592041015625e+0, 4.37999999999999989341858963598497211933135986328125e+0, 4.38999999999999968025576890795491635799407958984375e+0, 4.4000000000000003552713678800500929355621337890625e+0, 4.410000000000000142108547152020037174224853515625e+0, 4.4199999999999999289457264239899814128875732421875e+0, 4.42999999999999971578290569595992565155029296875e+0, 4.44000000000000039079850466805510222911834716796875e+0, 4.45000000000000017763568394002504646778106689453125e+0, 4.45999999999999996447286321199499070644378662109375e+0, 4.480000000000000426325641456060111522674560546875e+0, 4.5e+0, 4.519999999999999573674358543939888477325439453125e+0, 4.54000000000000003552713678800500929355621337890625e+0, 4.55999999999999960920149533194489777088165283203125e+0, 4.5999999999999996447286321199499070644378662109375e+0, 4.79999999999999982236431605997495353221893310546875e+0};
  real(kind=8) mbpm;
  real(kind=8) mbpm2;
  real(kind=8) md0;
  real(kind=8) md02;
  integer(kind=4) n;
  real(kind=8) root;
  real(kind=8) rtb1;
  real(kind=8) rtb2;
  real(kind=8) rtb3;
  real(kind=8) rtb4;
  real(kind=8) rtb5;
  real(kind=8) rtb6;
  real(kind=8) rtb7;
  real(kind=8) rtb8;
  real(kind=8) rtb9;
  real(kind=8) rtc1;
  real(kind=8) rtc2;
  real(kind=8) rtc3;
  real(kind=8) rtc4;
  real(kind=8) rtc5;
  real(kind=8) rtc6;
  real(kind=8) rtc7;
  real(kind=8) rtc8;
  real(kind=8) rtc9;
  real(kind=8) sumrl;
  real(kind=8) widerb[6];
  static real(kind=8) widerc[76] = {1.40000000000000009546603416642207573516998309059999883175e-7, 4.99999999999999977374055912943129342806969361845403909683e-8, 1.8000000000000000444089209850062616169452667236328125e+0, 1.0e+0, 1.5e+0, 1.1999999999999999555910790149937383830547332763671875e+0, 4.0000000000000002220446049250313080847263336181640625e-1, 9.0000000000000002220446049250313080847263336181640625e-1, 1.1999999999999999555910790149937383830547332763671875e+0, 9.0000000000000002220446049250313080847263336181640625e-1, 1.8000000000000000444089209850062616169452667236328125e+0, 4.0e+0, 5.9000000000000003552713678800500929355621337890625e+0, 6.5e+0, 4.79999999999999982236431605997495353221893310546875e+0, 2.100000000000000088817841970012523233890533447265625e+0, 1.899999999999999911182158029987476766109466552734375e+0, 1.8000000000000000444089209850062616169452667236328125e+0, 1.399999999999999911182158029987476766109466552734375e+0, 1.8000000000000000444089209850062616169452667236328125e+0, 2.100000000000000088817841970012523233890533447265625e+0, 1.6999999999999999555910790149937383830547332763671875e+0, 2.20000000000000017763568394002504646778106689453125e+0, 1.8000000000000000444089209850062616169452667236328125e+0, 1.100000000000000088817841970012523233890533447265625e+0, 8.000000000000000444089209850062616169452667236328125e-1, 1.1999999999999999555910790149937383830547332763671875e+0, 1.6999999999999999555910790149937383830547332763671875e+0, 2.399999999999999911182158029987476766109466552734375e+0, 2.100000000000000088817841970012523233890533447265625e+0, 2.29999999999999982236431605997495353221893310546875e+0, 2.29999999999999982236431605997495353221893310546875e+0, 2.0e+0, 2.0e+0, 2.100000000000000088817841970012523233890533447265625e+0, 3.0e+0, 1.8000000000000000444089209850062616169452667236328125e+0, 1.899999999999999911182158029987476766109466552734375e+0, 2.20000000000000017763568394002504646778106689453125e+0, 1.6999999999999999555910790149937383830547332763671875e+0, 1.899999999999999911182158029987476766109466552734375e+0, 2.0e+0, 1.399999999999999911182158029987476766109466552734375e+0, 1.8000000000000000444089209850062616169452667236328125e+0, 2.0e+0, 2.20000000000000017763568394002504646778106689453125e+0, 1.600000000000000088817841970012523233890533447265625e+0, 1.1999999999999999555910790149937383830547332763671875e+0, 6.999999999999999555910790149937383830547332763671875e-1, 6.999999999999999555910790149937383830547332763671875e-1, 6.999999999999999555910790149937383830547332763671875e-1, 6.999999999999999555910790149937383830547332763671875e-1, 8.000000000000000444089209850062616169452667236328125e-1, 1.1999999999999999555910790149937383830547332763671875e+0, 2.399999999999999911182158029987476766109466552734375e+0, 2.600000000000000088817841970012523233890533447265625e+0, 3.100000000000000088817841970012523233890533447265625e+0, 3.100000000000000088817841970012523233890533447265625e+0, 1.600000000000000088817841970012523233890533447265625e+0, 2.79999999999999982236431605997495353221893310546875e+0, 2.899999999999999911182158029987476766109466552734375e+0, 1.899999999999999911182158029987476766109466552734375e+0, 2.100000000000000088817841970012523233890533447265625e+0, 2.100000000000000088817841970012523233890533447265625e+0, 1.8000000000000000444089209850062616169452667236328125e+0, 2.100000000000000088817841970012523233890533447265625e+0, 2.0e+0, 1.8000000000000000444089209850062616169452667236328125e+0, 2.899999999999999911182158029987476766109466552734375e+0, 4.29999999999999982236431605997495353221893310546875e+0, 3.29999999999999982236431605997495353221893310546875e+0, 3.29999999999999982236431605997495353221893310546875e+0, 4.0e+0, 4.9000000000000003552713678800500929355621337890625e+0, 1.8699999999999999289457264239899814128875732421875e+1, 1.9800000000000000710542735760100185871124267578125e+1};
  real(kind=8) widthb[6];
  static real(kind=8) widthc[76] = {5.55000000000000022530805346421267643108876654878258705139e-6, 2.43000000000000002768076566572741370464427745901048183441e-6, 3.5e+0, 3.70000000000000017763568394002504646778106689453125e+0, 4.20000000000000017763568394002504646778106689453125e+0, 4.70000000000000017763568394002504646778106689453125e+0, 2.600000000000000088817841970012523233890533447265625e+0, 2.600000000000000088817841970012523233890533447265625e+0, 4.0999999999999996447286321199499070644378662109375e+0, 7.29999999999999982236431605997495353221893310546875e+0, 5.70000000000000017763568394002504646778106689453125e+0, 4.29999999999999982236431605997495353221893310546875e+0, 9.300000000000000710542735760100185871124267578125e+0, 1.610000000000000142108547152020037174224853515625e+1, 2.360000000000000142108547152020037174224853515625e+1, 7.0e+0, 7.29999999999999982236431605997495353221893310546875e+0, 5.5e+0, 1.05e+1, 8.9000000000000003552713678800500929355621337890625e+0, 8.199999999999999289457264239899814128875732421875e+0, 9.199999999999999289457264239899814128875732421875e+0, 1.29000000000000003552713678800500929355621337890625e+1, 1.8699999999999999289457264239899814128875732421875e+1, 1.1699999999999999289457264239899814128875732421875e+1, 7.0e+0, 1.04000000000000003552713678800500929355621337890625e+1, 1.839999999999999857891452847979962825775146484375e+1, 2.0e+1, 2.4199999999999999289457264239899814128875732421875e+1, 1.910000000000000142108547152020037174224853515625e+1, 2.010000000000000142108547152020037174224853515625e+1, 1.8300000000000000710542735760100185871124267578125e+1, 1.739999999999999857891452847979962825775146484375e+1, 1.689999999999999857891452847979962825775146484375e+1, 1.8800000000000000710542735760100185871124267578125e+1, 1.760000000000000142108547152020037174224853515625e+1, 1.6e+1, 1.9800000000000000710542735760100185871124267578125e+1, 1.889999999999999857891452847979962825775146484375e+1, 1.889999999999999857891452847979962825775146484375e+1, 1.95e+1, 1.7800000000000000710542735760100185871124267578125e+1, 1.639999999999999857891452847979962825775146484375e+1, 9.699999999999999289457264239899814128875732421875e+0, 1.39000000000000003552713678800500929355621337890625e+1, 9.800000000000000710542735760100185871124267578125e+0, 7.5999999999999996447286321199499070644378662109375e+0, 3.70000000000000017763568394002504646778106689453125e+0, 2.399999999999999911182158029987476766109466552734375e+0, 3.20000000000000017763568394002504646778106689453125e+0, 3.70000000000000017763568394002504646778106689453125e+0, 4.0e+0, 7.70000000000000017763568394002504646778106689453125e+0, 1.2699999999999999289457264239899814128875732421875e+1, 1.760000000000000142108547152020037174224853515625e+1, 1.45999999999999996447286321199499070644378662109375e+1, 1.55999999999999996447286321199499070644378662109375e+1, 1.25999999999999996447286321199499070644378662109375e+1, 1.860000000000000142108547152020037174224853515625e+1, 1.9e+1, 1.24000000000000003552713678800500929355621337890625e+1, 1.6800000000000000710542735760100185871124267578125e+1, 1.55999999999999996447286321199499070644378662109375e+1, 1.45e+1, 1.789999999999999857891452847979962825775146484375e+1, 1.6199999999999999289457264239899814128875732421875e+1, 1.5199999999999999289457264239899814128875732421875e+1, 2.15e+1, 2.6199999999999999289457264239899814128875732421875e+1, 2.5199999999999999289457264239899814128875732421875e+1, 2.039999999999999857891452847979962825775146484375e+1, 2.0e+1, 4.17000000000000028421709430404007434844970703125e+1, 1.2980000000000001136868377216160297393798828125e+2, 1.4330000000000001136868377216160297393798828125e+2};

  flgbes = 0;
  md0 = 1.864500000000000046185277824406512081623077392578125e+0;
  mbpm = 5.278999999999999914734871708787977695465087890625e+0;
  {
    real(kind=8) D.3764;
    real(kind=8) D.3763;

    D.3763 = md0;
    D.3764 = D.3763 * D.3763;
    md02 = D.3764 * 4.0e+0;
  }
  {
    real(kind=8) D.3766;
    real(kind=8) D.3765;

    D.3765 = mbpm;
    D.3766 = D.3765 * D.3765;
    mbpm2 = D.3766 * 4.0e+0;
  }
  alfahat (&mc, &dgamma, &alfamc);
  alfahat (&mb, &dgamma, &alfamb);
  asc = alphas (&mc) / pi1;
  asb = alphas (&mb) / pi1;
  agg = 0.0;
  {
    real(kind=8) D.3769;

    D.3769 = mc;
    aggc = ((zeta2 * 2.0e+0) * agg) / __builtin_powi (D.3769, 4);
  }
  {
    real(kind=8) D.3770;

    D.3770 = mb;
    aggb = ((zeta2 * 2.0e+0) * agg) / __builtin_powi (D.3770, 4);
  }
  agger = 7.0000000000000006661338147750939242541790008544921875e-2;
  {
    real(kind=8) D.3771;

    D.3771 = mc;
    aggerc = ((zeta2 * 2.0e+0) * agger) / __builtin_powi (D.3771, 4);
  }
  {
    real(kind=8) D.3772;

    D.3772 = mb;
    aggerb = ((zeta2 * 2.0e+0) * agger) / __builtin_powi (D.3772, 4);
  }
  lerr = 1.2399999999999999911182158029987476766109466552734375e+0;
  c[0] = 1.0666666666666666518636930049979127943515777587890625e+0;
  c[4] = 4.57142857142857128582846826247987337410449981689453125e-1;
  c[8] = 2.70899470899470917739648712085909210145473480224609375e-1;
  c[12] = 1.8470418470418470402449884204543195664882659912109375e-1;
  c[16] = 1.363969363969363968180914525873959064483642578125e-1;
  c[20] = 1.0608650608650609104000039906168240122497081756591796875e-1;
  c[24] = 8.558239146474440339762423946012859232723712921142578125e-2;
  c[28] = 7.09432981878802271236139631582773290574550628662109375e-2;
  c[1] = 2.554732510288066027470676999655552208423614501953125e+0;
  c[5] = 1.1095590828924162263291464114445261657238006591796875e+0;
  c[9] = 5.193959855547156667654462580685503780841827392578125e-1;
  c[13] = 2.031213962078159684931932815743493847548961639404296875e-1;
  c[17] = 1.06272288425796300470604904830906889401376247406005859375e-2;
  c[21] = -1.1583993404049890141305212409861269406974315643310546875e-1;
  c[25] = -2.03296819407743800667276445892639458179473876953125e-1;
  c[29] = -2.660219415937181697273672398296184837818145751953125e-1;
  c[2] = 5.0988169828764917657082378354971297085285186767578125e-1;
  c[6] = 1.412271177146594336448970352648757398128509521484375e+0;
  c[10] = 3.52228136147449077952842344529926776885986328125e-1;
  c[14] = -4.78937559517469690906210644243401475250720977783203125e-1;
  c[18] = -9.9430791010125119111506819535861723124980926513671875e-1;
  c[22] = -1.263128108618300604604200998437590897083282470703125e+0;
  c[26] = -1.351696647473203061196045382530428469181060791015625e+0;
  c[30] = -1.30896222005010276490111209568567574024200439453125e+0;
  c[3] = 6.622770919067215711351082063629291951656341552734375e-1;
  c[7] = 4.54915147952184961699373388910316862165927886962890625e-1;
  c[11] = 4.288631945194303352053566413815133273601531982421875e-1;
  c[15] = 4.2483084131473969335957008297555148601531982421875e-1;
  c[19] = 4.24150564030705889972949762523057870566844940185546875e-1;
  c[23] = 4.23378703021512536874837451250641606748104095458984375e-1;
  c[27] = 4.2191120962401507110683951395913027226924896240234375e-1;
  c[31] = 4.19771893119382399905958891395130194723606109619140625e-1;
  b[0] = -3.047619047619047893959987050038762390613555908203125e-1;
  b[2] = -5.079365079365079083117961999960243701934814453125e-1;
  b[4] = -7.38816738816738816097995368181727826595306396484375e-1;
  b[6] = -9.945609945609945601319168417830951511859893798828125e-1;
  b[8] = -1.27303807303807303696885355748236179351806640625e+0;
  b[10] = -1.572576443164678483555007915128953754901885986328125e+0;
  b[12] = -1.8918212850101394639779073258978314697742462158203125e+0;
  b[14] = -2.22964651447623563029765136889182031154632568359375e+0;
  b[1] = 2.47677469135802486022157609113492071628570556640625e+0;
  b[3] = 1.0535714285714286031492292750044725835323333740234375e+0;
  b[5] = -4.83927101704879458754504639728111214935779571533203125e-1;
  b[7] = -2.107175757957504114159519303939305245876312255859375e+0;
  b[9] = -3.79815497828890702436410720110870897769927978515625e+0;
  b[11] = -5.54455480053316396293894285918213427066802978515625e+0;
  b[13] = -7.33748821684707142054548967280425131320953369140625e+0;
  b[15] = -9.170271798819090491861061309464275836944580078125e+0;
  if (!flgbes)
    {
      m_c[0] = 3.096915999999999780101234136964194476604461669921875e+0;
      m_c[1] = 3.68609000000000008867573342286050319671630859375e+0;
      m_c[2] = 3.76989999999999980673237587325274944305419921875e+0;
      m_c[3] = 4.04000000000000003552713678800500929355621337890625e+0;
      m_c[4] = 4.15899999999999980815346134477294981479644775390625e+0;
      m_c[5] = 4.41500000000000003552713678800500929355621337890625e+0;
      widthc[0] = 5.55000000000000022530805346421267643108876654878258705139e-6;
      widthc[1] = 2.43000000000000002768076566572741370464427745901048183441e-6;
      widthc[2] = 2.59999999999999998822420915409181496613655326655134558678e-7;
      widthc[3] = 7.50000000000000019000643072808465205980610335245728492737e-7;
      widthc[4] = 7.70000000000000039271428990683698856400951626710593700409e-7;
      widthc[5] = 4.69999999999999999907436239524050058946613717125728726387e-7;
      widerc[0] = 1.40000000000000009546603416642207573516998309059999883175e-7;
      widerc[1] = 4.99999999999999977374055912943129342806969361845403909683e-8;
      widerc[2] = 4.00000000000000008369024332051389070130653635715134441853e-8;
      widerc[3] = 1.49999999999999993212216773882938802842090808553621172905e-7;
      widerc[4] = 2.29999999999999994886021640293216616868221535696648061275e-7;
      widerc[5] = 9.99999999999999954748111825886258685613938723690807819366e-8;
    }
  L.1:;
  m_b[0] = 9.460300000000000153477230924181640148162841796875e+0;
  m_b[1] = 1.002326000000000050249582272954285144805908203125e+1;
  m_b[2] = 1.0355199999999999960209606797434389591217041015625e+1;
  m_b[3] = 1.0579299999999999926103555480949580669403076171875e+1;
  m_b[4] = 1.08650000000000002131628207280300557613372802734375e+1;
  m_b[5] = 1.10190000000000001278976924368180334568023681640625e+1;
  widthb[0] = 1.34000000000000008759323561619014597567911550868302583694e-6;
  widthb[1] = 6.12000000000000027362986008971912355036693043075501918793e-7;
  widthb[2] = 4.42999999999999983129787091071238869233184232143685221672e-7;
  widthb[3] = 2.47999999999999997247861205362795544715481810271739959717e-7;
  widthb[4] = 3.09999999999999996559826506703494430894352262839674949646e-7;
  widthb[5] = 1.29999999999999999411210457704590748306827663327567279339e-7;
  widerb[0] = 1.79999999999999990531171148574682283616255062952404841781e-8;
  widerb[1] = 1.0999999999999999237531434067779989582902544498210772872e-8;
  widerb[2] = 8.00000000000000049825273166223885135117654954228783026338e-9;
  widerb[3] = 3.09999999999999996559826506703494430894352262839674949646e-8;
  widerb[4] = 7.00000000000000047733017083211037867584991545299999415874e-8;
  widerb[5] = 2.99999999999999973189543746917434807741642543987836688757e-8;
  {
    real(kind=8) D.3777;
    real(kind=8) D.3776;
    real(kind=8) D.3774;

    D.3774 = md0 * 2.0e+0;
    D.3776 = ((mcrun (&D.3774) / md0));
    D.3777 = D.3776 * D.3776;
    rtc1 = D.3777;
  }
  rtc2 = rtc1 * rtc1;
  rtc3 = rtc2 * rtc1;
  rtc4 = rtc3 * rtc1;
  rtc5 = rtc4 * rtc1;
  rtc6 = rtc5 * rtc1;
  rtc7 = rtc6 * rtc1;
  rtc8 = rtc7 * rtc1;
  rtc9 = rtc8 * rtc1;
  root = __builtin_sqrt (1.0e+0 - rtc1);
  logr = ((__builtin_log (((root + 1.0e+0)) / ((1.0e+0 - root))) * rtc1) / root) * 5.0e-1;
  coefc1[0] = __builtin_log (4.0e+0 / rtc1) + __builtin_log ((2.0e+0 / rtc1) * ((1.0e+0 - root)) - 1.0e+0) / root;
  {
    real(kind=8) D.3779;
    real(kind=8) D.3778;

    D.3778 = root;
    D.3779 = D.3778 * D.3778;
    coefc1[1] = ((1.0e+0 - logr)) / D.3779;
  }
  {
    real(kind=8) D.3780;

    D.3780 = root;
    coefc1[2] = ((((rtc1 + 2.0e+0) + ((rtc1 - 4.0e+0)) * logr)) * 2.5e-1) / __builtin_powi (D.3780, 4);
  }
  {
    real(kind=8) D.3781;

    D.3781 = root;
    coefc1[3] = (((((rtc1 * 1.0e+1 - rtc2 * 3.0e+0) + 8.0e+0) - ((((rtc2 - rtc1 * 4.0e+0) + 8.0e+0)) * 3.0e+0) * logr)) / 2.4e+1) / __builtin_powi (D.3781, 6);
  }
  {
    real(kind=8) D.3782;

    D.3782 = root;
    coefc1[4] = ((((((rtc3 * 1.5e+1 - rtc2 * 6.2e+1) + rtc1 * 1.04e+2) + 4.8e+1) + (((((rtc3 * 5.0e+0 - rtc2 * 2.4e+1) + rtc1 * 4.8e+1) - 6.4e+1)) * 3.0e+0) * logr)) / 1.92e+2) / __builtin_powi (D.3782, 8);
  }
  {
    real(kind=8) D.3783;

    D.3783 = root;
    coefc1[5] = (((((((rtc3 * 5.3e+2 - rtc4 * 1.05e+2) - rtc2 * 1.096e+3) + rtc1 * 1.232e+3) + 3.84e+2) - ((((((rtc4 * 7.0e+0 - rtc3 * 4.0e+1) + rtc2 * 9.6e+1) - rtc1 * 1.28e+2) + 1.28e+2)) * 1.5e+1) * logr)) / 1.92e+3) / __builtin_powi (D.3783, 10);
  }
  {
    real(kind=8) D.3784;

    D.3784 = root;
    coefc1[6] = ((((((((rtc5 * 3.15e+2 - rtc4 * 1.89e+3) + rtc3 * 4.768e+3) - rtc2 * 6.576e+3) + rtc1 * 5.568e+3) + 1.28e+3) + (((((((rtc5 * 2.1e+1 - rtc4 * 1.4e+2) + rtc3 * 4.0e+2) - rtc2 * 6.4e+2) + rtc1 * 6.4e+2) - 5.12e+2)) * 1.5e+1) * logr)) / 7.68e+3) / __builtin_powi (D.3784, 12);
  }
  {
    real(kind=8) D.3785;

    D.3785 = root;
    coefc1[7] = (((((((((rtc5 * 8.05e+3 - rtc6 * 1.155e+3) - rtc4 * 2.4136e+4) + rtc3 * 4.0576e+4) - rtc2 * 4.1984e+4) + rtc1 * 2.8544e+4) + 5.12e+3) - ((((((((rtc6 * 3.3e+1 - rtc5 * 2.52e+2) + rtc4 * 8.4e+2) - rtc3 * 1.6e+3) + rtc2 * 1.92e+3) - rtc1 * 1.536e+3) + 1.024e+3)) * 3.5e+1) * logr)) / 3.584e+4) / __builtin_powi (D.3785, 14);
  }
  {
    real(kind=8) D.3786;

    D.3786 = root;
    coefc1[8] = ((((((((((rtc7 * 1.5015e+4 - rtc6 * 1.1935e+5) + rtc5 * 4.15688e+5) - rtc4 * 8.30448e+5) + rtc3 * 1.046656e+6) - rtc2 * 8.6656e+5) + rtc1 * 4.92544e+5) + 7.168e+4) + (((((((((rtc7 * 4.29e+2 - rtc6 * 3.696e+3) + rtc5 * 1.4112e+4) - rtc4 * 3.136e+4) + rtc3 * 4.48e+4) - rtc2 * 4.3008e+4) + rtc1 * 2.8672e+4) - 1.6384e+4)) * 3.5e+1) * logr)) / 5.7344e+5) / __builtin_powi (D.3786, 16);
  }
  {
    real(kind=8) D.3788;
    real(kind=8) D.3787;

    D.3787 = root;
    D.3788 = D.3787 * D.3787;
    coefc3[0] = (((logr / rtc1 - 1.0e+0)) * 2.0e+0) / D.3788;
  }
  {
    real(kind=8) D.3792;
    real(kind=8) D.3791;
    real(kind=8) D.3789;

    D.3789 = mbpm * 2.0e+0;
    D.3791 = ((mbrun (&D.3789) / mbpm));
    D.3792 = D.3791 * D.3791;
    rtb1 = D.3792;
  }
  rtb2 = rtb1 * rtb1;
  rtb3 = rtb2 * rtb1;
  rtb4 = rtb3 * rtb1;
  rtb5 = rtb4 * rtb1;
  rtb6 = rtb5 * rtb1;
  rtb7 = rtb6 * rtb1;
  rtb8 = rtb7 * rtb1;
  rtb9 = rtb8 * rtb1;
  root = __builtin_sqrt (1.0e+0 - rtb1);
  logr = ((__builtin_log (((root + 1.0e+0)) / ((1.0e+0 - root))) * rtb1) / root) * 5.0e-1;
  coefb1[0] = __builtin_log (4.0e+0 / rtb1) + __builtin_log ((2.0e+0 / rtb1) * ((1.0e+0 - root)) - 1.0e+0) / root;
  {
    real(kind=8) D.3794;
    real(kind=8) D.3793;

    D.3793 = root;
    D.3794 = D.3793 * D.3793;
    coefb1[1] = ((1.0e+0 - logr)) / D.3794;
  }
  {
    real(kind=8) D.3795;

    D.3795 = root;
    coefb1[2] = ((((rtb1 + 2.0e+0) + ((rtb1 - 4.0e+0)) * logr)) * 2.5e-1) / __builtin_powi (D.3795, 4);
  }
  {
    real(kind=8) D.3796;

    D.3796 = root;
    coefb1[3] = (((((rtb1 * 1.0e+1 - rtb2 * 3.0e+0) + 8.0e+0) - ((((rtb2 - rtb1 * 4.0e+0) + 8.0e+0)) * 3.0e+0) * logr)) / 2.4e+1) / __builtin_powi (D.3796, 6);
  }
  {
    real(kind=8) D.3797;

    D.3797 = root;
    coefb1[4] = ((((((rtb3 * 1.5e+1 - rtb2 * 6.2e+1) + rtb1 * 1.04e+2) + 4.8e+1) + (((((rtb3 * 5.0e+0 - rtb2 * 2.4e+1) + rtb1 * 4.8e+1) - 6.4e+1)) * 3.0e+0) * logr)) / 1.92e+2) / __builtin_powi (D.3797, 8);
  }
  {
    real(kind=8) D.3798;

    D.3798 = root;
    coefb1[5] = (((((((rtb3 * 5.3e+2 - rtb4 * 1.05e+2) - rtb2 * 1.096e+3) + rtb1 * 1.232e+3) + 3.84e+2) - ((((((rtb4 * 7.0e+0 - rtb3 * 4.0e+1) + rtb2 * 9.6e+1) - rtb1 * 1.28e+2) + 1.28e+2)) * 1.5e+1) * logr)) / 1.92e+3) / __builtin_powi (D.3798, 10);
  }
  {
    real(kind=8) D.3799;

    D.3799 = root;
    coefb1[6] = ((((((((rtb5 * 3.15e+2 - rtb4 * 1.89e+3) + rtb3 * 4.768e+3) - rtb2 * 6.576e+3) + rtb1 * 5.568e+3) + 1.28e+3) + (((((((rtb5 * 2.1e+1 - rtb4 * 1.4e+2) + rtb3 * 4.0e+2) - rtb2 * 6.4e+2) + rtb1 * 6.4e+2) - 5.12e+2)) * 1.5e+1) * logr)) / 7.68e+3) / __builtin_powi (D.3799, 12);
  }
  {
    real(kind=8) D.3800;

    D.3800 = root;
    coefb1[7] = (((((((((rtb5 * 8.05e+3 - rtb6 * 1.155e+3) - rtb4 * 2.4136e+4) + rtb3 * 4.0576e+4) - rtb2 * 4.1984e+4) + rtb1 * 2.8544e+4) + 5.12e+3) - ((((((((rtb6 * 3.3e+1 - rtb5 * 2.52e+2) + rtb4 * 8.4e+2) - rtb3 * 1.6e+3) + rtb2 * 1.92e+3) - rtb1 * 1.536e+3) + 1.024e+3)) * 3.5e+1) * logr)) / 3.584e+4) / __builtin_powi (D.3800, 14);
  }
  {
    real(kind=8) D.3801;

    D.3801 = root;
    coefb1[8] = ((((((((((rtb7 * 1.5015e+4 - rtb6 * 1.1935e+5) + rtb5 * 4.15688e+5) - rtb4 * 8.30448e+5) + rtb3 * 1.046656e+6) - rtb2 * 8.6656e+5) + rtb1 * 4.92544e+5) + 7.168e+4) + (((((((((rtb7 * 4.29e+2 - rtb6 * 3.696e+3) + rtb5 * 1.4112e+4) - rtb4 * 3.136e+4) + rtb3 * 4.48e+4) - rtb2 * 4.3008e+4) + rtb1 * 2.8672e+4) - 1.6384e+4)) * 3.5e+1) * logr)) / 5.7344e+5) / __builtin_powi (D.3801, 16);
  }
  {
    real(kind=8) D.3803;
    real(kind=8) D.3802;

    D.3802 = root;
    D.3803 = D.3802 * D.3802;
    coefb3[0] = (((logr / rtb1 - 1.0e+0)) * 2.0e+0) / D.3803;
  }
  n = 1;
  if (n <= 8)
    {
      while (1)
        {
          {
            logical(kind=4) D.3809;

            {
              integer(kind=4) D.3807;
              integer(kind=4) D.3806;

              D.3806 = n;
              D.3807 = D.3806 * D.3806;
              coeff2[(integer(kind=8)) n + -1] = 1.0e+0 / (real(kind=8)) D.3807;
            }
            coefc3[(integer(kind=8)) n] = ((coefc3[(integer(kind=8)) (n + -1)] - coefc1[(integer(kind=8)) n])) / ((1.0e+0 - rtc1));
            coefb3[(integer(kind=8)) n] = ((coefb3[(integer(kind=8)) (n + -1)] - coefb1[(integer(kind=8)) n])) / ((1.0e+0 - rtb1));
            __label_000005:;
            L.2:;
            D.3809 = n == 8;
            n = n + 1;
            if (D.3809) goto L.3;
          }
        }
    }
  L.3:;
  n = 0;
  if (n <= 8)
    {
      while (1)
        {
          {
            logical(kind=4) D.3894;

            {
              real(kind=8) D.3812;

              D.3812 = md0 * 2.0e+0;
              as2m = alphas (&D.3812) / pi1;
            }
            logm = __builtin_log ((md0 * 2.0e+0) / mc) * 2.0e+0;
            {
              real(kind=8) D.3814;
              real(kind=8) D.3813;

              D.3813 = as2m;
              D.3814 = D.3813 * D.3813;
              fqcd1 = (as2m + 1.0e+0) + ((1.15416666666666660745477201999165117740631103515625e+1 - (zeta3 * 2.5e+1) / 3.0e+0)) * D.3814;
            }
            {
              real(kind=8) D.3816;
              real(kind=8) D.3815;

              D.3815 = as2m;
              D.3816 = D.3815 * D.3815;
              fqcd2 = -((D.3816 * 2.5e+1) / 1.2e+1);
            }
            sumrl = 0.0;
            error = 0.0;
            k = 1;
            if (k <= 2)
              {
                while (1)
                  {
                    {
                      logical(kind=4) D.3833;

                      if (k > 2 && flgbes)
                        {
                          {
                            real(kind=8) D.3822;
                            real(kind=8) D.3821;
                            real(kind=8) D.3820;

                            D.3820 = m_c[(integer(kind=8)) k + -1];
                            D.3821 = alpha;
                            D.3822 = D.3821 * D.3821;
                            sumrl = (((widthc[(integer(kind=8)) k + -1] / __builtin_powi (D.3820, n * 2 + 1)) * D.3822) / pi1) / 4.5e+3 + sumrl;
                          }
                          {
                            real(kind=8) D.3827;
                            real(kind=8) D.3826;
                            real(kind=8) D.3825;
                            real(kind=8) D.3824;
                            real(kind=8) D.3823;

                            D.3823 = m_c[(integer(kind=8)) k + -1];
                            D.3824 = alpha;
                            D.3825 = D.3824 * D.3824;
                            D.3826 = (((((widerc[(integer(kind=8)) k + -1] / __builtin_powi (D.3823, n * 2 + 1)) * D.3825) / pi1) / 4.5e+3));
                            D.3827 = D.3826 * D.3826;
                            error = error + D.3827;
                          }
                        }
                      else
                        {
                          {
                            real(kind=8) D.3828;

                            D.3828 = m_c[(integer(kind=8)) k + -1];
                            sumrl = widthc[(integer(kind=8)) k + -1] / __builtin_powi (D.3828, n * 2 + 1) + sumrl;
                          }
                          {
                            real(kind=8) D.3831;
                            real(kind=8) D.3830;
                            real(kind=8) D.3829;

                            D.3829 = m_c[(integer(kind=8)) k + -1];
                            D.3830 = ((widerc[(integer(kind=8)) k + -1] / __builtin_powi (D.3829, n * 2 + 1)));
                            D.3831 = D.3830 * D.3830;
                            error = error + D.3831;
                          }
                        }
                      L.8:;
                      __label_000010:;
                      L.6:;
                      D.3833 = k == 2;
                      k = k + 1;
                      if (D.3833) goto L.7;
                    }
                  }
              }
            L.7:;
            {
              real(kind=8) D.3835;
              real(kind=8) D.3834;

              D.3834 = alfamc;
              D.3835 = D.3834 * D.3834;
              sumrl = ((pi1 * 9.0e+0) / D.3835) * sumrl;
            }
            {
              real(kind=8) D.3839;
              real(kind=8) D.3838;
              real(kind=8) D.3837;
              real(kind=8) D.3836;

              D.3836 = alfamc;
              D.3837 = D.3836 * D.3836;
              D.3838 = (((pi1 * 9.0e+0) / D.3837));
              D.3839 = D.3838 * D.3838;
              error = D.3839 * error;
            }
            if (n == 0)
              {
                {
                  real(kind=8) D.3842;
                  real(kind=8) D.3841;

                  D.3841 = asc;
                  D.3842 = D.3841 * D.3841;
                  lc = ((((((((((((fqcd1 - as2m)) * logm - (__builtin_log (1.0e+0 - ((as2m * 2.5e+1) / 1.2e+1) * logm) * 1.2e+1) / 2.5e+1) - 1.6666666666666667406815349750104360282421112060546875e+0) + ((zeta3 * 4.0e+0 - 3.5e+0)) * asc) + (((((zeta3 * 1.8213e+4 - 1.7471e+4)) / 4.32e+2 - (zeta5 * 2.5e+1) / 3.0e+0) + (zeta2 * 2.5e+1) / 1.2e+1)) * D.3842) - (sumrl * 3.0e+0) * 2.5e-1)) / fqcd1 - coefc1[0])) * 2.0e+0) / rtc1) / coefc3[0];
                }
                (*sumrlc)[0] = (((((coefc1[0] + ((coefc3[0] * rtc1) * 5.0e-1) * lc)) * fqcd1 - ((((fqcd1 - as2m)) * logm - (__builtin_log (1.0e+0 - ((as2m * 2.5e+1) / 1.2e+1) * logm) * 1.2e+1) / 2.5e+1)))) * 4.0e+0) / 3.0e+0 + sumrl;
                {
                  real(kind=8) D.3845;
                  real(kind=8) D.3844;
                  real(kind=8) D.3843;

                  D.3843 = asc;
                  D.3844 = ((((((lerr * 2.0e+0) / 3.0e+0) * fqcd1) * rtc1) * coefc3[0]));
                  D.3845 = D.3844 * D.3844;
                  (*errorc)[0] = __builtin_sqrt ((__builtin_powi (D.3843, 6) * 2.56e+2 + error) + D.3845);
                }
              }
            else
              {
                {
                  real(kind=8) D.3846;

                  D.3846 = md02;
                  (*sumrlc)[(integer(kind=8)) n] = ((((coeff2[(integer(kind=8)) n + -1] * fqcd2 + ((coefc1[(integer(kind=8)) n] + ((coefc3[(integer(kind=8)) n] * rtc1) * 5.0e-1) * lc)) * fqcd1)) * 4.0e+0) / __builtin_powi (D.3846, n)) / 3.0e+0 + sumrl;
                }
                {
                  real(kind=8) D.3849;
                  real(kind=8) D.3848;
                  real(kind=8) D.3847;

                  D.3847 = asc;
                  D.3848 = D.3847 * D.3847;
                  D.3849 = ((mc * 2.0e+0));
                  (*momntc)[(integer(kind=8)) n + -1] = ((((c[((integer(kind=8)) n + -1) * 4] + c[(integer(kind=8)) n * 4 + -3] * asc) + ((c[(integer(kind=8)) n * 4 + -2] + c[(integer(kind=8)) n * 4 + -1] * 3.0e+0)) * D.3848) + (b[((integer(kind=8)) n + -1) * 2] * aggc) * ((b[(integer(kind=8)) n * 2 + -1] * asc + 1.0e+0)))) / __builtin_powi (D.3849, n * 2);
                }
                {
                  real(kind=8) D.3856;
                  real(kind=8) D.3855;
                  real(kind=8) D.3854;
                  real(kind=8) D.3853;
                  real(kind=8) D.3852;
                  real(kind=8) D.3851;
                  real(kind=8) D.3850;

                  D.3850 = asc;
                  D.3851 = (((b[((integer(kind=8)) n + -1) * 2] * aggerc) * ((b[(integer(kind=8)) n * 2 + -1] * asc + 1.0e+0))));
                  D.3852 = D.3851 * D.3851;
                  D.3853 = ((mc * 2.0e+0));
                  D.3854 = md02;
                  D.3855 = (((((((lerr * 2.0e+0) / 3.0e+0) * fqcd1) * rtc1) * coefc3[(integer(kind=8)) n]) / __builtin_powi (D.3854, n)));
                  D.3856 = D.3855 * D.3855;
                  (*errorc)[(integer(kind=8)) n] = __builtin_sqrt ((((__builtin_powi (D.3850, 6) * 2.56e+2 + D.3852)) / __builtin_powi (D.3853, n * 4) + error) + D.3856);
                }
                (*sumrlc)[(integer(kind=8)) n] = (*sumrlc)[(integer(kind=8)) n] * __builtin_powi (1.0e+1, n);
                (*momntc)[(integer(kind=8)) n + -1] = (*momntc)[(integer(kind=8)) n + -1] * __builtin_powi (1.0e+1, n);
                (*errorc)[(integer(kind=8)) n] = (*errorc)[(integer(kind=8)) n] * __builtin_powi (1.0e+1, n);
              }
            L.9:;
            {
              real(kind=8) D.3857;

              D.3857 = mbpm * 2.0e+0;
              as2m = alphas (&D.3857) / pi1;
            }
            logm = __builtin_log ((mbpm * 2.0e+0) / mb) * 2.0e+0;
            {
              real(kind=8) D.3859;
              real(kind=8) D.3858;

              D.3858 = as2m;
              D.3859 = D.3858 * D.3858;
              fqcdb = (as2m + 1.0e+0) + ((1.0625e+1 - (zeta3 * 2.3e+1) / 3.0e+0)) * D.3859;
            }
            {
              real(kind=8) D.3861;
              real(kind=8) D.3860;

              D.3860 = as2m;
              D.3861 = D.3860 * D.3860;
              fqcd2 = -((D.3861 * 2.3e+1) / 1.2e+1);
            }
            sumrl = 0.0;
            error = 0.0;
            k = 1;
            if (k <= 3)
              {
                while (1)
                  {
                    {
                      logical(kind=4) D.3869;

                      {
                        real(kind=8) D.3864;

                        D.3864 = m_b[(integer(kind=8)) k + -1];
                        sumrl = widthb[(integer(kind=8)) k + -1] / __builtin_powi (D.3864, n * 2 + 1) + sumrl;
                      }
                      {
                        real(kind=8) D.3867;
                        real(kind=8) D.3866;
                        real(kind=8) D.3865;

                        D.3865 = m_b[(integer(kind=8)) k + -1];
                        D.3866 = ((widerb[(integer(kind=8)) k + -1] / __builtin_powi (D.3865, n * 2 + 1)));
                        D.3867 = D.3866 * D.3866;
                        error = error + D.3867;
                      }
                      __label_000011:;
                      L.10:;
                      D.3869 = k == 3;
                      k = k + 1;
                      if (D.3869) goto L.11;
                    }
                  }
              }
            L.11:;
            {
              real(kind=8) D.3871;
              real(kind=8) D.3870;

              D.3870 = alfamb;
              D.3871 = D.3870 * D.3870;
              sumrl = ((pi1 * 9.0e+0) / D.3871) * sumrl;
            }
            {
              real(kind=8) D.3875;
              real(kind=8) D.3874;
              real(kind=8) D.3873;
              real(kind=8) D.3872;

              D.3872 = alfamb;
              D.3873 = D.3872 * D.3872;
              D.3874 = (((pi1 * 9.0e+0) / D.3873));
              D.3875 = D.3874 * D.3874;
              error = D.3875 * error;
            }
            if (n == 0)
              {
                {
                  real(kind=8) D.3878;
                  real(kind=8) D.3877;

                  D.3877 = asb;
                  D.3878 = D.3877 * D.3877;
                  lb = ((((((((((((fqcdb - as2m)) * logm - (__builtin_log (1.0e+0 - ((as2m * 2.3e+1) / 1.2e+1) * logm) * 1.2e+1) / 2.3e+1) - 1.6666666666666667406815349750104360282421112060546875e+0) + ((zeta3 * 4.0e+0 - 3.5e+0)) * asb) + (((((zeta3 * 1.7301e+4 - 1.6117e+4)) / 4.32e+2 - (zeta5 * 2.5e+1) / 3.0e+0) + (zeta2 * 2.3e+1) / 1.2e+1)) * D.3878) - sumrl * 3.0e+0)) / fqcdb - coefb1[0])) * 2.0e+0) / rtb1) / coefb3[0];
                }
                (*sumrlb)[0] = ((((((coefb1[0] + ((coefb3[0] * rtb1) * 5.0e-1) * lb)) * fqcdb - ((((fqcdb - as2m)) * logm - (__builtin_log (1.0e+0 - ((as2m * 2.3e+1) / 1.2e+1) * logm) * 1.2e+1) / 2.3e+1)))) / 3.0e+0 + sumrl)) * 1.0e+1;
                {
                  real(kind=8) D.3881;
                  real(kind=8) D.3880;
                  real(kind=8) D.3879;

                  D.3879 = asb;
                  D.3880 = (((((lerr / 6.0e+0) * fqcdb) * rtb1) * coefb3[0]));
                  D.3881 = D.3880 * D.3880;
                  (*errorb)[0] = __builtin_sqrt ((__builtin_powi (D.3879, 6) * 1.6e+1 + error) + D.3881);
                }
              }
            else
              {
                {
                  real(kind=8) D.3882;

                  D.3882 = mbpm2;
                  (*sumrlb)[(integer(kind=8)) n] = (((coeff2[(integer(kind=8)) n + -1] * fqcd2 + ((coefb1[(integer(kind=8)) n] + ((coefb3[(integer(kind=8)) n] * rtb1) * 5.0e-1) * lb)) * fqcdb)) / __builtin_powi (D.3882, n)) / 3.0e+0 + sumrl;
                }
                {
                  real(kind=8) D.3885;
                  real(kind=8) D.3884;
                  real(kind=8) D.3883;

                  D.3883 = asb;
                  D.3884 = D.3883 * D.3883;
                  D.3885 = ((mb * 2.0e+0));
                  (*momntb)[(integer(kind=8)) n + -1] = (((((c[((integer(kind=8)) n + -1) * 4] + c[(integer(kind=8)) n * 4 + -3] * asb) + ((c[(integer(kind=8)) n * 4 + -2] + c[(integer(kind=8)) n * 4 + -1] * 4.0e+0)) * D.3884) + (b[((integer(kind=8)) n + -1) * 2] * aggb) * ((b[(integer(kind=8)) n * 2 + -1] * asb + 1.0e+0)))) * 2.5e-1) / __builtin_powi (D.3885, n * 2);
                }
                {
                  real(kind=8) D.3892;
                  real(kind=8) D.3891;
                  real(kind=8) D.3890;
                  real(kind=8) D.3889;
                  real(kind=8) D.3888;
                  real(kind=8) D.3887;
                  real(kind=8) D.3886;

                  D.3886 = asb;
                  D.3887 = ((((b[((integer(kind=8)) n + -1) * 2] * aggerb) * ((b[(integer(kind=8)) n * 2 + -1] * asb + 1.0e+0))) * 2.5e-1));
                  D.3888 = D.3887 * D.3887;
                  D.3889 = ((mb * 2.0e+0));
                  D.3890 = mbpm2;
                  D.3891 = ((((((lerr / 6.0e+0) * fqcdb) * rtb1) * coefb3[(integer(kind=8)) n]) / __builtin_powi (D.3890, n)));
                  D.3892 = D.3891 * D.3891;
                  (*errorb)[(integer(kind=8)) n] = __builtin_sqrt ((((__builtin_powi (D.3886, 6) * 1.6e+1 + D.3888)) / __builtin_powi (D.3889, n * 4) + error) + D.3892);
                }
                (*sumrlb)[(integer(kind=8)) n] = (*sumrlb)[(integer(kind=8)) n] * __builtin_powi (1.0e+1, n * 2 + 1);
                (*momntb)[(integer(kind=8)) n + -1] = (*momntb)[(integer(kind=8)) n + -1] * __builtin_powi (1.0e+1, n * 2 + 1);
                (*errorb)[(integer(kind=8)) n] = (*errorb)[(integer(kind=8)) n] * __builtin_powi (1.0e+1, n * 2 + 1);
              }
            L.12:;
            __label_000100:;
            L.4:;
            D.3894 = n == 8;
            n = n + 1;
            if (D.3894) goto L.5;
          }
        }
    }
  L.5:;
  *ccmbc = ((c[6] + c[7] * 3.0e+0)) / ((c[22] + c[23] * 4.0e+0));
  if (ABS_EXPR <*ccmbc> > 1.0e+0)
    {
      *ccmbc = 1.0e+0 / *ccmbc;
    }
  L.13:;
  {
    real(kind=8) D.3903;
    real(kind=8) D.3902;
    real(kind=8) D.3901;
    real(kind=8) D.3900;
    real(kind=8) D.3899;
    real(kind=8) D.3898;
    real(kind=8) D.3897;
    real(kind=8) D.3896;

    D.3896 = ((asc * asb));
    D.3897 = ((mc * 2.0e+0));
    D.3898 = ((mb * 2.0e+0));
    D.3899 = (((lerr * 2.0e+0) / 3.0e+0));
    D.3900 = D.3899 * D.3899;
    D.3901 = md02;
    D.3902 = D.3901 * D.3901;
    D.3903 = mbpm2;
    *ccmbc = ((((((((((((b[2] * aggerc) * ((b[3] * asc + 1.0e+0))) * aggerb) * b[10]) * ((b[11] * asb + 1.0e+0)) + (*ccmbc * 2.56e+2) * __builtin_powi (D.3896, 3))) / __builtin_powi (D.3897, 4)) / __builtin_powi (D.3898, 12) + (((((((D.3900 * fqcd1) * fqcdb) * rtc1) * rtb1) * coefc3[2]) * coefb3[6]) / D.3902) / __builtin_powi (D.3903, 6))) / (*errorc)[2]) / (*errorb)[6]) * 2.5e-1) * 1.0e+15;
  }
  return;
}


