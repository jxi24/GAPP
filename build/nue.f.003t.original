nue (real(kind=8) & restrict q2, real(kind=8) & restrict gvnue, real(kind=8) & restrict ganue)
{
  static real(kind=8) q[10] [value-expr: coupls.q];
  static real(kind=8) i3[10] [value-expr: coupls.i3];
  static real(kind=8) nc[10] [value-expr: coupls.nc];
  static real(kind=8) v[10] [value-expr: coupls.v];
  static real(kind=8) a[10] [value-expr: coupls.a];
  static real(kind=8) alphat [value-expr: coupls.alphat];
  static real(kind=8) sinhat [value-expr: coupls.sinhat];
  static real(kind=8) coshat [value-expr: coupls.coshat];
  static real(kind=8) rhonc [value-expr: coupls.rhonc];
  static real(kind=8) i3r[10] [value-expr: coupls.i3r];
  static real(kind=8) u1xr[10] [value-expr: coupls.u1xr];
  static real(kind=8) u1xl[10] [value-expr: coupls.u1xl];
  static real(kind=8) fitx [value-expr: fit221.fitx];
  static real(kind=8) fitsph [value-expr: fit221.fitsph];
  static real(kind=8) fitcph [value-expr: fit221.fitcph];
  static real(kind=8) fittph [value-expr: fit221.fittph];
  static real(kind=8) fits2b [value-expr: fit221.fits2b];
  static real(kind=8) kkss [value-expr: fit221.kkss];
  static real(kind=8) kkcc [value-expr: fit221.kkcc];
  static real(kind=8) kkem [value-expr: fit221.kkem];
  static real(kind=8) bestlnx [value-expr: fitbst.bestlnx];
  static real(kind=8) besttph [value-expr: fitbst.besttph];
  static real(kind=8) bests2b [value-expr: fitbst.bests2b];
  static logical(kind=4) flgfitx [value-expr: fitflg.flgfitx];
  static logical(kind=4) flgtph [value-expr: fitflg.flgtph];
  static logical(kind=4) flgs2b [value-expr: fitflg.flgs2b];
  static logical(kind=4) flfout [value-expr: fitflg.flfout];
  static integer(kind=4) modtype [value-expr: fitswtr.modtype];
  static integer(kind=4) plltr [value-expr: fitswtr.plltr];
  static integer(kind=4) prtpll[81] [value-expr: fitswtr.prtpll];
  static logical(kind=4) flagmr [value-expr: flags.flagmr];
  static integer(kind=4) flgblm [value-expr: flags.flgblm];
  static logical(kind=4) ffermi [value-expr: flags.ffermi];
  static logical(kind=4) fa2mt4 [value-expr: flags.fa2mt4];
  static logical(kind=4) fa2mt2 [value-expr: flags.fa2mt2];
  static logical(kind=4) fa2mt0 [value-expr: flags.fa2mt0];
  static logical(kind=4) fla2im [value-expr: flags.fla2im];
  static logical(kind=4) fasmt2 [value-expr: flags.fasmt2];
  static logical(kind=4) fasmt0 [value-expr: flags.fasmt0];
  static logical(kind=4) fas2mt [value-expr: flags.fas2mt];
  static logical(kind=4) flagmf [value-expr: flags.flagmf];
  static logical(kind=4) fpolew [value-expr: flags.fpolew];
  static logical(kind=4) flgech [value-expr: flags.flgech];
  static logical(kind=4) fobliq [value-expr: flags.fobliq];
  static logical(kind=4) f4lqcd [value-expr: flags.f4lqcd];
  static logical(kind=4) falas2 [value-expr: flags.falas2];
  static logical(kind=4) fbayes [value-expr: flags.fbayes];
  static integer(kind=4) flagzp [value-expr: flags.flagzp];
  static logical(kind=4) flagmh [value-expr: flags.flagmh];
  static logical(kind=4) flagmt [value-expr: flags.flagmt];
  static logical(kind=4) flagmc [value-expr: flags.flagmc];
  static logical(kind=4) flgrho [value-expr: flags.flgrho];
  static logical(kind=4) fkappa [value-expr: flags.fkappa];
  static logical(kind=4) flags [value-expr: flags.flags];
  static logical(kind=4) flagt [value-expr: flags.flagt];
  static logical(kind=4) fzprim [value-expr: flags.fzprim];
  static logical(kind=4) fsinth [value-expr: flags.fsinth];
  static logical(kind=4) fwrite [value-expr: flags.fwrite];
  static logical(kind=4) flprob [value-expr: flags.flprob];
  static logical(kind=4) fhiggs [value-expr: flags.fhiggs];
  static logical(kind=4) flagal [value-expr: flags.flagal];
  static logical(kind=4) fsplot [value-expr: flags.fsplot];
  static real(kind=8) alpha [value-expr: inputs.alpha];
  static real(kind=8) gf [value-expr: inputs.gf];
  static real(kind=8) alfas0 [value-expr: inputs.alfas0];
  static real(kind=8) asgrid[2001] [value-expr: inputs.asgrid];
  static real(kind=8) mu0 [value-expr: inputs.mu0];
  static real(kind=8) dahad3 [value-expr: inputs.dahad3];
  static real(kind=8) pol4hf [value-expr: inputs.pol4hf];
  static real(kind=8) an[8004] [value-expr: inputs.an];
  static real(kind=8) bn[8004] [value-expr: inputs.bn];
  static real(kind=8) pi1 [value-expr: inputs.pi1];
  static real(kind=8) pi2 [value-expr: inputs.pi2];
  static real(kind=8) zeta2 [value-expr: inputs.zeta2];
  static real(kind=8) zeta3 [value-expr: inputs.zeta3];
  static real(kind=8) zeta4 [value-expr: inputs.zeta4];
  static real(kind=8) zeta5 [value-expr: inputs.zeta5];
  static real(kind=8) zeta6 [value-expr: inputs.zeta6];
  static real(kind=8) zeta7 [value-expr: inputs.zeta7];
  static real(kind=8) prob [value-expr: limits.prob];
  static real(kind=8) mtp [value-expr: limits.mtp];
  static real(kind=8) sigma [value-expr: limits.sigma];
  static integer(kind=4) zprime [value-expr: limits.zprime];
  static real(kind=8) mw2 [value-expr: mass2.mw2];
  static real(kind=8) mz2 [value-expr: mass2.mz2];
  static real(kind=8) mt2 [value-expr: mass2.mt2];
  static real(kind=8) mh2 [value-expr: mass2.mh2];
  static real(kind=8) mz [value-expr: masses.mz];
  static real(kind=8) mh [value-expr: masses.mh];
  static real(kind=8) mt [value-expr: masses.mt];
  static real(kind=8) mb [value-expr: masses.mb];
  static real(kind=8) mc [value-expr: masses.mc];
  static real(kind=8) ms [value-expr: masses.ms];
  static real(kind=8) md [value-expr: masses.md];
  static real(kind=8) mu [value-expr: masses.mu];
  static real(kind=8) mtau [value-expr: masses.mtau];
  static real(kind=8) mmu [value-expr: masses.mmu];
  static real(kind=8) me [value-expr: masses.me];
  static real(kind=8) mw [value-expr: masses.mw];
  static real(kind=8) swpar [value-expr: obliqe.swpar];
  static real(kind=8) spar [value-expr: obliqe.spar];
  static real(kind=8) tpar [value-expr: obliqe.tpar];
  static real(kind=8) upar [value-expr: obliqe.upar];
  static real(kind=8) brho [value-expr: obliqe.brho];
  static real(kind=8) bkappa [value-expr: obliqe.bkappa];
  static real(kind=8) rpar [value-expr: obliqe.rpar];
  static real(kind=8) zpar [value-expr: obliqe.zpar];
  static real(kind=8) delrwh [value-expr: obliqe.delrwh];
  static real(kind=8) delrzh [value-expr: obliqe.delrzh];
  static real(kind=8) delr [value-expr: obliqe.delr];
  static real(kind=8) rhohat [value-expr: obliqe.rhohat];
  static real(kind=8) rho2 [value-expr: obliqe.rho2];
  static real(kind=8) ratzw2 [value-expr: ratios.ratzw2];
  static real(kind=8) rathw2 [value-expr: ratios.rathw2];
  static real(kind=8) rathz2 [value-expr: ratios.rathz2];
  static real(kind=8) rattw2 [value-expr: ratios.rattw2];
  static real(kind=8) rattz2 [value-expr: ratios.rattz2];
  static real(kind=8) ratth2 [value-expr: ratios.ratth2];
  static real(kind=8) mzp [value-expr: zprime.mzp];
  static real(kind=8) mzp2 [value-expr: zprime.mzp2];
  static real(kind=8) mz02 [value-expr: zprime.mz02];
  static real(kind=8) sinth [value-expr: zprime.sinth];
  static real(kind=8) sinth2 [value-expr: zprime.sinth2];
  static real(kind=8) costh [value-expr: zprime.costh];
  static real(kind=8) costh2 [value-expr: zprime.costh2];
  static real(kind=8) ratg21 [value-expr: zprime.ratg21];
  static real(kind=8) rhoeff [value-expr: zprime.rhoeff];
  static real(kind=8) rhoezp [value-expr: zprime.rhoezp];
  static real(kind=8) rhozzp [value-expr: zprime.rhozzp];
  static real(kind=8) v2[10] [value-expr: zprime.v2];
  static real(kind=8) a2[10] [value-expr: zprime.a2];
  static real(kind=8) eps2_l[10] [value-expr: zprime.eps2_l];
  static real(kind=8) eps2_r[10] [value-expr: zprime.eps2_r];
  static real(kind=8) ratgrl [value-expr: zprime.ratgrl];
  real(kind=8) al;
  real(kind=8) alh;
  real(kind=8) cgamma;
  real(kind=8) cz;
  real(kind=8) epse_l;
  real(kind=8) epse_r;
  real(kind=8) rhonue;
  real(kind=8) s2tnue;
  real(kind=8) sin4th;

  if (*q2 != 0.0)
    {
      {
        struct __st_parameter_dt dt_parm.0;

        dt_parm.0.common.filename = &"../src/F/core/nue.f"[1]{lb: 1 sz: 1};
        dt_parm.0.common.line = 14;
        dt_parm.0.common.flags = 128;
        dt_parm.0.common.unit = 6;
        _gfortran_st_write (&dt_parm.0);
        _gfortran_transfer_character_write (&dt_parm.0, &"presently nu-e scattering rad. corr. only at Q^2 = 0"[1]{lb: 1 sz: 1}, 52);
        _gfortran_st_write_done (&dt_parm.0);
      }
      return;
    }
  L.1:;
  al = alpha / pi1;
  alh = alphat / pi1;
  sin4th = sinhat * sinhat;
  cz = (2.375e+0 - (sinhat * 7.0e+0) * 5.0e-1) + sin4th * 3.0e+0;
  cgamma = (2.375e+0 - (sinhat * 1.7e+1) * 2.5e-1) + sin4th * 3.0e+0;
  rhonue = (((alh * 5.0e-1) / sinhat) / coshat) * cz + rhonc;
  {
    static real(kind=8) C.3690 = 0.0;

    s2tnue = shat (&C.3690) - ((alh * 5.0e-1) / coshat) * cgamma;
  }
  {
    real(kind=8) D.3693;
    real(kind=8) D.3692;

    D.3692 = mmu;
    D.3693 = D.3692 * D.3692;
    s2tnue = (s2tnue - (al / 6.0e+0) * ((__builtin_log (mw2 / D.3693) + 1.666666666666666574148081281236954964697360992431640625e-1))) - (al * 2.0e+0) / 9.0e+0;
  }
  *gvnue = ((s2tnue * 2.0e+0 - 5.0e-1)) * rhonue;
  *ganue = rhonue * -5.0e-1;
  if (modtype == 1)
    {
      *gvnue = *gvnue + ((((((i3[1] - i3[1] * fits2b) + i3r[1]) + ((((fitcph - 1.0e+0)) * 2.0e+0) * ((fitcph * kkss + 1.0e+0))) * q[1])) * kkcc + (((((fits2b - 1.0e+0)) * i3[1] - i3r[1]) + ((((((kkss - 1.0e+0)) * fitcph + 1.0e+0) - fits2b * kkss)) * 2.0e+0) * q[1])) * kkss)) / ((((kkcc - kkss)) * fitx));
      *ganue = *ganue + (((i3[1] - i3[1] * fits2b) - i3r[1])) / fitx;
    }
  L.2:;
  if (modtype == 2)
    {
      *gvnue = *gvnue + ((((((i3[1] - (fits2b * 2.0e+0) * i3[1]) + i3r[1]) + ((((fitcph - 1.0e+0)) * 2.0e+0) * ((fitcph * kkss + 1.0e+0))) * q[1])) * kkcc + (((((fits2b * 2.0e+0) * i3[1] - i3[1]) - i3r[1]) + ((((((kkss - 1.0e+0)) * fitcph + 1.0e+0) - (fits2b * 2.0e+0) * kkss)) * 2.0e+0) * q[1])) * kkss)) / (((fitx * 4.0e+0) * ((kkcc - kkss))));
      *ganue = *ganue + (((i3[1] - (fits2b * 2.0e+0) * i3[1]) - i3r[1])) / ((fitx * 4.0e+0));
    }
  L.3:;
  if (modtype == 3)
    {
      {
        real(kind=8) D.3698;
        real(kind=8) D.3697;

        D.3697 = ((fitcph - 1.0e+0));
        D.3698 = D.3697 * D.3697;
        *gvnue = *gvnue + ((-(((D.3698 * 2.0e+0) * kkcc) * kkss))) / ((((kkcc - kkss)) * fitx));
      }
      *ganue = *ganue + 0.0;
    }
  L.4:;
  if (modtype == 4)
    {
      *gvnue = *gvnue + ((((kkcc - kkss)) * i3[1] + (((((fitcph - 1.0e+0)) * 2.0e+0) * ((fitcph * kkcc - kkss))) * kkss) * q[1])) / ((((kkcc - kkss)) * fitx));
      *ganue = *ganue + i3[1] / fitx;
    }
  L.5:;
  if (flagzp != 0)
    {
      epse_l = ((*gvnue + *ganue)) * 5.0e-1;
      epse_r = ((*gvnue - *ganue)) * 5.0e-1;
      epse_l = (rhoeff * epse_l + ((rhoezp * 2.0e+0) * eps2_l[0]) * eps2_l[1]) + ((eps2_l[1] + (eps2_l[0] * 2.0e+0) * epse_l)) * rhozzp;
      epse_r = (rhoeff * epse_r + ((rhoezp * 2.0e+0) * eps2_l[0]) * eps2_r[1]) + ((eps2_r[1] + (eps2_l[0] * 2.0e+0) * epse_r)) * rhozzp;
      *gvnue = epse_l + epse_r;
      *ganue = epse_l - epse_r;
    }
  L.6:;
  return;
}


